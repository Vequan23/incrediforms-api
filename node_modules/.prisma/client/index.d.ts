
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Form
 * 
 */
export type Form = $Result.DefaultSelection<Prisma.$FormPayload>
/**
 * Model Field
 * 
 */
export type Field = $Result.DefaultSelection<Prisma.$FieldPayload>
/**
 * Model FieldOption
 * 
 */
export type FieldOption = $Result.DefaultSelection<Prisma.$FieldOptionPayload>
/**
 * Model Submission
 * 
 */
export type Submission = $Result.DefaultSelection<Prisma.$SubmissionPayload>
/**
 * Model PublishedForm
 * 
 */
export type PublishedForm = $Result.DefaultSelection<Prisma.$PublishedFormPayload>
/**
 * Model StripeUser
 * 
 */
export type StripeUser = $Result.DefaultSelection<Prisma.$StripeUserPayload>
/**
 * Model PromptFile
 * 
 */
export type PromptFile = $Result.DefaultSelection<Prisma.$PromptFilePayload>
/**
 * Model Webhook
 * 
 */
export type Webhook = $Result.DefaultSelection<Prisma.$WebhookPayload>
/**
 * Model FigCollection
 * 
 */
export type FigCollection = $Result.DefaultSelection<Prisma.$FigCollectionPayload>
/**
 * Model FigCollectionFile
 * 
 */
export type FigCollectionFile = $Result.DefaultSelection<Prisma.$FigCollectionFilePayload>
/**
 * Model APIKey
 * 
 */
export type APIKey = $Result.DefaultSelection<Prisma.$APIKeyPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.form`: Exposes CRUD operations for the **Form** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Forms
    * const forms = await prisma.form.findMany()
    * ```
    */
  get form(): Prisma.FormDelegate<ExtArgs>;

  /**
   * `prisma.field`: Exposes CRUD operations for the **Field** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fields
    * const fields = await prisma.field.findMany()
    * ```
    */
  get field(): Prisma.FieldDelegate<ExtArgs>;

  /**
   * `prisma.fieldOption`: Exposes CRUD operations for the **FieldOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FieldOptions
    * const fieldOptions = await prisma.fieldOption.findMany()
    * ```
    */
  get fieldOption(): Prisma.FieldOptionDelegate<ExtArgs>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs>;

  /**
   * `prisma.publishedForm`: Exposes CRUD operations for the **PublishedForm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PublishedForms
    * const publishedForms = await prisma.publishedForm.findMany()
    * ```
    */
  get publishedForm(): Prisma.PublishedFormDelegate<ExtArgs>;

  /**
   * `prisma.stripeUser`: Exposes CRUD operations for the **StripeUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StripeUsers
    * const stripeUsers = await prisma.stripeUser.findMany()
    * ```
    */
  get stripeUser(): Prisma.StripeUserDelegate<ExtArgs>;

  /**
   * `prisma.promptFile`: Exposes CRUD operations for the **PromptFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PromptFiles
    * const promptFiles = await prisma.promptFile.findMany()
    * ```
    */
  get promptFile(): Prisma.PromptFileDelegate<ExtArgs>;

  /**
   * `prisma.webhook`: Exposes CRUD operations for the **Webhook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Webhooks
    * const webhooks = await prisma.webhook.findMany()
    * ```
    */
  get webhook(): Prisma.WebhookDelegate<ExtArgs>;

  /**
   * `prisma.figCollection`: Exposes CRUD operations for the **FigCollection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FigCollections
    * const figCollections = await prisma.figCollection.findMany()
    * ```
    */
  get figCollection(): Prisma.FigCollectionDelegate<ExtArgs>;

  /**
   * `prisma.figCollectionFile`: Exposes CRUD operations for the **FigCollectionFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FigCollectionFiles
    * const figCollectionFiles = await prisma.figCollectionFile.findMany()
    * ```
    */
  get figCollectionFile(): Prisma.FigCollectionFileDelegate<ExtArgs>;

  /**
   * `prisma.aPIKey`: Exposes CRUD operations for the **APIKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more APIKeys
    * const aPIKeys = await prisma.aPIKey.findMany()
    * ```
    */
  get aPIKey(): Prisma.APIKeyDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Form: 'Form',
    Field: 'Field',
    FieldOption: 'FieldOption',
    Submission: 'Submission',
    PublishedForm: 'PublishedForm',
    StripeUser: 'StripeUser',
    PromptFile: 'PromptFile',
    Webhook: 'Webhook',
    FigCollection: 'FigCollection',
    FigCollectionFile: 'FigCollectionFile',
    APIKey: 'APIKey'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "form" | "field" | "fieldOption" | "submission" | "publishedForm" | "stripeUser" | "promptFile" | "webhook" | "figCollection" | "figCollectionFile" | "aPIKey"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Form: {
        payload: Prisma.$FormPayload<ExtArgs>
        fields: Prisma.FormFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          findFirst: {
            args: Prisma.FormFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          findMany: {
            args: Prisma.FormFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>[]
          }
          create: {
            args: Prisma.FormCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          createMany: {
            args: Prisma.FormCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>[]
          }
          delete: {
            args: Prisma.FormDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          update: {
            args: Prisma.FormUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          deleteMany: {
            args: Prisma.FormDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FormUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          aggregate: {
            args: Prisma.FormAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForm>
          }
          groupBy: {
            args: Prisma.FormGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormCountArgs<ExtArgs>
            result: $Utils.Optional<FormCountAggregateOutputType> | number
          }
        }
      }
      Field: {
        payload: Prisma.$FieldPayload<ExtArgs>
        fields: Prisma.FieldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FieldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FieldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          findFirst: {
            args: Prisma.FieldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FieldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          findMany: {
            args: Prisma.FieldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>[]
          }
          create: {
            args: Prisma.FieldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          createMany: {
            args: Prisma.FieldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FieldCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>[]
          }
          delete: {
            args: Prisma.FieldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          update: {
            args: Prisma.FieldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          deleteMany: {
            args: Prisma.FieldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FieldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FieldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          aggregate: {
            args: Prisma.FieldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateField>
          }
          groupBy: {
            args: Prisma.FieldGroupByArgs<ExtArgs>
            result: $Utils.Optional<FieldGroupByOutputType>[]
          }
          count: {
            args: Prisma.FieldCountArgs<ExtArgs>
            result: $Utils.Optional<FieldCountAggregateOutputType> | number
          }
        }
      }
      FieldOption: {
        payload: Prisma.$FieldOptionPayload<ExtArgs>
        fields: Prisma.FieldOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FieldOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FieldOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldOptionPayload>
          }
          findFirst: {
            args: Prisma.FieldOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FieldOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldOptionPayload>
          }
          findMany: {
            args: Prisma.FieldOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldOptionPayload>[]
          }
          create: {
            args: Prisma.FieldOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldOptionPayload>
          }
          createMany: {
            args: Prisma.FieldOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FieldOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldOptionPayload>[]
          }
          delete: {
            args: Prisma.FieldOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldOptionPayload>
          }
          update: {
            args: Prisma.FieldOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldOptionPayload>
          }
          deleteMany: {
            args: Prisma.FieldOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FieldOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FieldOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldOptionPayload>
          }
          aggregate: {
            args: Prisma.FieldOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFieldOption>
          }
          groupBy: {
            args: Prisma.FieldOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FieldOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FieldOptionCountArgs<ExtArgs>
            result: $Utils.Optional<FieldOptionCountAggregateOutputType> | number
          }
        }
      }
      Submission: {
        payload: Prisma.$SubmissionPayload<ExtArgs>
        fields: Prisma.SubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findFirst: {
            args: Prisma.SubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findMany: {
            args: Prisma.SubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          create: {
            args: Prisma.SubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          createMany: {
            args: Prisma.SubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          delete: {
            args: Prisma.SubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          update: {
            args: Prisma.SubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.SubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      PublishedForm: {
        payload: Prisma.$PublishedFormPayload<ExtArgs>
        fields: Prisma.PublishedFormFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublishedFormFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedFormPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublishedFormFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedFormPayload>
          }
          findFirst: {
            args: Prisma.PublishedFormFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedFormPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublishedFormFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedFormPayload>
          }
          findMany: {
            args: Prisma.PublishedFormFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedFormPayload>[]
          }
          create: {
            args: Prisma.PublishedFormCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedFormPayload>
          }
          createMany: {
            args: Prisma.PublishedFormCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PublishedFormCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedFormPayload>[]
          }
          delete: {
            args: Prisma.PublishedFormDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedFormPayload>
          }
          update: {
            args: Prisma.PublishedFormUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedFormPayload>
          }
          deleteMany: {
            args: Prisma.PublishedFormDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PublishedFormUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PublishedFormUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedFormPayload>
          }
          aggregate: {
            args: Prisma.PublishedFormAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePublishedForm>
          }
          groupBy: {
            args: Prisma.PublishedFormGroupByArgs<ExtArgs>
            result: $Utils.Optional<PublishedFormGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublishedFormCountArgs<ExtArgs>
            result: $Utils.Optional<PublishedFormCountAggregateOutputType> | number
          }
        }
      }
      StripeUser: {
        payload: Prisma.$StripeUserPayload<ExtArgs>
        fields: Prisma.StripeUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StripeUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripeUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StripeUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripeUserPayload>
          }
          findFirst: {
            args: Prisma.StripeUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripeUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StripeUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripeUserPayload>
          }
          findMany: {
            args: Prisma.StripeUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripeUserPayload>[]
          }
          create: {
            args: Prisma.StripeUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripeUserPayload>
          }
          createMany: {
            args: Prisma.StripeUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StripeUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripeUserPayload>[]
          }
          delete: {
            args: Prisma.StripeUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripeUserPayload>
          }
          update: {
            args: Prisma.StripeUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripeUserPayload>
          }
          deleteMany: {
            args: Prisma.StripeUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StripeUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StripeUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripeUserPayload>
          }
          aggregate: {
            args: Prisma.StripeUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStripeUser>
          }
          groupBy: {
            args: Prisma.StripeUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<StripeUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.StripeUserCountArgs<ExtArgs>
            result: $Utils.Optional<StripeUserCountAggregateOutputType> | number
          }
        }
      }
      PromptFile: {
        payload: Prisma.$PromptFilePayload<ExtArgs>
        fields: Prisma.PromptFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromptFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromptFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptFilePayload>
          }
          findFirst: {
            args: Prisma.PromptFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromptFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptFilePayload>
          }
          findMany: {
            args: Prisma.PromptFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptFilePayload>[]
          }
          create: {
            args: Prisma.PromptFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptFilePayload>
          }
          createMany: {
            args: Prisma.PromptFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PromptFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptFilePayload>[]
          }
          delete: {
            args: Prisma.PromptFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptFilePayload>
          }
          update: {
            args: Prisma.PromptFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptFilePayload>
          }
          deleteMany: {
            args: Prisma.PromptFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromptFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PromptFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptFilePayload>
          }
          aggregate: {
            args: Prisma.PromptFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromptFile>
          }
          groupBy: {
            args: Prisma.PromptFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromptFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromptFileCountArgs<ExtArgs>
            result: $Utils.Optional<PromptFileCountAggregateOutputType> | number
          }
        }
      }
      Webhook: {
        payload: Prisma.$WebhookPayload<ExtArgs>
        fields: Prisma.WebhookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebhookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebhookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          findFirst: {
            args: Prisma.WebhookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebhookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          findMany: {
            args: Prisma.WebhookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>[]
          }
          create: {
            args: Prisma.WebhookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          createMany: {
            args: Prisma.WebhookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebhookCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>[]
          }
          delete: {
            args: Prisma.WebhookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          update: {
            args: Prisma.WebhookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          deleteMany: {
            args: Prisma.WebhookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebhookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WebhookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          aggregate: {
            args: Prisma.WebhookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebhook>
          }
          groupBy: {
            args: Prisma.WebhookGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebhookGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebhookCountArgs<ExtArgs>
            result: $Utils.Optional<WebhookCountAggregateOutputType> | number
          }
        }
      }
      FigCollection: {
        payload: Prisma.$FigCollectionPayload<ExtArgs>
        fields: Prisma.FigCollectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FigCollectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FigCollectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionPayload>
          }
          findFirst: {
            args: Prisma.FigCollectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FigCollectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionPayload>
          }
          findMany: {
            args: Prisma.FigCollectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionPayload>[]
          }
          create: {
            args: Prisma.FigCollectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionPayload>
          }
          createMany: {
            args: Prisma.FigCollectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FigCollectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionPayload>[]
          }
          delete: {
            args: Prisma.FigCollectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionPayload>
          }
          update: {
            args: Prisma.FigCollectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionPayload>
          }
          deleteMany: {
            args: Prisma.FigCollectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FigCollectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FigCollectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionPayload>
          }
          aggregate: {
            args: Prisma.FigCollectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFigCollection>
          }
          groupBy: {
            args: Prisma.FigCollectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FigCollectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FigCollectionCountArgs<ExtArgs>
            result: $Utils.Optional<FigCollectionCountAggregateOutputType> | number
          }
        }
      }
      FigCollectionFile: {
        payload: Prisma.$FigCollectionFilePayload<ExtArgs>
        fields: Prisma.FigCollectionFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FigCollectionFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FigCollectionFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionFilePayload>
          }
          findFirst: {
            args: Prisma.FigCollectionFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FigCollectionFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionFilePayload>
          }
          findMany: {
            args: Prisma.FigCollectionFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionFilePayload>[]
          }
          create: {
            args: Prisma.FigCollectionFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionFilePayload>
          }
          createMany: {
            args: Prisma.FigCollectionFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FigCollectionFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionFilePayload>[]
          }
          delete: {
            args: Prisma.FigCollectionFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionFilePayload>
          }
          update: {
            args: Prisma.FigCollectionFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionFilePayload>
          }
          deleteMany: {
            args: Prisma.FigCollectionFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FigCollectionFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FigCollectionFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FigCollectionFilePayload>
          }
          aggregate: {
            args: Prisma.FigCollectionFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFigCollectionFile>
          }
          groupBy: {
            args: Prisma.FigCollectionFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FigCollectionFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FigCollectionFileCountArgs<ExtArgs>
            result: $Utils.Optional<FigCollectionFileCountAggregateOutputType> | number
          }
        }
      }
      APIKey: {
        payload: Prisma.$APIKeyPayload<ExtArgs>
        fields: Prisma.APIKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.APIKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.APIKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIKeyPayload>
          }
          findFirst: {
            args: Prisma.APIKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.APIKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIKeyPayload>
          }
          findMany: {
            args: Prisma.APIKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIKeyPayload>[]
          }
          create: {
            args: Prisma.APIKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIKeyPayload>
          }
          createMany: {
            args: Prisma.APIKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.APIKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIKeyPayload>[]
          }
          delete: {
            args: Prisma.APIKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIKeyPayload>
          }
          update: {
            args: Prisma.APIKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIKeyPayload>
          }
          deleteMany: {
            args: Prisma.APIKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.APIKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.APIKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$APIKeyPayload>
          }
          aggregate: {
            args: Prisma.APIKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAPIKey>
          }
          groupBy: {
            args: Prisma.APIKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<APIKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.APIKeyCountArgs<ExtArgs>
            result: $Utils.Optional<APIKeyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Form: number
    PublishedForm: number
    APIKey: number
    FigCollection: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Form?: boolean | UserCountOutputTypeCountFormArgs
    PublishedForm?: boolean | UserCountOutputTypeCountPublishedFormArgs
    APIKey?: boolean | UserCountOutputTypeCountAPIKeyArgs
    FigCollection?: boolean | UserCountOutputTypeCountFigCollectionArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPublishedFormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublishedFormWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAPIKeyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: APIKeyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFigCollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FigCollectionWhereInput
  }


  /**
   * Count Type FormCountOutputType
   */

  export type FormCountOutputType = {
    Field: number
    Submission: number
    PublishedForm: number
    PromptFile: number
  }

  export type FormCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Field?: boolean | FormCountOutputTypeCountFieldArgs
    Submission?: boolean | FormCountOutputTypeCountSubmissionArgs
    PublishedForm?: boolean | FormCountOutputTypeCountPublishedFormArgs
    PromptFile?: boolean | FormCountOutputTypeCountPromptFileArgs
  }

  // Custom InputTypes
  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormCountOutputType
     */
    select?: FormCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeCountFieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldWhereInput
  }

  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeCountSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeCountPublishedFormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublishedFormWhereInput
  }

  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeCountPromptFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromptFileWhereInput
  }


  /**
   * Count Type FieldCountOutputType
   */

  export type FieldCountOutputType = {
    FieldOption: number
  }

  export type FieldCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FieldOption?: boolean | FieldCountOutputTypeCountFieldOptionArgs
  }

  // Custom InputTypes
  /**
   * FieldCountOutputType without action
   */
  export type FieldCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldCountOutputType
     */
    select?: FieldCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FieldCountOutputType without action
   */
  export type FieldCountOutputTypeCountFieldOptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldOptionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    tier_id: string | null
    logo_url: string | null
    created_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    tier_id: string | null
    logo_url: string | null
    created_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    tier_id: number
    logo_url: number
    created_at: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    tier_id?: true
    logo_url?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    tier_id?: true
    logo_url?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    tier_id?: true
    logo_url?: true
    created_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    tier_id: string
    logo_url: string | null
    created_at: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    tier_id?: boolean
    logo_url?: boolean
    created_at?: boolean
    Form?: boolean | User$FormArgs<ExtArgs>
    PublishedForm?: boolean | User$PublishedFormArgs<ExtArgs>
    stripe_user?: boolean | User$stripe_userArgs<ExtArgs>
    APIKey?: boolean | User$APIKeyArgs<ExtArgs>
    FigCollection?: boolean | User$FigCollectionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    tier_id?: boolean
    logo_url?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    tier_id?: boolean
    logo_url?: boolean
    created_at?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Form?: boolean | User$FormArgs<ExtArgs>
    PublishedForm?: boolean | User$PublishedFormArgs<ExtArgs>
    stripe_user?: boolean | User$stripe_userArgs<ExtArgs>
    APIKey?: boolean | User$APIKeyArgs<ExtArgs>
    FigCollection?: boolean | User$FigCollectionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Form: Prisma.$FormPayload<ExtArgs>[]
      PublishedForm: Prisma.$PublishedFormPayload<ExtArgs>[]
      stripe_user: Prisma.$StripeUserPayload<ExtArgs> | null
      APIKey: Prisma.$APIKeyPayload<ExtArgs>[]
      FigCollection: Prisma.$FigCollectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      tier_id: string
      logo_url: string | null
      created_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Form<T extends User$FormArgs<ExtArgs> = {}>(args?: Subset<T, User$FormArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findMany"> | Null>
    PublishedForm<T extends User$PublishedFormArgs<ExtArgs> = {}>(args?: Subset<T, User$PublishedFormArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "findMany"> | Null>
    stripe_user<T extends User$stripe_userArgs<ExtArgs> = {}>(args?: Subset<T, User$stripe_userArgs<ExtArgs>>): Prisma__StripeUserClient<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    APIKey<T extends User$APIKeyArgs<ExtArgs> = {}>(args?: Subset<T, User$APIKeyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "findMany"> | Null>
    FigCollection<T extends User$FigCollectionArgs<ExtArgs> = {}>(args?: Subset<T, User$FigCollectionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly tier_id: FieldRef<"User", 'String'>
    readonly logo_url: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.Form
   */
  export type User$FormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    where?: FormWhereInput
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    cursor?: FormWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * User.PublishedForm
   */
  export type User$PublishedFormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    where?: PublishedFormWhereInput
    orderBy?: PublishedFormOrderByWithRelationInput | PublishedFormOrderByWithRelationInput[]
    cursor?: PublishedFormWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublishedFormScalarFieldEnum | PublishedFormScalarFieldEnum[]
  }

  /**
   * User.stripe_user
   */
  export type User$stripe_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
    where?: StripeUserWhereInput
  }

  /**
   * User.APIKey
   */
  export type User$APIKeyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
    where?: APIKeyWhereInput
    orderBy?: APIKeyOrderByWithRelationInput | APIKeyOrderByWithRelationInput[]
    cursor?: APIKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: APIKeyScalarFieldEnum | APIKeyScalarFieldEnum[]
  }

  /**
   * User.FigCollection
   */
  export type User$FigCollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    where?: FigCollectionWhereInput
    orderBy?: FigCollectionOrderByWithRelationInput | FigCollectionOrderByWithRelationInput[]
    cursor?: FigCollectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FigCollectionScalarFieldEnum | FigCollectionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Form
   */

  export type AggregateForm = {
    _count: FormCountAggregateOutputType | null
    _min: FormMinAggregateOutputType | null
    _max: FormMaxAggregateOutputType | null
  }

  export type FormMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    name: string | null
    description: string | null
    prompt: string | null
    file: string | null
    theme_color: string | null
    created_at: Date | null
    webhook_id: string | null
  }

  export type FormMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    name: string | null
    description: string | null
    prompt: string | null
    file: string | null
    theme_color: string | null
    created_at: Date | null
    webhook_id: string | null
  }

  export type FormCountAggregateOutputType = {
    id: number
    user_id: number
    name: number
    description: number
    prompt: number
    file: number
    theme_color: number
    created_at: number
    webhook_id: number
    _all: number
  }


  export type FormMinAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    prompt?: true
    file?: true
    theme_color?: true
    created_at?: true
    webhook_id?: true
  }

  export type FormMaxAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    prompt?: true
    file?: true
    theme_color?: true
    created_at?: true
    webhook_id?: true
  }

  export type FormCountAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    description?: true
    prompt?: true
    file?: true
    theme_color?: true
    created_at?: true
    webhook_id?: true
    _all?: true
  }

  export type FormAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Form to aggregate.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Forms
    **/
    _count?: true | FormCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormMaxAggregateInputType
  }

  export type GetFormAggregateType<T extends FormAggregateArgs> = {
        [P in keyof T & keyof AggregateForm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForm[P]>
      : GetScalarType<T[P], AggregateForm[P]>
  }




  export type FormGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormWhereInput
    orderBy?: FormOrderByWithAggregationInput | FormOrderByWithAggregationInput[]
    by: FormScalarFieldEnum[] | FormScalarFieldEnum
    having?: FormScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormCountAggregateInputType | true
    _min?: FormMinAggregateInputType
    _max?: FormMaxAggregateInputType
  }

  export type FormGroupByOutputType = {
    id: string
    user_id: string
    name: string
    description: string | null
    prompt: string | null
    file: string | null
    theme_color: string | null
    created_at: Date
    webhook_id: string | null
    _count: FormCountAggregateOutputType | null
    _min: FormMinAggregateOutputType | null
    _max: FormMaxAggregateOutputType | null
  }

  type GetFormGroupByPayload<T extends FormGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormGroupByOutputType[P]>
            : GetScalarType<T[P], FormGroupByOutputType[P]>
        }
      >
    >


  export type FormSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    prompt?: boolean
    file?: boolean
    theme_color?: boolean
    created_at?: boolean
    webhook_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    Field?: boolean | Form$FieldArgs<ExtArgs>
    Submission?: boolean | Form$SubmissionArgs<ExtArgs>
    PublishedForm?: boolean | Form$PublishedFormArgs<ExtArgs>
    PromptFile?: boolean | Form$PromptFileArgs<ExtArgs>
    Webhook?: boolean | Form$WebhookArgs<ExtArgs>
    _count?: boolean | FormCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["form"]>

  export type FormSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    prompt?: boolean
    file?: boolean
    theme_color?: boolean
    created_at?: boolean
    webhook_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["form"]>

  export type FormSelectScalar = {
    id?: boolean
    user_id?: boolean
    name?: boolean
    description?: boolean
    prompt?: boolean
    file?: boolean
    theme_color?: boolean
    created_at?: boolean
    webhook_id?: boolean
  }

  export type FormInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    Field?: boolean | Form$FieldArgs<ExtArgs>
    Submission?: boolean | Form$SubmissionArgs<ExtArgs>
    PublishedForm?: boolean | Form$PublishedFormArgs<ExtArgs>
    PromptFile?: boolean | Form$PromptFileArgs<ExtArgs>
    Webhook?: boolean | Form$WebhookArgs<ExtArgs>
    _count?: boolean | FormCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FormIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FormPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Form"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      Field: Prisma.$FieldPayload<ExtArgs>[]
      Submission: Prisma.$SubmissionPayload<ExtArgs>[]
      PublishedForm: Prisma.$PublishedFormPayload<ExtArgs>[]
      PromptFile: Prisma.$PromptFilePayload<ExtArgs>[]
      Webhook: Prisma.$WebhookPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      name: string
      description: string | null
      prompt: string | null
      file: string | null
      theme_color: string | null
      created_at: Date
      webhook_id: string | null
    }, ExtArgs["result"]["form"]>
    composites: {}
  }

  type FormGetPayload<S extends boolean | null | undefined | FormDefaultArgs> = $Result.GetResult<Prisma.$FormPayload, S>

  type FormCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FormFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormCountAggregateInputType | true
    }

  export interface FormDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Form'], meta: { name: 'Form' } }
    /**
     * Find zero or one Form that matches the filter.
     * @param {FormFindUniqueArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormFindUniqueArgs>(args: SelectSubset<T, FormFindUniqueArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Form that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FormFindUniqueOrThrowArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormFindUniqueOrThrowArgs>(args: SelectSubset<T, FormFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Form that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormFindFirstArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormFindFirstArgs>(args?: SelectSubset<T, FormFindFirstArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Form that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormFindFirstOrThrowArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormFindFirstOrThrowArgs>(args?: SelectSubset<T, FormFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Forms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Forms
     * const forms = await prisma.form.findMany()
     * 
     * // Get first 10 Forms
     * const forms = await prisma.form.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formWithIdOnly = await prisma.form.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormFindManyArgs>(args?: SelectSubset<T, FormFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Form.
     * @param {FormCreateArgs} args - Arguments to create a Form.
     * @example
     * // Create one Form
     * const Form = await prisma.form.create({
     *   data: {
     *     // ... data to create a Form
     *   }
     * })
     * 
     */
    create<T extends FormCreateArgs>(args: SelectSubset<T, FormCreateArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Forms.
     * @param {FormCreateManyArgs} args - Arguments to create many Forms.
     * @example
     * // Create many Forms
     * const form = await prisma.form.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormCreateManyArgs>(args?: SelectSubset<T, FormCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Forms and returns the data saved in the database.
     * @param {FormCreateManyAndReturnArgs} args - Arguments to create many Forms.
     * @example
     * // Create many Forms
     * const form = await prisma.form.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Forms and only return the `id`
     * const formWithIdOnly = await prisma.form.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormCreateManyAndReturnArgs>(args?: SelectSubset<T, FormCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Form.
     * @param {FormDeleteArgs} args - Arguments to delete one Form.
     * @example
     * // Delete one Form
     * const Form = await prisma.form.delete({
     *   where: {
     *     // ... filter to delete one Form
     *   }
     * })
     * 
     */
    delete<T extends FormDeleteArgs>(args: SelectSubset<T, FormDeleteArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Form.
     * @param {FormUpdateArgs} args - Arguments to update one Form.
     * @example
     * // Update one Form
     * const form = await prisma.form.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormUpdateArgs>(args: SelectSubset<T, FormUpdateArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Forms.
     * @param {FormDeleteManyArgs} args - Arguments to filter Forms to delete.
     * @example
     * // Delete a few Forms
     * const { count } = await prisma.form.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormDeleteManyArgs>(args?: SelectSubset<T, FormDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Forms
     * const form = await prisma.form.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormUpdateManyArgs>(args: SelectSubset<T, FormUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Form.
     * @param {FormUpsertArgs} args - Arguments to update or create a Form.
     * @example
     * // Update or create a Form
     * const form = await prisma.form.upsert({
     *   create: {
     *     // ... data to create a Form
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Form we want to update
     *   }
     * })
     */
    upsert<T extends FormUpsertArgs>(args: SelectSubset<T, FormUpsertArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormCountArgs} args - Arguments to filter Forms to count.
     * @example
     * // Count the number of Forms
     * const count = await prisma.form.count({
     *   where: {
     *     // ... the filter for the Forms we want to count
     *   }
     * })
    **/
    count<T extends FormCountArgs>(
      args?: Subset<T, FormCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormAggregateArgs>(args: Subset<T, FormAggregateArgs>): Prisma.PrismaPromise<GetFormAggregateType<T>>

    /**
     * Group by Form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormGroupByArgs['orderBy'] }
        : { orderBy?: FormGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Form model
   */
  readonly fields: FormFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Form.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Field<T extends Form$FieldArgs<ExtArgs> = {}>(args?: Subset<T, Form$FieldArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findMany"> | Null>
    Submission<T extends Form$SubmissionArgs<ExtArgs> = {}>(args?: Subset<T, Form$SubmissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany"> | Null>
    PublishedForm<T extends Form$PublishedFormArgs<ExtArgs> = {}>(args?: Subset<T, Form$PublishedFormArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "findMany"> | Null>
    PromptFile<T extends Form$PromptFileArgs<ExtArgs> = {}>(args?: Subset<T, Form$PromptFileArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "findMany"> | Null>
    Webhook<T extends Form$WebhookArgs<ExtArgs> = {}>(args?: Subset<T, Form$WebhookArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Form model
   */ 
  interface FormFieldRefs {
    readonly id: FieldRef<"Form", 'String'>
    readonly user_id: FieldRef<"Form", 'String'>
    readonly name: FieldRef<"Form", 'String'>
    readonly description: FieldRef<"Form", 'String'>
    readonly prompt: FieldRef<"Form", 'String'>
    readonly file: FieldRef<"Form", 'String'>
    readonly theme_color: FieldRef<"Form", 'String'>
    readonly created_at: FieldRef<"Form", 'DateTime'>
    readonly webhook_id: FieldRef<"Form", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Form findUnique
   */
  export type FormFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form findUniqueOrThrow
   */
  export type FormFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form findFirst
   */
  export type FormFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Forms.
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Forms.
     */
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * Form findFirstOrThrow
   */
  export type FormFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Forms.
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Forms.
     */
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * Form findMany
   */
  export type FormFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Forms to fetch.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Forms.
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * Form create
   */
  export type FormCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * The data needed to create a Form.
     */
    data: XOR<FormCreateInput, FormUncheckedCreateInput>
  }

  /**
   * Form createMany
   */
  export type FormCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Forms.
     */
    data: FormCreateManyInput | FormCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Form createManyAndReturn
   */
  export type FormCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Forms.
     */
    data: FormCreateManyInput | FormCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Form update
   */
  export type FormUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * The data needed to update a Form.
     */
    data: XOR<FormUpdateInput, FormUncheckedUpdateInput>
    /**
     * Choose, which Form to update.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form updateMany
   */
  export type FormUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Forms.
     */
    data: XOR<FormUpdateManyMutationInput, FormUncheckedUpdateManyInput>
    /**
     * Filter which Forms to update
     */
    where?: FormWhereInput
  }

  /**
   * Form upsert
   */
  export type FormUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * The filter to search for the Form to update in case it exists.
     */
    where: FormWhereUniqueInput
    /**
     * In case the Form found by the `where` argument doesn't exist, create a new Form with this data.
     */
    create: XOR<FormCreateInput, FormUncheckedCreateInput>
    /**
     * In case the Form was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormUpdateInput, FormUncheckedUpdateInput>
  }

  /**
   * Form delete
   */
  export type FormDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter which Form to delete.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form deleteMany
   */
  export type FormDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Forms to delete
     */
    where?: FormWhereInput
  }

  /**
   * Form.Field
   */
  export type Form$FieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    where?: FieldWhereInput
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    cursor?: FieldWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Form.Submission
   */
  export type Form$SubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Form.PublishedForm
   */
  export type Form$PublishedFormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    where?: PublishedFormWhereInput
    orderBy?: PublishedFormOrderByWithRelationInput | PublishedFormOrderByWithRelationInput[]
    cursor?: PublishedFormWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublishedFormScalarFieldEnum | PublishedFormScalarFieldEnum[]
  }

  /**
   * Form.PromptFile
   */
  export type Form$PromptFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
    where?: PromptFileWhereInput
    orderBy?: PromptFileOrderByWithRelationInput | PromptFileOrderByWithRelationInput[]
    cursor?: PromptFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromptFileScalarFieldEnum | PromptFileScalarFieldEnum[]
  }

  /**
   * Form.Webhook
   */
  export type Form$WebhookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    where?: WebhookWhereInput
  }

  /**
   * Form without action
   */
  export type FormDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
  }


  /**
   * Model Field
   */

  export type AggregateField = {
    _count: FieldCountAggregateOutputType | null
    _avg: FieldAvgAggregateOutputType | null
    _sum: FieldSumAggregateOutputType | null
    _min: FieldMinAggregateOutputType | null
    _max: FieldMaxAggregateOutputType | null
  }

  export type FieldAvgAggregateOutputType = {
    order: number | null
  }

  export type FieldSumAggregateOutputType = {
    order: number | null
  }

  export type FieldMinAggregateOutputType = {
    id: string | null
    form_id: string | null
    name: string | null
    label: string | null
    type: string | null
    description: string | null
    required: boolean | null
    created_at: Date | null
    order: number | null
  }

  export type FieldMaxAggregateOutputType = {
    id: string | null
    form_id: string | null
    name: string | null
    label: string | null
    type: string | null
    description: string | null
    required: boolean | null
    created_at: Date | null
    order: number | null
  }

  export type FieldCountAggregateOutputType = {
    id: number
    form_id: number
    name: number
    label: number
    type: number
    description: number
    required: number
    created_at: number
    order: number
    _all: number
  }


  export type FieldAvgAggregateInputType = {
    order?: true
  }

  export type FieldSumAggregateInputType = {
    order?: true
  }

  export type FieldMinAggregateInputType = {
    id?: true
    form_id?: true
    name?: true
    label?: true
    type?: true
    description?: true
    required?: true
    created_at?: true
    order?: true
  }

  export type FieldMaxAggregateInputType = {
    id?: true
    form_id?: true
    name?: true
    label?: true
    type?: true
    description?: true
    required?: true
    created_at?: true
    order?: true
  }

  export type FieldCountAggregateInputType = {
    id?: true
    form_id?: true
    name?: true
    label?: true
    type?: true
    description?: true
    required?: true
    created_at?: true
    order?: true
    _all?: true
  }

  export type FieldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Field to aggregate.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fields
    **/
    _count?: true | FieldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FieldAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FieldSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FieldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FieldMaxAggregateInputType
  }

  export type GetFieldAggregateType<T extends FieldAggregateArgs> = {
        [P in keyof T & keyof AggregateField]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateField[P]>
      : GetScalarType<T[P], AggregateField[P]>
  }




  export type FieldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldWhereInput
    orderBy?: FieldOrderByWithAggregationInput | FieldOrderByWithAggregationInput[]
    by: FieldScalarFieldEnum[] | FieldScalarFieldEnum
    having?: FieldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FieldCountAggregateInputType | true
    _avg?: FieldAvgAggregateInputType
    _sum?: FieldSumAggregateInputType
    _min?: FieldMinAggregateInputType
    _max?: FieldMaxAggregateInputType
  }

  export type FieldGroupByOutputType = {
    id: string
    form_id: string
    name: string
    label: string
    type: string
    description: string | null
    required: boolean
    created_at: Date
    order: number | null
    _count: FieldCountAggregateOutputType | null
    _avg: FieldAvgAggregateOutputType | null
    _sum: FieldSumAggregateOutputType | null
    _min: FieldMinAggregateOutputType | null
    _max: FieldMaxAggregateOutputType | null
  }

  type GetFieldGroupByPayload<T extends FieldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FieldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FieldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FieldGroupByOutputType[P]>
            : GetScalarType<T[P], FieldGroupByOutputType[P]>
        }
      >
    >


  export type FieldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    name?: boolean
    label?: boolean
    type?: boolean
    description?: boolean
    required?: boolean
    created_at?: boolean
    order?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
    FieldOption?: boolean | Field$FieldOptionArgs<ExtArgs>
    _count?: boolean | FieldCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["field"]>

  export type FieldSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    name?: boolean
    label?: boolean
    type?: boolean
    description?: boolean
    required?: boolean
    created_at?: boolean
    order?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["field"]>

  export type FieldSelectScalar = {
    id?: boolean
    form_id?: boolean
    name?: boolean
    label?: boolean
    type?: boolean
    description?: boolean
    required?: boolean
    created_at?: boolean
    order?: boolean
  }

  export type FieldInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
    FieldOption?: boolean | Field$FieldOptionArgs<ExtArgs>
    _count?: boolean | FieldCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FieldIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }

  export type $FieldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Field"
    objects: {
      form: Prisma.$FormPayload<ExtArgs>
      FieldOption: Prisma.$FieldOptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      form_id: string
      name: string
      label: string
      type: string
      description: string | null
      required: boolean
      created_at: Date
      order: number | null
    }, ExtArgs["result"]["field"]>
    composites: {}
  }

  type FieldGetPayload<S extends boolean | null | undefined | FieldDefaultArgs> = $Result.GetResult<Prisma.$FieldPayload, S>

  type FieldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FieldFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FieldCountAggregateInputType | true
    }

  export interface FieldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Field'], meta: { name: 'Field' } }
    /**
     * Find zero or one Field that matches the filter.
     * @param {FieldFindUniqueArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FieldFindUniqueArgs>(args: SelectSubset<T, FieldFindUniqueArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Field that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FieldFindUniqueOrThrowArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FieldFindUniqueOrThrowArgs>(args: SelectSubset<T, FieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Field that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldFindFirstArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FieldFindFirstArgs>(args?: SelectSubset<T, FieldFindFirstArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Field that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldFindFirstOrThrowArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FieldFindFirstOrThrowArgs>(args?: SelectSubset<T, FieldFindFirstOrThrowArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Fields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fields
     * const fields = await prisma.field.findMany()
     * 
     * // Get first 10 Fields
     * const fields = await prisma.field.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fieldWithIdOnly = await prisma.field.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FieldFindManyArgs>(args?: SelectSubset<T, FieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Field.
     * @param {FieldCreateArgs} args - Arguments to create a Field.
     * @example
     * // Create one Field
     * const Field = await prisma.field.create({
     *   data: {
     *     // ... data to create a Field
     *   }
     * })
     * 
     */
    create<T extends FieldCreateArgs>(args: SelectSubset<T, FieldCreateArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Fields.
     * @param {FieldCreateManyArgs} args - Arguments to create many Fields.
     * @example
     * // Create many Fields
     * const field = await prisma.field.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FieldCreateManyArgs>(args?: SelectSubset<T, FieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fields and returns the data saved in the database.
     * @param {FieldCreateManyAndReturnArgs} args - Arguments to create many Fields.
     * @example
     * // Create many Fields
     * const field = await prisma.field.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fields and only return the `id`
     * const fieldWithIdOnly = await prisma.field.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FieldCreateManyAndReturnArgs>(args?: SelectSubset<T, FieldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Field.
     * @param {FieldDeleteArgs} args - Arguments to delete one Field.
     * @example
     * // Delete one Field
     * const Field = await prisma.field.delete({
     *   where: {
     *     // ... filter to delete one Field
     *   }
     * })
     * 
     */
    delete<T extends FieldDeleteArgs>(args: SelectSubset<T, FieldDeleteArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Field.
     * @param {FieldUpdateArgs} args - Arguments to update one Field.
     * @example
     * // Update one Field
     * const field = await prisma.field.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FieldUpdateArgs>(args: SelectSubset<T, FieldUpdateArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Fields.
     * @param {FieldDeleteManyArgs} args - Arguments to filter Fields to delete.
     * @example
     * // Delete a few Fields
     * const { count } = await prisma.field.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FieldDeleteManyArgs>(args?: SelectSubset<T, FieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fields
     * const field = await prisma.field.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FieldUpdateManyArgs>(args: SelectSubset<T, FieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Field.
     * @param {FieldUpsertArgs} args - Arguments to update or create a Field.
     * @example
     * // Update or create a Field
     * const field = await prisma.field.upsert({
     *   create: {
     *     // ... data to create a Field
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Field we want to update
     *   }
     * })
     */
    upsert<T extends FieldUpsertArgs>(args: SelectSubset<T, FieldUpsertArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldCountArgs} args - Arguments to filter Fields to count.
     * @example
     * // Count the number of Fields
     * const count = await prisma.field.count({
     *   where: {
     *     // ... the filter for the Fields we want to count
     *   }
     * })
    **/
    count<T extends FieldCountArgs>(
      args?: Subset<T, FieldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FieldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Field.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FieldAggregateArgs>(args: Subset<T, FieldAggregateArgs>): Prisma.PrismaPromise<GetFieldAggregateType<T>>

    /**
     * Group by Field.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FieldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FieldGroupByArgs['orderBy'] }
        : { orderBy?: FieldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Field model
   */
  readonly fields: FieldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Field.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FieldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends FormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormDefaultArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    FieldOption<T extends Field$FieldOptionArgs<ExtArgs> = {}>(args?: Subset<T, Field$FieldOptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Field model
   */ 
  interface FieldFieldRefs {
    readonly id: FieldRef<"Field", 'String'>
    readonly form_id: FieldRef<"Field", 'String'>
    readonly name: FieldRef<"Field", 'String'>
    readonly label: FieldRef<"Field", 'String'>
    readonly type: FieldRef<"Field", 'String'>
    readonly description: FieldRef<"Field", 'String'>
    readonly required: FieldRef<"Field", 'Boolean'>
    readonly created_at: FieldRef<"Field", 'DateTime'>
    readonly order: FieldRef<"Field", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Field findUnique
   */
  export type FieldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field findUniqueOrThrow
   */
  export type FieldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field findFirst
   */
  export type FieldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fields.
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fields.
     */
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Field findFirstOrThrow
   */
  export type FieldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fields.
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fields.
     */
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Field findMany
   */
  export type FieldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Fields to fetch.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fields.
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Field create
   */
  export type FieldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * The data needed to create a Field.
     */
    data: XOR<FieldCreateInput, FieldUncheckedCreateInput>
  }

  /**
   * Field createMany
   */
  export type FieldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fields.
     */
    data: FieldCreateManyInput | FieldCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Field createManyAndReturn
   */
  export type FieldCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Fields.
     */
    data: FieldCreateManyInput | FieldCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Field update
   */
  export type FieldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * The data needed to update a Field.
     */
    data: XOR<FieldUpdateInput, FieldUncheckedUpdateInput>
    /**
     * Choose, which Field to update.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field updateMany
   */
  export type FieldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fields.
     */
    data: XOR<FieldUpdateManyMutationInput, FieldUncheckedUpdateManyInput>
    /**
     * Filter which Fields to update
     */
    where?: FieldWhereInput
  }

  /**
   * Field upsert
   */
  export type FieldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * The filter to search for the Field to update in case it exists.
     */
    where: FieldWhereUniqueInput
    /**
     * In case the Field found by the `where` argument doesn't exist, create a new Field with this data.
     */
    create: XOR<FieldCreateInput, FieldUncheckedCreateInput>
    /**
     * In case the Field was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FieldUpdateInput, FieldUncheckedUpdateInput>
  }

  /**
   * Field delete
   */
  export type FieldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter which Field to delete.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field deleteMany
   */
  export type FieldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fields to delete
     */
    where?: FieldWhereInput
  }

  /**
   * Field.FieldOption
   */
  export type Field$FieldOptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
    where?: FieldOptionWhereInput
    orderBy?: FieldOptionOrderByWithRelationInput | FieldOptionOrderByWithRelationInput[]
    cursor?: FieldOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FieldOptionScalarFieldEnum | FieldOptionScalarFieldEnum[]
  }

  /**
   * Field without action
   */
  export type FieldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
  }


  /**
   * Model FieldOption
   */

  export type AggregateFieldOption = {
    _count: FieldOptionCountAggregateOutputType | null
    _min: FieldOptionMinAggregateOutputType | null
    _max: FieldOptionMaxAggregateOutputType | null
  }

  export type FieldOptionMinAggregateOutputType = {
    id: string | null
    field_id: string | null
    name: string | null
    created_at: Date | null
  }

  export type FieldOptionMaxAggregateOutputType = {
    id: string | null
    field_id: string | null
    name: string | null
    created_at: Date | null
  }

  export type FieldOptionCountAggregateOutputType = {
    id: number
    field_id: number
    name: number
    created_at: number
    _all: number
  }


  export type FieldOptionMinAggregateInputType = {
    id?: true
    field_id?: true
    name?: true
    created_at?: true
  }

  export type FieldOptionMaxAggregateInputType = {
    id?: true
    field_id?: true
    name?: true
    created_at?: true
  }

  export type FieldOptionCountAggregateInputType = {
    id?: true
    field_id?: true
    name?: true
    created_at?: true
    _all?: true
  }

  export type FieldOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FieldOption to aggregate.
     */
    where?: FieldOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOptions to fetch.
     */
    orderBy?: FieldOptionOrderByWithRelationInput | FieldOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FieldOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FieldOptions
    **/
    _count?: true | FieldOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FieldOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FieldOptionMaxAggregateInputType
  }

  export type GetFieldOptionAggregateType<T extends FieldOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateFieldOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFieldOption[P]>
      : GetScalarType<T[P], AggregateFieldOption[P]>
  }




  export type FieldOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldOptionWhereInput
    orderBy?: FieldOptionOrderByWithAggregationInput | FieldOptionOrderByWithAggregationInput[]
    by: FieldOptionScalarFieldEnum[] | FieldOptionScalarFieldEnum
    having?: FieldOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FieldOptionCountAggregateInputType | true
    _min?: FieldOptionMinAggregateInputType
    _max?: FieldOptionMaxAggregateInputType
  }

  export type FieldOptionGroupByOutputType = {
    id: string
    field_id: string
    name: string
    created_at: Date
    _count: FieldOptionCountAggregateOutputType | null
    _min: FieldOptionMinAggregateOutputType | null
    _max: FieldOptionMaxAggregateOutputType | null
  }

  type GetFieldOptionGroupByPayload<T extends FieldOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FieldOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FieldOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FieldOptionGroupByOutputType[P]>
            : GetScalarType<T[P], FieldOptionGroupByOutputType[P]>
        }
      >
    >


  export type FieldOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    field_id?: boolean
    name?: boolean
    created_at?: boolean
    field?: boolean | FieldDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fieldOption"]>

  export type FieldOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    field_id?: boolean
    name?: boolean
    created_at?: boolean
    field?: boolean | FieldDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fieldOption"]>

  export type FieldOptionSelectScalar = {
    id?: boolean
    field_id?: boolean
    name?: boolean
    created_at?: boolean
  }

  export type FieldOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    field?: boolean | FieldDefaultArgs<ExtArgs>
  }
  export type FieldOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    field?: boolean | FieldDefaultArgs<ExtArgs>
  }

  export type $FieldOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FieldOption"
    objects: {
      field: Prisma.$FieldPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      field_id: string
      name: string
      created_at: Date
    }, ExtArgs["result"]["fieldOption"]>
    composites: {}
  }

  type FieldOptionGetPayload<S extends boolean | null | undefined | FieldOptionDefaultArgs> = $Result.GetResult<Prisma.$FieldOptionPayload, S>

  type FieldOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FieldOptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FieldOptionCountAggregateInputType | true
    }

  export interface FieldOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FieldOption'], meta: { name: 'FieldOption' } }
    /**
     * Find zero or one FieldOption that matches the filter.
     * @param {FieldOptionFindUniqueArgs} args - Arguments to find a FieldOption
     * @example
     * // Get one FieldOption
     * const fieldOption = await prisma.fieldOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FieldOptionFindUniqueArgs>(args: SelectSubset<T, FieldOptionFindUniqueArgs<ExtArgs>>): Prisma__FieldOptionClient<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FieldOption that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FieldOptionFindUniqueOrThrowArgs} args - Arguments to find a FieldOption
     * @example
     * // Get one FieldOption
     * const fieldOption = await prisma.fieldOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FieldOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, FieldOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FieldOptionClient<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FieldOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOptionFindFirstArgs} args - Arguments to find a FieldOption
     * @example
     * // Get one FieldOption
     * const fieldOption = await prisma.fieldOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FieldOptionFindFirstArgs>(args?: SelectSubset<T, FieldOptionFindFirstArgs<ExtArgs>>): Prisma__FieldOptionClient<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FieldOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOptionFindFirstOrThrowArgs} args - Arguments to find a FieldOption
     * @example
     * // Get one FieldOption
     * const fieldOption = await prisma.fieldOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FieldOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, FieldOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FieldOptionClient<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FieldOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FieldOptions
     * const fieldOptions = await prisma.fieldOption.findMany()
     * 
     * // Get first 10 FieldOptions
     * const fieldOptions = await prisma.fieldOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fieldOptionWithIdOnly = await prisma.fieldOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FieldOptionFindManyArgs>(args?: SelectSubset<T, FieldOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FieldOption.
     * @param {FieldOptionCreateArgs} args - Arguments to create a FieldOption.
     * @example
     * // Create one FieldOption
     * const FieldOption = await prisma.fieldOption.create({
     *   data: {
     *     // ... data to create a FieldOption
     *   }
     * })
     * 
     */
    create<T extends FieldOptionCreateArgs>(args: SelectSubset<T, FieldOptionCreateArgs<ExtArgs>>): Prisma__FieldOptionClient<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FieldOptions.
     * @param {FieldOptionCreateManyArgs} args - Arguments to create many FieldOptions.
     * @example
     * // Create many FieldOptions
     * const fieldOption = await prisma.fieldOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FieldOptionCreateManyArgs>(args?: SelectSubset<T, FieldOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FieldOptions and returns the data saved in the database.
     * @param {FieldOptionCreateManyAndReturnArgs} args - Arguments to create many FieldOptions.
     * @example
     * // Create many FieldOptions
     * const fieldOption = await prisma.fieldOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FieldOptions and only return the `id`
     * const fieldOptionWithIdOnly = await prisma.fieldOption.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FieldOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, FieldOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FieldOption.
     * @param {FieldOptionDeleteArgs} args - Arguments to delete one FieldOption.
     * @example
     * // Delete one FieldOption
     * const FieldOption = await prisma.fieldOption.delete({
     *   where: {
     *     // ... filter to delete one FieldOption
     *   }
     * })
     * 
     */
    delete<T extends FieldOptionDeleteArgs>(args: SelectSubset<T, FieldOptionDeleteArgs<ExtArgs>>): Prisma__FieldOptionClient<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FieldOption.
     * @param {FieldOptionUpdateArgs} args - Arguments to update one FieldOption.
     * @example
     * // Update one FieldOption
     * const fieldOption = await prisma.fieldOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FieldOptionUpdateArgs>(args: SelectSubset<T, FieldOptionUpdateArgs<ExtArgs>>): Prisma__FieldOptionClient<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FieldOptions.
     * @param {FieldOptionDeleteManyArgs} args - Arguments to filter FieldOptions to delete.
     * @example
     * // Delete a few FieldOptions
     * const { count } = await prisma.fieldOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FieldOptionDeleteManyArgs>(args?: SelectSubset<T, FieldOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FieldOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FieldOptions
     * const fieldOption = await prisma.fieldOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FieldOptionUpdateManyArgs>(args: SelectSubset<T, FieldOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FieldOption.
     * @param {FieldOptionUpsertArgs} args - Arguments to update or create a FieldOption.
     * @example
     * // Update or create a FieldOption
     * const fieldOption = await prisma.fieldOption.upsert({
     *   create: {
     *     // ... data to create a FieldOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FieldOption we want to update
     *   }
     * })
     */
    upsert<T extends FieldOptionUpsertArgs>(args: SelectSubset<T, FieldOptionUpsertArgs<ExtArgs>>): Prisma__FieldOptionClient<$Result.GetResult<Prisma.$FieldOptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FieldOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOptionCountArgs} args - Arguments to filter FieldOptions to count.
     * @example
     * // Count the number of FieldOptions
     * const count = await prisma.fieldOption.count({
     *   where: {
     *     // ... the filter for the FieldOptions we want to count
     *   }
     * })
    **/
    count<T extends FieldOptionCountArgs>(
      args?: Subset<T, FieldOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FieldOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FieldOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FieldOptionAggregateArgs>(args: Subset<T, FieldOptionAggregateArgs>): Prisma.PrismaPromise<GetFieldOptionAggregateType<T>>

    /**
     * Group by FieldOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FieldOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FieldOptionGroupByArgs['orderBy'] }
        : { orderBy?: FieldOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FieldOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFieldOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FieldOption model
   */
  readonly fields: FieldOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FieldOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FieldOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    field<T extends FieldDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FieldDefaultArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FieldOption model
   */ 
  interface FieldOptionFieldRefs {
    readonly id: FieldRef<"FieldOption", 'String'>
    readonly field_id: FieldRef<"FieldOption", 'String'>
    readonly name: FieldRef<"FieldOption", 'String'>
    readonly created_at: FieldRef<"FieldOption", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FieldOption findUnique
   */
  export type FieldOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
    /**
     * Filter, which FieldOption to fetch.
     */
    where: FieldOptionWhereUniqueInput
  }

  /**
   * FieldOption findUniqueOrThrow
   */
  export type FieldOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
    /**
     * Filter, which FieldOption to fetch.
     */
    where: FieldOptionWhereUniqueInput
  }

  /**
   * FieldOption findFirst
   */
  export type FieldOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
    /**
     * Filter, which FieldOption to fetch.
     */
    where?: FieldOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOptions to fetch.
     */
    orderBy?: FieldOptionOrderByWithRelationInput | FieldOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FieldOptions.
     */
    cursor?: FieldOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FieldOptions.
     */
    distinct?: FieldOptionScalarFieldEnum | FieldOptionScalarFieldEnum[]
  }

  /**
   * FieldOption findFirstOrThrow
   */
  export type FieldOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
    /**
     * Filter, which FieldOption to fetch.
     */
    where?: FieldOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOptions to fetch.
     */
    orderBy?: FieldOptionOrderByWithRelationInput | FieldOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FieldOptions.
     */
    cursor?: FieldOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FieldOptions.
     */
    distinct?: FieldOptionScalarFieldEnum | FieldOptionScalarFieldEnum[]
  }

  /**
   * FieldOption findMany
   */
  export type FieldOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
    /**
     * Filter, which FieldOptions to fetch.
     */
    where?: FieldOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOptions to fetch.
     */
    orderBy?: FieldOptionOrderByWithRelationInput | FieldOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FieldOptions.
     */
    cursor?: FieldOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOptions.
     */
    skip?: number
    distinct?: FieldOptionScalarFieldEnum | FieldOptionScalarFieldEnum[]
  }

  /**
   * FieldOption create
   */
  export type FieldOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a FieldOption.
     */
    data: XOR<FieldOptionCreateInput, FieldOptionUncheckedCreateInput>
  }

  /**
   * FieldOption createMany
   */
  export type FieldOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FieldOptions.
     */
    data: FieldOptionCreateManyInput | FieldOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FieldOption createManyAndReturn
   */
  export type FieldOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FieldOptions.
     */
    data: FieldOptionCreateManyInput | FieldOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FieldOption update
   */
  export type FieldOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a FieldOption.
     */
    data: XOR<FieldOptionUpdateInput, FieldOptionUncheckedUpdateInput>
    /**
     * Choose, which FieldOption to update.
     */
    where: FieldOptionWhereUniqueInput
  }

  /**
   * FieldOption updateMany
   */
  export type FieldOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FieldOptions.
     */
    data: XOR<FieldOptionUpdateManyMutationInput, FieldOptionUncheckedUpdateManyInput>
    /**
     * Filter which FieldOptions to update
     */
    where?: FieldOptionWhereInput
  }

  /**
   * FieldOption upsert
   */
  export type FieldOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the FieldOption to update in case it exists.
     */
    where: FieldOptionWhereUniqueInput
    /**
     * In case the FieldOption found by the `where` argument doesn't exist, create a new FieldOption with this data.
     */
    create: XOR<FieldOptionCreateInput, FieldOptionUncheckedCreateInput>
    /**
     * In case the FieldOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FieldOptionUpdateInput, FieldOptionUncheckedUpdateInput>
  }

  /**
   * FieldOption delete
   */
  export type FieldOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
    /**
     * Filter which FieldOption to delete.
     */
    where: FieldOptionWhereUniqueInput
  }

  /**
   * FieldOption deleteMany
   */
  export type FieldOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FieldOptions to delete
     */
    where?: FieldOptionWhereInput
  }

  /**
   * FieldOption without action
   */
  export type FieldOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOption
     */
    select?: FieldOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldOptionInclude<ExtArgs> | null
  }


  /**
   * Model Submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionMinAggregateOutputType = {
    id: string | null
    form_id: string | null
    text: string | null
    created_at: Date | null
  }

  export type SubmissionMaxAggregateOutputType = {
    id: string | null
    form_id: string | null
    text: string | null
    created_at: Date | null
  }

  export type SubmissionCountAggregateOutputType = {
    id: number
    form_id: number
    text: number
    created_at: number
    _all: number
  }


  export type SubmissionMinAggregateInputType = {
    id?: true
    form_id?: true
    text?: true
    created_at?: true
  }

  export type SubmissionMaxAggregateInputType = {
    id?: true
    form_id?: true
    text?: true
    created_at?: true
  }

  export type SubmissionCountAggregateInputType = {
    id?: true
    form_id?: true
    text?: true
    created_at?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submission to aggregate.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type SubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithAggregationInput | SubmissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: SubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    id: string
    form_id: string
    text: string | null
    created_at: Date
    _count: SubmissionCountAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    text?: boolean
    created_at?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    text?: boolean
    created_at?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectScalar = {
    id?: boolean
    form_id?: boolean
    text?: boolean
    created_at?: boolean
  }

  export type SubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }

  export type $SubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submission"
    objects: {
      form: Prisma.$FormPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      form_id: string
      text: string | null
      created_at: Date
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }

  type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = $Result.GetResult<Prisma.$SubmissionPayload, S>

  type SubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface SubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionFindUniqueArgs>(args: SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Submission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionFindFirstArgs>(args?: SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionWithIdOnly = await prisma.submission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionFindManyArgs>(args?: SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Submission.
     * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
     */
    create<T extends SubmissionCreateArgs>(args: SelectSubset<T, SubmissionCreateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Submissions.
     * @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionCreateManyArgs>(args?: SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Submissions and returns the data saved in the database.
     * @param {SubmissionCreateManyAndReturnArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Submission.
     * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
     */
    delete<T extends SubmissionDeleteArgs>(args: SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Submission.
     * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionUpdateArgs>(args: SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Submissions.
     * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionDeleteManyArgs>(args?: SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionUpdateManyArgs>(args: SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Submission.
     * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionUpsertArgs>(args: SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCountArgs>(
      args?: Subset<T, SubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submission model
   */
  readonly fields: SubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends FormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormDefaultArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Submission model
   */ 
  interface SubmissionFieldRefs {
    readonly id: FieldRef<"Submission", 'String'>
    readonly form_id: FieldRef<"Submission", 'String'>
    readonly text: FieldRef<"Submission", 'String'>
    readonly created_at: FieldRef<"Submission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Submission findUnique
   */
  export type SubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findUniqueOrThrow
   */
  export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findFirst
   */
  export type SubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findFirstOrThrow
   */
  export type SubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findMany
   */
  export type SubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submissions to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission create
   */
  export type SubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Submission.
     */
    data: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
  }

  /**
   * Submission createMany
   */
  export type SubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Submission createManyAndReturn
   */
  export type SubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission update
   */
  export type SubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Submission.
     */
    data: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
    /**
     * Choose, which Submission to update.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission updateMany
   */
  export type SubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
  }

  /**
   * Submission upsert
   */
  export type SubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Submission to update in case it exists.
     */
    where: SubmissionWhereUniqueInput
    /**
     * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
     */
    create: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
    /**
     * In case the Submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
  }

  /**
   * Submission delete
   */
  export type SubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter which Submission to delete.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission deleteMany
   */
  export type SubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissions to delete
     */
    where?: SubmissionWhereInput
  }

  /**
   * Submission without action
   */
  export type SubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
  }


  /**
   * Model PublishedForm
   */

  export type AggregatePublishedForm = {
    _count: PublishedFormCountAggregateOutputType | null
    _min: PublishedFormMinAggregateOutputType | null
    _max: PublishedFormMaxAggregateOutputType | null
  }

  export type PublishedFormMinAggregateOutputType = {
    id: string | null
    form_id: string | null
    user_id: string | null
    created_at: Date | null
    last_published_at: Date | null
    encoded_content: string | null
  }

  export type PublishedFormMaxAggregateOutputType = {
    id: string | null
    form_id: string | null
    user_id: string | null
    created_at: Date | null
    last_published_at: Date | null
    encoded_content: string | null
  }

  export type PublishedFormCountAggregateOutputType = {
    id: number
    form_id: number
    user_id: number
    created_at: number
    last_published_at: number
    encoded_content: number
    _all: number
  }


  export type PublishedFormMinAggregateInputType = {
    id?: true
    form_id?: true
    user_id?: true
    created_at?: true
    last_published_at?: true
    encoded_content?: true
  }

  export type PublishedFormMaxAggregateInputType = {
    id?: true
    form_id?: true
    user_id?: true
    created_at?: true
    last_published_at?: true
    encoded_content?: true
  }

  export type PublishedFormCountAggregateInputType = {
    id?: true
    form_id?: true
    user_id?: true
    created_at?: true
    last_published_at?: true
    encoded_content?: true
    _all?: true
  }

  export type PublishedFormAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublishedForm to aggregate.
     */
    where?: PublishedFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedForms to fetch.
     */
    orderBy?: PublishedFormOrderByWithRelationInput | PublishedFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublishedFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PublishedForms
    **/
    _count?: true | PublishedFormCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublishedFormMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublishedFormMaxAggregateInputType
  }

  export type GetPublishedFormAggregateType<T extends PublishedFormAggregateArgs> = {
        [P in keyof T & keyof AggregatePublishedForm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublishedForm[P]>
      : GetScalarType<T[P], AggregatePublishedForm[P]>
  }




  export type PublishedFormGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublishedFormWhereInput
    orderBy?: PublishedFormOrderByWithAggregationInput | PublishedFormOrderByWithAggregationInput[]
    by: PublishedFormScalarFieldEnum[] | PublishedFormScalarFieldEnum
    having?: PublishedFormScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublishedFormCountAggregateInputType | true
    _min?: PublishedFormMinAggregateInputType
    _max?: PublishedFormMaxAggregateInputType
  }

  export type PublishedFormGroupByOutputType = {
    id: string
    form_id: string
    user_id: string
    created_at: Date
    last_published_at: Date | null
    encoded_content: string
    _count: PublishedFormCountAggregateOutputType | null
    _min: PublishedFormMinAggregateOutputType | null
    _max: PublishedFormMaxAggregateOutputType | null
  }

  type GetPublishedFormGroupByPayload<T extends PublishedFormGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublishedFormGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublishedFormGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublishedFormGroupByOutputType[P]>
            : GetScalarType<T[P], PublishedFormGroupByOutputType[P]>
        }
      >
    >


  export type PublishedFormSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    user_id?: boolean
    created_at?: boolean
    last_published_at?: boolean
    encoded_content?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publishedForm"]>

  export type PublishedFormSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    user_id?: boolean
    created_at?: boolean
    last_published_at?: boolean
    encoded_content?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publishedForm"]>

  export type PublishedFormSelectScalar = {
    id?: boolean
    form_id?: boolean
    user_id?: boolean
    created_at?: boolean
    last_published_at?: boolean
    encoded_content?: boolean
  }

  export type PublishedFormInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PublishedFormIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PublishedFormPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PublishedForm"
    objects: {
      form: Prisma.$FormPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      form_id: string
      user_id: string
      created_at: Date
      last_published_at: Date | null
      encoded_content: string
    }, ExtArgs["result"]["publishedForm"]>
    composites: {}
  }

  type PublishedFormGetPayload<S extends boolean | null | undefined | PublishedFormDefaultArgs> = $Result.GetResult<Prisma.$PublishedFormPayload, S>

  type PublishedFormCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PublishedFormFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PublishedFormCountAggregateInputType | true
    }

  export interface PublishedFormDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PublishedForm'], meta: { name: 'PublishedForm' } }
    /**
     * Find zero or one PublishedForm that matches the filter.
     * @param {PublishedFormFindUniqueArgs} args - Arguments to find a PublishedForm
     * @example
     * // Get one PublishedForm
     * const publishedForm = await prisma.publishedForm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PublishedFormFindUniqueArgs>(args: SelectSubset<T, PublishedFormFindUniqueArgs<ExtArgs>>): Prisma__PublishedFormClient<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PublishedForm that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PublishedFormFindUniqueOrThrowArgs} args - Arguments to find a PublishedForm
     * @example
     * // Get one PublishedForm
     * const publishedForm = await prisma.publishedForm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PublishedFormFindUniqueOrThrowArgs>(args: SelectSubset<T, PublishedFormFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PublishedFormClient<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PublishedForm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedFormFindFirstArgs} args - Arguments to find a PublishedForm
     * @example
     * // Get one PublishedForm
     * const publishedForm = await prisma.publishedForm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PublishedFormFindFirstArgs>(args?: SelectSubset<T, PublishedFormFindFirstArgs<ExtArgs>>): Prisma__PublishedFormClient<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PublishedForm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedFormFindFirstOrThrowArgs} args - Arguments to find a PublishedForm
     * @example
     * // Get one PublishedForm
     * const publishedForm = await prisma.publishedForm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PublishedFormFindFirstOrThrowArgs>(args?: SelectSubset<T, PublishedFormFindFirstOrThrowArgs<ExtArgs>>): Prisma__PublishedFormClient<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PublishedForms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedFormFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PublishedForms
     * const publishedForms = await prisma.publishedForm.findMany()
     * 
     * // Get first 10 PublishedForms
     * const publishedForms = await prisma.publishedForm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publishedFormWithIdOnly = await prisma.publishedForm.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PublishedFormFindManyArgs>(args?: SelectSubset<T, PublishedFormFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PublishedForm.
     * @param {PublishedFormCreateArgs} args - Arguments to create a PublishedForm.
     * @example
     * // Create one PublishedForm
     * const PublishedForm = await prisma.publishedForm.create({
     *   data: {
     *     // ... data to create a PublishedForm
     *   }
     * })
     * 
     */
    create<T extends PublishedFormCreateArgs>(args: SelectSubset<T, PublishedFormCreateArgs<ExtArgs>>): Prisma__PublishedFormClient<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PublishedForms.
     * @param {PublishedFormCreateManyArgs} args - Arguments to create many PublishedForms.
     * @example
     * // Create many PublishedForms
     * const publishedForm = await prisma.publishedForm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PublishedFormCreateManyArgs>(args?: SelectSubset<T, PublishedFormCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PublishedForms and returns the data saved in the database.
     * @param {PublishedFormCreateManyAndReturnArgs} args - Arguments to create many PublishedForms.
     * @example
     * // Create many PublishedForms
     * const publishedForm = await prisma.publishedForm.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PublishedForms and only return the `id`
     * const publishedFormWithIdOnly = await prisma.publishedForm.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PublishedFormCreateManyAndReturnArgs>(args?: SelectSubset<T, PublishedFormCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PublishedForm.
     * @param {PublishedFormDeleteArgs} args - Arguments to delete one PublishedForm.
     * @example
     * // Delete one PublishedForm
     * const PublishedForm = await prisma.publishedForm.delete({
     *   where: {
     *     // ... filter to delete one PublishedForm
     *   }
     * })
     * 
     */
    delete<T extends PublishedFormDeleteArgs>(args: SelectSubset<T, PublishedFormDeleteArgs<ExtArgs>>): Prisma__PublishedFormClient<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PublishedForm.
     * @param {PublishedFormUpdateArgs} args - Arguments to update one PublishedForm.
     * @example
     * // Update one PublishedForm
     * const publishedForm = await prisma.publishedForm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PublishedFormUpdateArgs>(args: SelectSubset<T, PublishedFormUpdateArgs<ExtArgs>>): Prisma__PublishedFormClient<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PublishedForms.
     * @param {PublishedFormDeleteManyArgs} args - Arguments to filter PublishedForms to delete.
     * @example
     * // Delete a few PublishedForms
     * const { count } = await prisma.publishedForm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PublishedFormDeleteManyArgs>(args?: SelectSubset<T, PublishedFormDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PublishedForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedFormUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PublishedForms
     * const publishedForm = await prisma.publishedForm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PublishedFormUpdateManyArgs>(args: SelectSubset<T, PublishedFormUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PublishedForm.
     * @param {PublishedFormUpsertArgs} args - Arguments to update or create a PublishedForm.
     * @example
     * // Update or create a PublishedForm
     * const publishedForm = await prisma.publishedForm.upsert({
     *   create: {
     *     // ... data to create a PublishedForm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PublishedForm we want to update
     *   }
     * })
     */
    upsert<T extends PublishedFormUpsertArgs>(args: SelectSubset<T, PublishedFormUpsertArgs<ExtArgs>>): Prisma__PublishedFormClient<$Result.GetResult<Prisma.$PublishedFormPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PublishedForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedFormCountArgs} args - Arguments to filter PublishedForms to count.
     * @example
     * // Count the number of PublishedForms
     * const count = await prisma.publishedForm.count({
     *   where: {
     *     // ... the filter for the PublishedForms we want to count
     *   }
     * })
    **/
    count<T extends PublishedFormCountArgs>(
      args?: Subset<T, PublishedFormCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublishedFormCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PublishedForm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedFormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublishedFormAggregateArgs>(args: Subset<T, PublishedFormAggregateArgs>): Prisma.PrismaPromise<GetPublishedFormAggregateType<T>>

    /**
     * Group by PublishedForm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedFormGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublishedFormGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublishedFormGroupByArgs['orderBy'] }
        : { orderBy?: PublishedFormGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublishedFormGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublishedFormGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PublishedForm model
   */
  readonly fields: PublishedFormFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PublishedForm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublishedFormClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends FormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormDefaultArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PublishedForm model
   */ 
  interface PublishedFormFieldRefs {
    readonly id: FieldRef<"PublishedForm", 'String'>
    readonly form_id: FieldRef<"PublishedForm", 'String'>
    readonly user_id: FieldRef<"PublishedForm", 'String'>
    readonly created_at: FieldRef<"PublishedForm", 'DateTime'>
    readonly last_published_at: FieldRef<"PublishedForm", 'DateTime'>
    readonly encoded_content: FieldRef<"PublishedForm", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PublishedForm findUnique
   */
  export type PublishedFormFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    /**
     * Filter, which PublishedForm to fetch.
     */
    where: PublishedFormWhereUniqueInput
  }

  /**
   * PublishedForm findUniqueOrThrow
   */
  export type PublishedFormFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    /**
     * Filter, which PublishedForm to fetch.
     */
    where: PublishedFormWhereUniqueInput
  }

  /**
   * PublishedForm findFirst
   */
  export type PublishedFormFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    /**
     * Filter, which PublishedForm to fetch.
     */
    where?: PublishedFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedForms to fetch.
     */
    orderBy?: PublishedFormOrderByWithRelationInput | PublishedFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublishedForms.
     */
    cursor?: PublishedFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublishedForms.
     */
    distinct?: PublishedFormScalarFieldEnum | PublishedFormScalarFieldEnum[]
  }

  /**
   * PublishedForm findFirstOrThrow
   */
  export type PublishedFormFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    /**
     * Filter, which PublishedForm to fetch.
     */
    where?: PublishedFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedForms to fetch.
     */
    orderBy?: PublishedFormOrderByWithRelationInput | PublishedFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublishedForms.
     */
    cursor?: PublishedFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublishedForms.
     */
    distinct?: PublishedFormScalarFieldEnum | PublishedFormScalarFieldEnum[]
  }

  /**
   * PublishedForm findMany
   */
  export type PublishedFormFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    /**
     * Filter, which PublishedForms to fetch.
     */
    where?: PublishedFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedForms to fetch.
     */
    orderBy?: PublishedFormOrderByWithRelationInput | PublishedFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PublishedForms.
     */
    cursor?: PublishedFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedForms.
     */
    skip?: number
    distinct?: PublishedFormScalarFieldEnum | PublishedFormScalarFieldEnum[]
  }

  /**
   * PublishedForm create
   */
  export type PublishedFormCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    /**
     * The data needed to create a PublishedForm.
     */
    data: XOR<PublishedFormCreateInput, PublishedFormUncheckedCreateInput>
  }

  /**
   * PublishedForm createMany
   */
  export type PublishedFormCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PublishedForms.
     */
    data: PublishedFormCreateManyInput | PublishedFormCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PublishedForm createManyAndReturn
   */
  export type PublishedFormCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PublishedForms.
     */
    data: PublishedFormCreateManyInput | PublishedFormCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PublishedForm update
   */
  export type PublishedFormUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    /**
     * The data needed to update a PublishedForm.
     */
    data: XOR<PublishedFormUpdateInput, PublishedFormUncheckedUpdateInput>
    /**
     * Choose, which PublishedForm to update.
     */
    where: PublishedFormWhereUniqueInput
  }

  /**
   * PublishedForm updateMany
   */
  export type PublishedFormUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PublishedForms.
     */
    data: XOR<PublishedFormUpdateManyMutationInput, PublishedFormUncheckedUpdateManyInput>
    /**
     * Filter which PublishedForms to update
     */
    where?: PublishedFormWhereInput
  }

  /**
   * PublishedForm upsert
   */
  export type PublishedFormUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    /**
     * The filter to search for the PublishedForm to update in case it exists.
     */
    where: PublishedFormWhereUniqueInput
    /**
     * In case the PublishedForm found by the `where` argument doesn't exist, create a new PublishedForm with this data.
     */
    create: XOR<PublishedFormCreateInput, PublishedFormUncheckedCreateInput>
    /**
     * In case the PublishedForm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublishedFormUpdateInput, PublishedFormUncheckedUpdateInput>
  }

  /**
   * PublishedForm delete
   */
  export type PublishedFormDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
    /**
     * Filter which PublishedForm to delete.
     */
    where: PublishedFormWhereUniqueInput
  }

  /**
   * PublishedForm deleteMany
   */
  export type PublishedFormDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublishedForms to delete
     */
    where?: PublishedFormWhereInput
  }

  /**
   * PublishedForm without action
   */
  export type PublishedFormDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedForm
     */
    select?: PublishedFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedFormInclude<ExtArgs> | null
  }


  /**
   * Model StripeUser
   */

  export type AggregateStripeUser = {
    _count: StripeUserCountAggregateOutputType | null
    _min: StripeUserMinAggregateOutputType | null
    _max: StripeUserMaxAggregateOutputType | null
  }

  export type StripeUserMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    stripe_id: string | null
    created_at: Date | null
    is_active: boolean | null
  }

  export type StripeUserMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    stripe_id: string | null
    created_at: Date | null
    is_active: boolean | null
  }

  export type StripeUserCountAggregateOutputType = {
    id: number
    user_id: number
    stripe_id: number
    created_at: number
    is_active: number
    _all: number
  }


  export type StripeUserMinAggregateInputType = {
    id?: true
    user_id?: true
    stripe_id?: true
    created_at?: true
    is_active?: true
  }

  export type StripeUserMaxAggregateInputType = {
    id?: true
    user_id?: true
    stripe_id?: true
    created_at?: true
    is_active?: true
  }

  export type StripeUserCountAggregateInputType = {
    id?: true
    user_id?: true
    stripe_id?: true
    created_at?: true
    is_active?: true
    _all?: true
  }

  export type StripeUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StripeUser to aggregate.
     */
    where?: StripeUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeUsers to fetch.
     */
    orderBy?: StripeUserOrderByWithRelationInput | StripeUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StripeUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StripeUsers
    **/
    _count?: true | StripeUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StripeUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StripeUserMaxAggregateInputType
  }

  export type GetStripeUserAggregateType<T extends StripeUserAggregateArgs> = {
        [P in keyof T & keyof AggregateStripeUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStripeUser[P]>
      : GetScalarType<T[P], AggregateStripeUser[P]>
  }




  export type StripeUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StripeUserWhereInput
    orderBy?: StripeUserOrderByWithAggregationInput | StripeUserOrderByWithAggregationInput[]
    by: StripeUserScalarFieldEnum[] | StripeUserScalarFieldEnum
    having?: StripeUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StripeUserCountAggregateInputType | true
    _min?: StripeUserMinAggregateInputType
    _max?: StripeUserMaxAggregateInputType
  }

  export type StripeUserGroupByOutputType = {
    id: string
    user_id: string
    stripe_id: string
    created_at: Date
    is_active: boolean
    _count: StripeUserCountAggregateOutputType | null
    _min: StripeUserMinAggregateOutputType | null
    _max: StripeUserMaxAggregateOutputType | null
  }

  type GetStripeUserGroupByPayload<T extends StripeUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StripeUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StripeUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StripeUserGroupByOutputType[P]>
            : GetScalarType<T[P], StripeUserGroupByOutputType[P]>
        }
      >
    >


  export type StripeUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    stripe_id?: boolean
    created_at?: boolean
    is_active?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stripeUser"]>

  export type StripeUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    stripe_id?: boolean
    created_at?: boolean
    is_active?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stripeUser"]>

  export type StripeUserSelectScalar = {
    id?: boolean
    user_id?: boolean
    stripe_id?: boolean
    created_at?: boolean
    is_active?: boolean
  }

  export type StripeUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StripeUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StripeUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StripeUser"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      stripe_id: string
      created_at: Date
      is_active: boolean
    }, ExtArgs["result"]["stripeUser"]>
    composites: {}
  }

  type StripeUserGetPayload<S extends boolean | null | undefined | StripeUserDefaultArgs> = $Result.GetResult<Prisma.$StripeUserPayload, S>

  type StripeUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StripeUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StripeUserCountAggregateInputType | true
    }

  export interface StripeUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StripeUser'], meta: { name: 'StripeUser' } }
    /**
     * Find zero or one StripeUser that matches the filter.
     * @param {StripeUserFindUniqueArgs} args - Arguments to find a StripeUser
     * @example
     * // Get one StripeUser
     * const stripeUser = await prisma.stripeUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StripeUserFindUniqueArgs>(args: SelectSubset<T, StripeUserFindUniqueArgs<ExtArgs>>): Prisma__StripeUserClient<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StripeUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StripeUserFindUniqueOrThrowArgs} args - Arguments to find a StripeUser
     * @example
     * // Get one StripeUser
     * const stripeUser = await prisma.stripeUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StripeUserFindUniqueOrThrowArgs>(args: SelectSubset<T, StripeUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StripeUserClient<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StripeUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeUserFindFirstArgs} args - Arguments to find a StripeUser
     * @example
     * // Get one StripeUser
     * const stripeUser = await prisma.stripeUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StripeUserFindFirstArgs>(args?: SelectSubset<T, StripeUserFindFirstArgs<ExtArgs>>): Prisma__StripeUserClient<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StripeUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeUserFindFirstOrThrowArgs} args - Arguments to find a StripeUser
     * @example
     * // Get one StripeUser
     * const stripeUser = await prisma.stripeUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StripeUserFindFirstOrThrowArgs>(args?: SelectSubset<T, StripeUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__StripeUserClient<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StripeUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StripeUsers
     * const stripeUsers = await prisma.stripeUser.findMany()
     * 
     * // Get first 10 StripeUsers
     * const stripeUsers = await prisma.stripeUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stripeUserWithIdOnly = await prisma.stripeUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StripeUserFindManyArgs>(args?: SelectSubset<T, StripeUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StripeUser.
     * @param {StripeUserCreateArgs} args - Arguments to create a StripeUser.
     * @example
     * // Create one StripeUser
     * const StripeUser = await prisma.stripeUser.create({
     *   data: {
     *     // ... data to create a StripeUser
     *   }
     * })
     * 
     */
    create<T extends StripeUserCreateArgs>(args: SelectSubset<T, StripeUserCreateArgs<ExtArgs>>): Prisma__StripeUserClient<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StripeUsers.
     * @param {StripeUserCreateManyArgs} args - Arguments to create many StripeUsers.
     * @example
     * // Create many StripeUsers
     * const stripeUser = await prisma.stripeUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StripeUserCreateManyArgs>(args?: SelectSubset<T, StripeUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StripeUsers and returns the data saved in the database.
     * @param {StripeUserCreateManyAndReturnArgs} args - Arguments to create many StripeUsers.
     * @example
     * // Create many StripeUsers
     * const stripeUser = await prisma.stripeUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StripeUsers and only return the `id`
     * const stripeUserWithIdOnly = await prisma.stripeUser.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StripeUserCreateManyAndReturnArgs>(args?: SelectSubset<T, StripeUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StripeUser.
     * @param {StripeUserDeleteArgs} args - Arguments to delete one StripeUser.
     * @example
     * // Delete one StripeUser
     * const StripeUser = await prisma.stripeUser.delete({
     *   where: {
     *     // ... filter to delete one StripeUser
     *   }
     * })
     * 
     */
    delete<T extends StripeUserDeleteArgs>(args: SelectSubset<T, StripeUserDeleteArgs<ExtArgs>>): Prisma__StripeUserClient<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StripeUser.
     * @param {StripeUserUpdateArgs} args - Arguments to update one StripeUser.
     * @example
     * // Update one StripeUser
     * const stripeUser = await prisma.stripeUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StripeUserUpdateArgs>(args: SelectSubset<T, StripeUserUpdateArgs<ExtArgs>>): Prisma__StripeUserClient<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StripeUsers.
     * @param {StripeUserDeleteManyArgs} args - Arguments to filter StripeUsers to delete.
     * @example
     * // Delete a few StripeUsers
     * const { count } = await prisma.stripeUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StripeUserDeleteManyArgs>(args?: SelectSubset<T, StripeUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StripeUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StripeUsers
     * const stripeUser = await prisma.stripeUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StripeUserUpdateManyArgs>(args: SelectSubset<T, StripeUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StripeUser.
     * @param {StripeUserUpsertArgs} args - Arguments to update or create a StripeUser.
     * @example
     * // Update or create a StripeUser
     * const stripeUser = await prisma.stripeUser.upsert({
     *   create: {
     *     // ... data to create a StripeUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StripeUser we want to update
     *   }
     * })
     */
    upsert<T extends StripeUserUpsertArgs>(args: SelectSubset<T, StripeUserUpsertArgs<ExtArgs>>): Prisma__StripeUserClient<$Result.GetResult<Prisma.$StripeUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StripeUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeUserCountArgs} args - Arguments to filter StripeUsers to count.
     * @example
     * // Count the number of StripeUsers
     * const count = await prisma.stripeUser.count({
     *   where: {
     *     // ... the filter for the StripeUsers we want to count
     *   }
     * })
    **/
    count<T extends StripeUserCountArgs>(
      args?: Subset<T, StripeUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StripeUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StripeUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StripeUserAggregateArgs>(args: Subset<T, StripeUserAggregateArgs>): Prisma.PrismaPromise<GetStripeUserAggregateType<T>>

    /**
     * Group by StripeUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StripeUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StripeUserGroupByArgs['orderBy'] }
        : { orderBy?: StripeUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StripeUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStripeUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StripeUser model
   */
  readonly fields: StripeUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StripeUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StripeUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StripeUser model
   */ 
  interface StripeUserFieldRefs {
    readonly id: FieldRef<"StripeUser", 'String'>
    readonly user_id: FieldRef<"StripeUser", 'String'>
    readonly stripe_id: FieldRef<"StripeUser", 'String'>
    readonly created_at: FieldRef<"StripeUser", 'DateTime'>
    readonly is_active: FieldRef<"StripeUser", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * StripeUser findUnique
   */
  export type StripeUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
    /**
     * Filter, which StripeUser to fetch.
     */
    where: StripeUserWhereUniqueInput
  }

  /**
   * StripeUser findUniqueOrThrow
   */
  export type StripeUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
    /**
     * Filter, which StripeUser to fetch.
     */
    where: StripeUserWhereUniqueInput
  }

  /**
   * StripeUser findFirst
   */
  export type StripeUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
    /**
     * Filter, which StripeUser to fetch.
     */
    where?: StripeUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeUsers to fetch.
     */
    orderBy?: StripeUserOrderByWithRelationInput | StripeUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StripeUsers.
     */
    cursor?: StripeUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StripeUsers.
     */
    distinct?: StripeUserScalarFieldEnum | StripeUserScalarFieldEnum[]
  }

  /**
   * StripeUser findFirstOrThrow
   */
  export type StripeUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
    /**
     * Filter, which StripeUser to fetch.
     */
    where?: StripeUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeUsers to fetch.
     */
    orderBy?: StripeUserOrderByWithRelationInput | StripeUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StripeUsers.
     */
    cursor?: StripeUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StripeUsers.
     */
    distinct?: StripeUserScalarFieldEnum | StripeUserScalarFieldEnum[]
  }

  /**
   * StripeUser findMany
   */
  export type StripeUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
    /**
     * Filter, which StripeUsers to fetch.
     */
    where?: StripeUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StripeUsers to fetch.
     */
    orderBy?: StripeUserOrderByWithRelationInput | StripeUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StripeUsers.
     */
    cursor?: StripeUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StripeUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StripeUsers.
     */
    skip?: number
    distinct?: StripeUserScalarFieldEnum | StripeUserScalarFieldEnum[]
  }

  /**
   * StripeUser create
   */
  export type StripeUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
    /**
     * The data needed to create a StripeUser.
     */
    data: XOR<StripeUserCreateInput, StripeUserUncheckedCreateInput>
  }

  /**
   * StripeUser createMany
   */
  export type StripeUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StripeUsers.
     */
    data: StripeUserCreateManyInput | StripeUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StripeUser createManyAndReturn
   */
  export type StripeUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StripeUsers.
     */
    data: StripeUserCreateManyInput | StripeUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StripeUser update
   */
  export type StripeUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
    /**
     * The data needed to update a StripeUser.
     */
    data: XOR<StripeUserUpdateInput, StripeUserUncheckedUpdateInput>
    /**
     * Choose, which StripeUser to update.
     */
    where: StripeUserWhereUniqueInput
  }

  /**
   * StripeUser updateMany
   */
  export type StripeUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StripeUsers.
     */
    data: XOR<StripeUserUpdateManyMutationInput, StripeUserUncheckedUpdateManyInput>
    /**
     * Filter which StripeUsers to update
     */
    where?: StripeUserWhereInput
  }

  /**
   * StripeUser upsert
   */
  export type StripeUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
    /**
     * The filter to search for the StripeUser to update in case it exists.
     */
    where: StripeUserWhereUniqueInput
    /**
     * In case the StripeUser found by the `where` argument doesn't exist, create a new StripeUser with this data.
     */
    create: XOR<StripeUserCreateInput, StripeUserUncheckedCreateInput>
    /**
     * In case the StripeUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StripeUserUpdateInput, StripeUserUncheckedUpdateInput>
  }

  /**
   * StripeUser delete
   */
  export type StripeUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
    /**
     * Filter which StripeUser to delete.
     */
    where: StripeUserWhereUniqueInput
  }

  /**
   * StripeUser deleteMany
   */
  export type StripeUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StripeUsers to delete
     */
    where?: StripeUserWhereInput
  }

  /**
   * StripeUser without action
   */
  export type StripeUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeUser
     */
    select?: StripeUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeUserInclude<ExtArgs> | null
  }


  /**
   * Model PromptFile
   */

  export type AggregatePromptFile = {
    _count: PromptFileCountAggregateOutputType | null
    _min: PromptFileMinAggregateOutputType | null
    _max: PromptFileMaxAggregateOutputType | null
  }

  export type PromptFileMinAggregateOutputType = {
    id: string | null
    form_id: string | null
    created_at: Date | null
    title: string | null
    extracted_text: string | null
    base64_content: string | null
    url: string | null
  }

  export type PromptFileMaxAggregateOutputType = {
    id: string | null
    form_id: string | null
    created_at: Date | null
    title: string | null
    extracted_text: string | null
    base64_content: string | null
    url: string | null
  }

  export type PromptFileCountAggregateOutputType = {
    id: number
    form_id: number
    created_at: number
    title: number
    extracted_text: number
    base64_content: number
    url: number
    _all: number
  }


  export type PromptFileMinAggregateInputType = {
    id?: true
    form_id?: true
    created_at?: true
    title?: true
    extracted_text?: true
    base64_content?: true
    url?: true
  }

  export type PromptFileMaxAggregateInputType = {
    id?: true
    form_id?: true
    created_at?: true
    title?: true
    extracted_text?: true
    base64_content?: true
    url?: true
  }

  export type PromptFileCountAggregateInputType = {
    id?: true
    form_id?: true
    created_at?: true
    title?: true
    extracted_text?: true
    base64_content?: true
    url?: true
    _all?: true
  }

  export type PromptFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromptFile to aggregate.
     */
    where?: PromptFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptFiles to fetch.
     */
    orderBy?: PromptFileOrderByWithRelationInput | PromptFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromptFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PromptFiles
    **/
    _count?: true | PromptFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromptFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromptFileMaxAggregateInputType
  }

  export type GetPromptFileAggregateType<T extends PromptFileAggregateArgs> = {
        [P in keyof T & keyof AggregatePromptFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromptFile[P]>
      : GetScalarType<T[P], AggregatePromptFile[P]>
  }




  export type PromptFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromptFileWhereInput
    orderBy?: PromptFileOrderByWithAggregationInput | PromptFileOrderByWithAggregationInput[]
    by: PromptFileScalarFieldEnum[] | PromptFileScalarFieldEnum
    having?: PromptFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromptFileCountAggregateInputType | true
    _min?: PromptFileMinAggregateInputType
    _max?: PromptFileMaxAggregateInputType
  }

  export type PromptFileGroupByOutputType = {
    id: string
    form_id: string
    created_at: Date
    title: string
    extracted_text: string
    base64_content: string | null
    url: string | null
    _count: PromptFileCountAggregateOutputType | null
    _min: PromptFileMinAggregateOutputType | null
    _max: PromptFileMaxAggregateOutputType | null
  }

  type GetPromptFileGroupByPayload<T extends PromptFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromptFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromptFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromptFileGroupByOutputType[P]>
            : GetScalarType<T[P], PromptFileGroupByOutputType[P]>
        }
      >
    >


  export type PromptFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    created_at?: boolean
    title?: boolean
    extracted_text?: boolean
    base64_content?: boolean
    url?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promptFile"]>

  export type PromptFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    created_at?: boolean
    title?: boolean
    extracted_text?: boolean
    base64_content?: boolean
    url?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promptFile"]>

  export type PromptFileSelectScalar = {
    id?: boolean
    form_id?: boolean
    created_at?: boolean
    title?: boolean
    extracted_text?: boolean
    base64_content?: boolean
    url?: boolean
  }

  export type PromptFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }
  export type PromptFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }

  export type $PromptFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PromptFile"
    objects: {
      form: Prisma.$FormPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      form_id: string
      created_at: Date
      title: string
      extracted_text: string
      base64_content: string | null
      url: string | null
    }, ExtArgs["result"]["promptFile"]>
    composites: {}
  }

  type PromptFileGetPayload<S extends boolean | null | undefined | PromptFileDefaultArgs> = $Result.GetResult<Prisma.$PromptFilePayload, S>

  type PromptFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PromptFileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PromptFileCountAggregateInputType | true
    }

  export interface PromptFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PromptFile'], meta: { name: 'PromptFile' } }
    /**
     * Find zero or one PromptFile that matches the filter.
     * @param {PromptFileFindUniqueArgs} args - Arguments to find a PromptFile
     * @example
     * // Get one PromptFile
     * const promptFile = await prisma.promptFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromptFileFindUniqueArgs>(args: SelectSubset<T, PromptFileFindUniqueArgs<ExtArgs>>): Prisma__PromptFileClient<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PromptFile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PromptFileFindUniqueOrThrowArgs} args - Arguments to find a PromptFile
     * @example
     * // Get one PromptFile
     * const promptFile = await prisma.promptFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromptFileFindUniqueOrThrowArgs>(args: SelectSubset<T, PromptFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromptFileClient<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PromptFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFileFindFirstArgs} args - Arguments to find a PromptFile
     * @example
     * // Get one PromptFile
     * const promptFile = await prisma.promptFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromptFileFindFirstArgs>(args?: SelectSubset<T, PromptFileFindFirstArgs<ExtArgs>>): Prisma__PromptFileClient<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PromptFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFileFindFirstOrThrowArgs} args - Arguments to find a PromptFile
     * @example
     * // Get one PromptFile
     * const promptFile = await prisma.promptFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromptFileFindFirstOrThrowArgs>(args?: SelectSubset<T, PromptFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromptFileClient<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PromptFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PromptFiles
     * const promptFiles = await prisma.promptFile.findMany()
     * 
     * // Get first 10 PromptFiles
     * const promptFiles = await prisma.promptFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promptFileWithIdOnly = await prisma.promptFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromptFileFindManyArgs>(args?: SelectSubset<T, PromptFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PromptFile.
     * @param {PromptFileCreateArgs} args - Arguments to create a PromptFile.
     * @example
     * // Create one PromptFile
     * const PromptFile = await prisma.promptFile.create({
     *   data: {
     *     // ... data to create a PromptFile
     *   }
     * })
     * 
     */
    create<T extends PromptFileCreateArgs>(args: SelectSubset<T, PromptFileCreateArgs<ExtArgs>>): Prisma__PromptFileClient<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PromptFiles.
     * @param {PromptFileCreateManyArgs} args - Arguments to create many PromptFiles.
     * @example
     * // Create many PromptFiles
     * const promptFile = await prisma.promptFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromptFileCreateManyArgs>(args?: SelectSubset<T, PromptFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PromptFiles and returns the data saved in the database.
     * @param {PromptFileCreateManyAndReturnArgs} args - Arguments to create many PromptFiles.
     * @example
     * // Create many PromptFiles
     * const promptFile = await prisma.promptFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PromptFiles and only return the `id`
     * const promptFileWithIdOnly = await prisma.promptFile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PromptFileCreateManyAndReturnArgs>(args?: SelectSubset<T, PromptFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PromptFile.
     * @param {PromptFileDeleteArgs} args - Arguments to delete one PromptFile.
     * @example
     * // Delete one PromptFile
     * const PromptFile = await prisma.promptFile.delete({
     *   where: {
     *     // ... filter to delete one PromptFile
     *   }
     * })
     * 
     */
    delete<T extends PromptFileDeleteArgs>(args: SelectSubset<T, PromptFileDeleteArgs<ExtArgs>>): Prisma__PromptFileClient<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PromptFile.
     * @param {PromptFileUpdateArgs} args - Arguments to update one PromptFile.
     * @example
     * // Update one PromptFile
     * const promptFile = await prisma.promptFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromptFileUpdateArgs>(args: SelectSubset<T, PromptFileUpdateArgs<ExtArgs>>): Prisma__PromptFileClient<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PromptFiles.
     * @param {PromptFileDeleteManyArgs} args - Arguments to filter PromptFiles to delete.
     * @example
     * // Delete a few PromptFiles
     * const { count } = await prisma.promptFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromptFileDeleteManyArgs>(args?: SelectSubset<T, PromptFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromptFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PromptFiles
     * const promptFile = await prisma.promptFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromptFileUpdateManyArgs>(args: SelectSubset<T, PromptFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PromptFile.
     * @param {PromptFileUpsertArgs} args - Arguments to update or create a PromptFile.
     * @example
     * // Update or create a PromptFile
     * const promptFile = await prisma.promptFile.upsert({
     *   create: {
     *     // ... data to create a PromptFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PromptFile we want to update
     *   }
     * })
     */
    upsert<T extends PromptFileUpsertArgs>(args: SelectSubset<T, PromptFileUpsertArgs<ExtArgs>>): Prisma__PromptFileClient<$Result.GetResult<Prisma.$PromptFilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PromptFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFileCountArgs} args - Arguments to filter PromptFiles to count.
     * @example
     * // Count the number of PromptFiles
     * const count = await prisma.promptFile.count({
     *   where: {
     *     // ... the filter for the PromptFiles we want to count
     *   }
     * })
    **/
    count<T extends PromptFileCountArgs>(
      args?: Subset<T, PromptFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromptFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PromptFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromptFileAggregateArgs>(args: Subset<T, PromptFileAggregateArgs>): Prisma.PrismaPromise<GetPromptFileAggregateType<T>>

    /**
     * Group by PromptFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromptFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromptFileGroupByArgs['orderBy'] }
        : { orderBy?: PromptFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromptFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromptFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PromptFile model
   */
  readonly fields: PromptFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PromptFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromptFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends FormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormDefaultArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PromptFile model
   */ 
  interface PromptFileFieldRefs {
    readonly id: FieldRef<"PromptFile", 'String'>
    readonly form_id: FieldRef<"PromptFile", 'String'>
    readonly created_at: FieldRef<"PromptFile", 'DateTime'>
    readonly title: FieldRef<"PromptFile", 'String'>
    readonly extracted_text: FieldRef<"PromptFile", 'String'>
    readonly base64_content: FieldRef<"PromptFile", 'String'>
    readonly url: FieldRef<"PromptFile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PromptFile findUnique
   */
  export type PromptFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
    /**
     * Filter, which PromptFile to fetch.
     */
    where: PromptFileWhereUniqueInput
  }

  /**
   * PromptFile findUniqueOrThrow
   */
  export type PromptFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
    /**
     * Filter, which PromptFile to fetch.
     */
    where: PromptFileWhereUniqueInput
  }

  /**
   * PromptFile findFirst
   */
  export type PromptFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
    /**
     * Filter, which PromptFile to fetch.
     */
    where?: PromptFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptFiles to fetch.
     */
    orderBy?: PromptFileOrderByWithRelationInput | PromptFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromptFiles.
     */
    cursor?: PromptFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromptFiles.
     */
    distinct?: PromptFileScalarFieldEnum | PromptFileScalarFieldEnum[]
  }

  /**
   * PromptFile findFirstOrThrow
   */
  export type PromptFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
    /**
     * Filter, which PromptFile to fetch.
     */
    where?: PromptFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptFiles to fetch.
     */
    orderBy?: PromptFileOrderByWithRelationInput | PromptFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromptFiles.
     */
    cursor?: PromptFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromptFiles.
     */
    distinct?: PromptFileScalarFieldEnum | PromptFileScalarFieldEnum[]
  }

  /**
   * PromptFile findMany
   */
  export type PromptFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
    /**
     * Filter, which PromptFiles to fetch.
     */
    where?: PromptFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptFiles to fetch.
     */
    orderBy?: PromptFileOrderByWithRelationInput | PromptFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PromptFiles.
     */
    cursor?: PromptFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptFiles.
     */
    skip?: number
    distinct?: PromptFileScalarFieldEnum | PromptFileScalarFieldEnum[]
  }

  /**
   * PromptFile create
   */
  export type PromptFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
    /**
     * The data needed to create a PromptFile.
     */
    data: XOR<PromptFileCreateInput, PromptFileUncheckedCreateInput>
  }

  /**
   * PromptFile createMany
   */
  export type PromptFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PromptFiles.
     */
    data: PromptFileCreateManyInput | PromptFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PromptFile createManyAndReturn
   */
  export type PromptFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PromptFiles.
     */
    data: PromptFileCreateManyInput | PromptFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PromptFile update
   */
  export type PromptFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
    /**
     * The data needed to update a PromptFile.
     */
    data: XOR<PromptFileUpdateInput, PromptFileUncheckedUpdateInput>
    /**
     * Choose, which PromptFile to update.
     */
    where: PromptFileWhereUniqueInput
  }

  /**
   * PromptFile updateMany
   */
  export type PromptFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PromptFiles.
     */
    data: XOR<PromptFileUpdateManyMutationInput, PromptFileUncheckedUpdateManyInput>
    /**
     * Filter which PromptFiles to update
     */
    where?: PromptFileWhereInput
  }

  /**
   * PromptFile upsert
   */
  export type PromptFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
    /**
     * The filter to search for the PromptFile to update in case it exists.
     */
    where: PromptFileWhereUniqueInput
    /**
     * In case the PromptFile found by the `where` argument doesn't exist, create a new PromptFile with this data.
     */
    create: XOR<PromptFileCreateInput, PromptFileUncheckedCreateInput>
    /**
     * In case the PromptFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromptFileUpdateInput, PromptFileUncheckedUpdateInput>
  }

  /**
   * PromptFile delete
   */
  export type PromptFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
    /**
     * Filter which PromptFile to delete.
     */
    where: PromptFileWhereUniqueInput
  }

  /**
   * PromptFile deleteMany
   */
  export type PromptFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromptFiles to delete
     */
    where?: PromptFileWhereInput
  }

  /**
   * PromptFile without action
   */
  export type PromptFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptFile
     */
    select?: PromptFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptFileInclude<ExtArgs> | null
  }


  /**
   * Model Webhook
   */

  export type AggregateWebhook = {
    _count: WebhookCountAggregateOutputType | null
    _min: WebhookMinAggregateOutputType | null
    _max: WebhookMaxAggregateOutputType | null
  }

  export type WebhookMinAggregateOutputType = {
    id: string | null
    form_id: string | null
    url: string | null
    method: string | null
    api_key: string | null
    api_key_header: string | null
    created_at: Date | null
  }

  export type WebhookMaxAggregateOutputType = {
    id: string | null
    form_id: string | null
    url: string | null
    method: string | null
    api_key: string | null
    api_key_header: string | null
    created_at: Date | null
  }

  export type WebhookCountAggregateOutputType = {
    id: number
    form_id: number
    url: number
    method: number
    api_key: number
    api_key_header: number
    created_at: number
    _all: number
  }


  export type WebhookMinAggregateInputType = {
    id?: true
    form_id?: true
    url?: true
    method?: true
    api_key?: true
    api_key_header?: true
    created_at?: true
  }

  export type WebhookMaxAggregateInputType = {
    id?: true
    form_id?: true
    url?: true
    method?: true
    api_key?: true
    api_key_header?: true
    created_at?: true
  }

  export type WebhookCountAggregateInputType = {
    id?: true
    form_id?: true
    url?: true
    method?: true
    api_key?: true
    api_key_header?: true
    created_at?: true
    _all?: true
  }

  export type WebhookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Webhook to aggregate.
     */
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     */
    orderBy?: WebhookOrderByWithRelationInput | WebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Webhooks
    **/
    _count?: true | WebhookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebhookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebhookMaxAggregateInputType
  }

  export type GetWebhookAggregateType<T extends WebhookAggregateArgs> = {
        [P in keyof T & keyof AggregateWebhook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebhook[P]>
      : GetScalarType<T[P], AggregateWebhook[P]>
  }




  export type WebhookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookWhereInput
    orderBy?: WebhookOrderByWithAggregationInput | WebhookOrderByWithAggregationInput[]
    by: WebhookScalarFieldEnum[] | WebhookScalarFieldEnum
    having?: WebhookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebhookCountAggregateInputType | true
    _min?: WebhookMinAggregateInputType
    _max?: WebhookMaxAggregateInputType
  }

  export type WebhookGroupByOutputType = {
    id: string
    form_id: string
    url: string
    method: string | null
    api_key: string | null
    api_key_header: string | null
    created_at: Date
    _count: WebhookCountAggregateOutputType | null
    _min: WebhookMinAggregateOutputType | null
    _max: WebhookMaxAggregateOutputType | null
  }

  type GetWebhookGroupByPayload<T extends WebhookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebhookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebhookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebhookGroupByOutputType[P]>
            : GetScalarType<T[P], WebhookGroupByOutputType[P]>
        }
      >
    >


  export type WebhookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    url?: boolean
    method?: boolean
    api_key?: boolean
    api_key_header?: boolean
    created_at?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webhook"]>

  export type WebhookSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    url?: boolean
    method?: boolean
    api_key?: boolean
    api_key_header?: boolean
    created_at?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webhook"]>

  export type WebhookSelectScalar = {
    id?: boolean
    form_id?: boolean
    url?: boolean
    method?: boolean
    api_key?: boolean
    api_key_header?: boolean
    created_at?: boolean
  }

  export type WebhookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }
  export type WebhookIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }

  export type $WebhookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Webhook"
    objects: {
      form: Prisma.$FormPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      form_id: string
      url: string
      method: string | null
      api_key: string | null
      api_key_header: string | null
      created_at: Date
    }, ExtArgs["result"]["webhook"]>
    composites: {}
  }

  type WebhookGetPayload<S extends boolean | null | undefined | WebhookDefaultArgs> = $Result.GetResult<Prisma.$WebhookPayload, S>

  type WebhookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WebhookFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WebhookCountAggregateInputType | true
    }

  export interface WebhookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Webhook'], meta: { name: 'Webhook' } }
    /**
     * Find zero or one Webhook that matches the filter.
     * @param {WebhookFindUniqueArgs} args - Arguments to find a Webhook
     * @example
     * // Get one Webhook
     * const webhook = await prisma.webhook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebhookFindUniqueArgs>(args: SelectSubset<T, WebhookFindUniqueArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Webhook that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WebhookFindUniqueOrThrowArgs} args - Arguments to find a Webhook
     * @example
     * // Get one Webhook
     * const webhook = await prisma.webhook.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebhookFindUniqueOrThrowArgs>(args: SelectSubset<T, WebhookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Webhook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookFindFirstArgs} args - Arguments to find a Webhook
     * @example
     * // Get one Webhook
     * const webhook = await prisma.webhook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebhookFindFirstArgs>(args?: SelectSubset<T, WebhookFindFirstArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Webhook that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookFindFirstOrThrowArgs} args - Arguments to find a Webhook
     * @example
     * // Get one Webhook
     * const webhook = await prisma.webhook.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebhookFindFirstOrThrowArgs>(args?: SelectSubset<T, WebhookFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Webhooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Webhooks
     * const webhooks = await prisma.webhook.findMany()
     * 
     * // Get first 10 Webhooks
     * const webhooks = await prisma.webhook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webhookWithIdOnly = await prisma.webhook.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebhookFindManyArgs>(args?: SelectSubset<T, WebhookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Webhook.
     * @param {WebhookCreateArgs} args - Arguments to create a Webhook.
     * @example
     * // Create one Webhook
     * const Webhook = await prisma.webhook.create({
     *   data: {
     *     // ... data to create a Webhook
     *   }
     * })
     * 
     */
    create<T extends WebhookCreateArgs>(args: SelectSubset<T, WebhookCreateArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Webhooks.
     * @param {WebhookCreateManyArgs} args - Arguments to create many Webhooks.
     * @example
     * // Create many Webhooks
     * const webhook = await prisma.webhook.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebhookCreateManyArgs>(args?: SelectSubset<T, WebhookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Webhooks and returns the data saved in the database.
     * @param {WebhookCreateManyAndReturnArgs} args - Arguments to create many Webhooks.
     * @example
     * // Create many Webhooks
     * const webhook = await prisma.webhook.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Webhooks and only return the `id`
     * const webhookWithIdOnly = await prisma.webhook.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebhookCreateManyAndReturnArgs>(args?: SelectSubset<T, WebhookCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Webhook.
     * @param {WebhookDeleteArgs} args - Arguments to delete one Webhook.
     * @example
     * // Delete one Webhook
     * const Webhook = await prisma.webhook.delete({
     *   where: {
     *     // ... filter to delete one Webhook
     *   }
     * })
     * 
     */
    delete<T extends WebhookDeleteArgs>(args: SelectSubset<T, WebhookDeleteArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Webhook.
     * @param {WebhookUpdateArgs} args - Arguments to update one Webhook.
     * @example
     * // Update one Webhook
     * const webhook = await prisma.webhook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebhookUpdateArgs>(args: SelectSubset<T, WebhookUpdateArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Webhooks.
     * @param {WebhookDeleteManyArgs} args - Arguments to filter Webhooks to delete.
     * @example
     * // Delete a few Webhooks
     * const { count } = await prisma.webhook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebhookDeleteManyArgs>(args?: SelectSubset<T, WebhookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Webhooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Webhooks
     * const webhook = await prisma.webhook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebhookUpdateManyArgs>(args: SelectSubset<T, WebhookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Webhook.
     * @param {WebhookUpsertArgs} args - Arguments to update or create a Webhook.
     * @example
     * // Update or create a Webhook
     * const webhook = await prisma.webhook.upsert({
     *   create: {
     *     // ... data to create a Webhook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Webhook we want to update
     *   }
     * })
     */
    upsert<T extends WebhookUpsertArgs>(args: SelectSubset<T, WebhookUpsertArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Webhooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookCountArgs} args - Arguments to filter Webhooks to count.
     * @example
     * // Count the number of Webhooks
     * const count = await prisma.webhook.count({
     *   where: {
     *     // ... the filter for the Webhooks we want to count
     *   }
     * })
    **/
    count<T extends WebhookCountArgs>(
      args?: Subset<T, WebhookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebhookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Webhook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebhookAggregateArgs>(args: Subset<T, WebhookAggregateArgs>): Prisma.PrismaPromise<GetWebhookAggregateType<T>>

    /**
     * Group by Webhook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebhookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebhookGroupByArgs['orderBy'] }
        : { orderBy?: WebhookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebhookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Webhook model
   */
  readonly fields: WebhookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Webhook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebhookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends FormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormDefaultArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Webhook model
   */ 
  interface WebhookFieldRefs {
    readonly id: FieldRef<"Webhook", 'String'>
    readonly form_id: FieldRef<"Webhook", 'String'>
    readonly url: FieldRef<"Webhook", 'String'>
    readonly method: FieldRef<"Webhook", 'String'>
    readonly api_key: FieldRef<"Webhook", 'String'>
    readonly api_key_header: FieldRef<"Webhook", 'String'>
    readonly created_at: FieldRef<"Webhook", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Webhook findUnique
   */
  export type WebhookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter, which Webhook to fetch.
     */
    where: WebhookWhereUniqueInput
  }

  /**
   * Webhook findUniqueOrThrow
   */
  export type WebhookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter, which Webhook to fetch.
     */
    where: WebhookWhereUniqueInput
  }

  /**
   * Webhook findFirst
   */
  export type WebhookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter, which Webhook to fetch.
     */
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     */
    orderBy?: WebhookOrderByWithRelationInput | WebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Webhooks.
     */
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Webhooks.
     */
    distinct?: WebhookScalarFieldEnum | WebhookScalarFieldEnum[]
  }

  /**
   * Webhook findFirstOrThrow
   */
  export type WebhookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter, which Webhook to fetch.
     */
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     */
    orderBy?: WebhookOrderByWithRelationInput | WebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Webhooks.
     */
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Webhooks.
     */
    distinct?: WebhookScalarFieldEnum | WebhookScalarFieldEnum[]
  }

  /**
   * Webhook findMany
   */
  export type WebhookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter, which Webhooks to fetch.
     */
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     */
    orderBy?: WebhookOrderByWithRelationInput | WebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Webhooks.
     */
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     */
    skip?: number
    distinct?: WebhookScalarFieldEnum | WebhookScalarFieldEnum[]
  }

  /**
   * Webhook create
   */
  export type WebhookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * The data needed to create a Webhook.
     */
    data: XOR<WebhookCreateInput, WebhookUncheckedCreateInput>
  }

  /**
   * Webhook createMany
   */
  export type WebhookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Webhooks.
     */
    data: WebhookCreateManyInput | WebhookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Webhook createManyAndReturn
   */
  export type WebhookCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Webhooks.
     */
    data: WebhookCreateManyInput | WebhookCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Webhook update
   */
  export type WebhookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * The data needed to update a Webhook.
     */
    data: XOR<WebhookUpdateInput, WebhookUncheckedUpdateInput>
    /**
     * Choose, which Webhook to update.
     */
    where: WebhookWhereUniqueInput
  }

  /**
   * Webhook updateMany
   */
  export type WebhookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Webhooks.
     */
    data: XOR<WebhookUpdateManyMutationInput, WebhookUncheckedUpdateManyInput>
    /**
     * Filter which Webhooks to update
     */
    where?: WebhookWhereInput
  }

  /**
   * Webhook upsert
   */
  export type WebhookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * The filter to search for the Webhook to update in case it exists.
     */
    where: WebhookWhereUniqueInput
    /**
     * In case the Webhook found by the `where` argument doesn't exist, create a new Webhook with this data.
     */
    create: XOR<WebhookCreateInput, WebhookUncheckedCreateInput>
    /**
     * In case the Webhook was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebhookUpdateInput, WebhookUncheckedUpdateInput>
  }

  /**
   * Webhook delete
   */
  export type WebhookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter which Webhook to delete.
     */
    where: WebhookWhereUniqueInput
  }

  /**
   * Webhook deleteMany
   */
  export type WebhookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Webhooks to delete
     */
    where?: WebhookWhereInput
  }

  /**
   * Webhook without action
   */
  export type WebhookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
  }


  /**
   * Model FigCollection
   */

  export type AggregateFigCollection = {
    _count: FigCollectionCountAggregateOutputType | null
    _min: FigCollectionMinAggregateOutputType | null
    _max: FigCollectionMaxAggregateOutputType | null
  }

  export type FigCollectionMinAggregateOutputType = {
    id: string | null
    name: string | null
    prompt: string | null
    created_at: Date | null
    user_id: string | null
    fig_collection_file_id: string | null
  }

  export type FigCollectionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    prompt: string | null
    created_at: Date | null
    user_id: string | null
    fig_collection_file_id: string | null
  }

  export type FigCollectionCountAggregateOutputType = {
    id: number
    name: number
    prompt: number
    created_at: number
    user_id: number
    fig_collection_file_id: number
    _all: number
  }


  export type FigCollectionMinAggregateInputType = {
    id?: true
    name?: true
    prompt?: true
    created_at?: true
    user_id?: true
    fig_collection_file_id?: true
  }

  export type FigCollectionMaxAggregateInputType = {
    id?: true
    name?: true
    prompt?: true
    created_at?: true
    user_id?: true
    fig_collection_file_id?: true
  }

  export type FigCollectionCountAggregateInputType = {
    id?: true
    name?: true
    prompt?: true
    created_at?: true
    user_id?: true
    fig_collection_file_id?: true
    _all?: true
  }

  export type FigCollectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FigCollection to aggregate.
     */
    where?: FigCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FigCollections to fetch.
     */
    orderBy?: FigCollectionOrderByWithRelationInput | FigCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FigCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FigCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FigCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FigCollections
    **/
    _count?: true | FigCollectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FigCollectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FigCollectionMaxAggregateInputType
  }

  export type GetFigCollectionAggregateType<T extends FigCollectionAggregateArgs> = {
        [P in keyof T & keyof AggregateFigCollection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFigCollection[P]>
      : GetScalarType<T[P], AggregateFigCollection[P]>
  }




  export type FigCollectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FigCollectionWhereInput
    orderBy?: FigCollectionOrderByWithAggregationInput | FigCollectionOrderByWithAggregationInput[]
    by: FigCollectionScalarFieldEnum[] | FigCollectionScalarFieldEnum
    having?: FigCollectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FigCollectionCountAggregateInputType | true
    _min?: FigCollectionMinAggregateInputType
    _max?: FigCollectionMaxAggregateInputType
  }

  export type FigCollectionGroupByOutputType = {
    id: string
    name: string
    prompt: string | null
    created_at: Date
    user_id: string
    fig_collection_file_id: string | null
    _count: FigCollectionCountAggregateOutputType | null
    _min: FigCollectionMinAggregateOutputType | null
    _max: FigCollectionMaxAggregateOutputType | null
  }

  type GetFigCollectionGroupByPayload<T extends FigCollectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FigCollectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FigCollectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FigCollectionGroupByOutputType[P]>
            : GetScalarType<T[P], FigCollectionGroupByOutputType[P]>
        }
      >
    >


  export type FigCollectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    prompt?: boolean
    created_at?: boolean
    user_id?: boolean
    fig_collection_file_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    fig_collection_file?: boolean | FigCollection$fig_collection_fileArgs<ExtArgs>
  }, ExtArgs["result"]["figCollection"]>

  export type FigCollectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    prompt?: boolean
    created_at?: boolean
    user_id?: boolean
    fig_collection_file_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["figCollection"]>

  export type FigCollectionSelectScalar = {
    id?: boolean
    name?: boolean
    prompt?: boolean
    created_at?: boolean
    user_id?: boolean
    fig_collection_file_id?: boolean
  }

  export type FigCollectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    fig_collection_file?: boolean | FigCollection$fig_collection_fileArgs<ExtArgs>
  }
  export type FigCollectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FigCollectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FigCollection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      fig_collection_file: Prisma.$FigCollectionFilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      prompt: string | null
      created_at: Date
      user_id: string
      fig_collection_file_id: string | null
    }, ExtArgs["result"]["figCollection"]>
    composites: {}
  }

  type FigCollectionGetPayload<S extends boolean | null | undefined | FigCollectionDefaultArgs> = $Result.GetResult<Prisma.$FigCollectionPayload, S>

  type FigCollectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FigCollectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FigCollectionCountAggregateInputType | true
    }

  export interface FigCollectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FigCollection'], meta: { name: 'FigCollection' } }
    /**
     * Find zero or one FigCollection that matches the filter.
     * @param {FigCollectionFindUniqueArgs} args - Arguments to find a FigCollection
     * @example
     * // Get one FigCollection
     * const figCollection = await prisma.figCollection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FigCollectionFindUniqueArgs>(args: SelectSubset<T, FigCollectionFindUniqueArgs<ExtArgs>>): Prisma__FigCollectionClient<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FigCollection that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FigCollectionFindUniqueOrThrowArgs} args - Arguments to find a FigCollection
     * @example
     * // Get one FigCollection
     * const figCollection = await prisma.figCollection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FigCollectionFindUniqueOrThrowArgs>(args: SelectSubset<T, FigCollectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FigCollectionClient<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FigCollection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionFindFirstArgs} args - Arguments to find a FigCollection
     * @example
     * // Get one FigCollection
     * const figCollection = await prisma.figCollection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FigCollectionFindFirstArgs>(args?: SelectSubset<T, FigCollectionFindFirstArgs<ExtArgs>>): Prisma__FigCollectionClient<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FigCollection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionFindFirstOrThrowArgs} args - Arguments to find a FigCollection
     * @example
     * // Get one FigCollection
     * const figCollection = await prisma.figCollection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FigCollectionFindFirstOrThrowArgs>(args?: SelectSubset<T, FigCollectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FigCollectionClient<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FigCollections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FigCollections
     * const figCollections = await prisma.figCollection.findMany()
     * 
     * // Get first 10 FigCollections
     * const figCollections = await prisma.figCollection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const figCollectionWithIdOnly = await prisma.figCollection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FigCollectionFindManyArgs>(args?: SelectSubset<T, FigCollectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FigCollection.
     * @param {FigCollectionCreateArgs} args - Arguments to create a FigCollection.
     * @example
     * // Create one FigCollection
     * const FigCollection = await prisma.figCollection.create({
     *   data: {
     *     // ... data to create a FigCollection
     *   }
     * })
     * 
     */
    create<T extends FigCollectionCreateArgs>(args: SelectSubset<T, FigCollectionCreateArgs<ExtArgs>>): Prisma__FigCollectionClient<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FigCollections.
     * @param {FigCollectionCreateManyArgs} args - Arguments to create many FigCollections.
     * @example
     * // Create many FigCollections
     * const figCollection = await prisma.figCollection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FigCollectionCreateManyArgs>(args?: SelectSubset<T, FigCollectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FigCollections and returns the data saved in the database.
     * @param {FigCollectionCreateManyAndReturnArgs} args - Arguments to create many FigCollections.
     * @example
     * // Create many FigCollections
     * const figCollection = await prisma.figCollection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FigCollections and only return the `id`
     * const figCollectionWithIdOnly = await prisma.figCollection.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FigCollectionCreateManyAndReturnArgs>(args?: SelectSubset<T, FigCollectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FigCollection.
     * @param {FigCollectionDeleteArgs} args - Arguments to delete one FigCollection.
     * @example
     * // Delete one FigCollection
     * const FigCollection = await prisma.figCollection.delete({
     *   where: {
     *     // ... filter to delete one FigCollection
     *   }
     * })
     * 
     */
    delete<T extends FigCollectionDeleteArgs>(args: SelectSubset<T, FigCollectionDeleteArgs<ExtArgs>>): Prisma__FigCollectionClient<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FigCollection.
     * @param {FigCollectionUpdateArgs} args - Arguments to update one FigCollection.
     * @example
     * // Update one FigCollection
     * const figCollection = await prisma.figCollection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FigCollectionUpdateArgs>(args: SelectSubset<T, FigCollectionUpdateArgs<ExtArgs>>): Prisma__FigCollectionClient<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FigCollections.
     * @param {FigCollectionDeleteManyArgs} args - Arguments to filter FigCollections to delete.
     * @example
     * // Delete a few FigCollections
     * const { count } = await prisma.figCollection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FigCollectionDeleteManyArgs>(args?: SelectSubset<T, FigCollectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FigCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FigCollections
     * const figCollection = await prisma.figCollection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FigCollectionUpdateManyArgs>(args: SelectSubset<T, FigCollectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FigCollection.
     * @param {FigCollectionUpsertArgs} args - Arguments to update or create a FigCollection.
     * @example
     * // Update or create a FigCollection
     * const figCollection = await prisma.figCollection.upsert({
     *   create: {
     *     // ... data to create a FigCollection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FigCollection we want to update
     *   }
     * })
     */
    upsert<T extends FigCollectionUpsertArgs>(args: SelectSubset<T, FigCollectionUpsertArgs<ExtArgs>>): Prisma__FigCollectionClient<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FigCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionCountArgs} args - Arguments to filter FigCollections to count.
     * @example
     * // Count the number of FigCollections
     * const count = await prisma.figCollection.count({
     *   where: {
     *     // ... the filter for the FigCollections we want to count
     *   }
     * })
    **/
    count<T extends FigCollectionCountArgs>(
      args?: Subset<T, FigCollectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FigCollectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FigCollection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FigCollectionAggregateArgs>(args: Subset<T, FigCollectionAggregateArgs>): Prisma.PrismaPromise<GetFigCollectionAggregateType<T>>

    /**
     * Group by FigCollection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FigCollectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FigCollectionGroupByArgs['orderBy'] }
        : { orderBy?: FigCollectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FigCollectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFigCollectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FigCollection model
   */
  readonly fields: FigCollectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FigCollection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FigCollectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fig_collection_file<T extends FigCollection$fig_collection_fileArgs<ExtArgs> = {}>(args?: Subset<T, FigCollection$fig_collection_fileArgs<ExtArgs>>): Prisma__FigCollectionFileClient<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FigCollection model
   */ 
  interface FigCollectionFieldRefs {
    readonly id: FieldRef<"FigCollection", 'String'>
    readonly name: FieldRef<"FigCollection", 'String'>
    readonly prompt: FieldRef<"FigCollection", 'String'>
    readonly created_at: FieldRef<"FigCollection", 'DateTime'>
    readonly user_id: FieldRef<"FigCollection", 'String'>
    readonly fig_collection_file_id: FieldRef<"FigCollection", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FigCollection findUnique
   */
  export type FigCollectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    /**
     * Filter, which FigCollection to fetch.
     */
    where: FigCollectionWhereUniqueInput
  }

  /**
   * FigCollection findUniqueOrThrow
   */
  export type FigCollectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    /**
     * Filter, which FigCollection to fetch.
     */
    where: FigCollectionWhereUniqueInput
  }

  /**
   * FigCollection findFirst
   */
  export type FigCollectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    /**
     * Filter, which FigCollection to fetch.
     */
    where?: FigCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FigCollections to fetch.
     */
    orderBy?: FigCollectionOrderByWithRelationInput | FigCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FigCollections.
     */
    cursor?: FigCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FigCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FigCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FigCollections.
     */
    distinct?: FigCollectionScalarFieldEnum | FigCollectionScalarFieldEnum[]
  }

  /**
   * FigCollection findFirstOrThrow
   */
  export type FigCollectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    /**
     * Filter, which FigCollection to fetch.
     */
    where?: FigCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FigCollections to fetch.
     */
    orderBy?: FigCollectionOrderByWithRelationInput | FigCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FigCollections.
     */
    cursor?: FigCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FigCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FigCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FigCollections.
     */
    distinct?: FigCollectionScalarFieldEnum | FigCollectionScalarFieldEnum[]
  }

  /**
   * FigCollection findMany
   */
  export type FigCollectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    /**
     * Filter, which FigCollections to fetch.
     */
    where?: FigCollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FigCollections to fetch.
     */
    orderBy?: FigCollectionOrderByWithRelationInput | FigCollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FigCollections.
     */
    cursor?: FigCollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FigCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FigCollections.
     */
    skip?: number
    distinct?: FigCollectionScalarFieldEnum | FigCollectionScalarFieldEnum[]
  }

  /**
   * FigCollection create
   */
  export type FigCollectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    /**
     * The data needed to create a FigCollection.
     */
    data: XOR<FigCollectionCreateInput, FigCollectionUncheckedCreateInput>
  }

  /**
   * FigCollection createMany
   */
  export type FigCollectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FigCollections.
     */
    data: FigCollectionCreateManyInput | FigCollectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FigCollection createManyAndReturn
   */
  export type FigCollectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FigCollections.
     */
    data: FigCollectionCreateManyInput | FigCollectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FigCollection update
   */
  export type FigCollectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    /**
     * The data needed to update a FigCollection.
     */
    data: XOR<FigCollectionUpdateInput, FigCollectionUncheckedUpdateInput>
    /**
     * Choose, which FigCollection to update.
     */
    where: FigCollectionWhereUniqueInput
  }

  /**
   * FigCollection updateMany
   */
  export type FigCollectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FigCollections.
     */
    data: XOR<FigCollectionUpdateManyMutationInput, FigCollectionUncheckedUpdateManyInput>
    /**
     * Filter which FigCollections to update
     */
    where?: FigCollectionWhereInput
  }

  /**
   * FigCollection upsert
   */
  export type FigCollectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    /**
     * The filter to search for the FigCollection to update in case it exists.
     */
    where: FigCollectionWhereUniqueInput
    /**
     * In case the FigCollection found by the `where` argument doesn't exist, create a new FigCollection with this data.
     */
    create: XOR<FigCollectionCreateInput, FigCollectionUncheckedCreateInput>
    /**
     * In case the FigCollection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FigCollectionUpdateInput, FigCollectionUncheckedUpdateInput>
  }

  /**
   * FigCollection delete
   */
  export type FigCollectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    /**
     * Filter which FigCollection to delete.
     */
    where: FigCollectionWhereUniqueInput
  }

  /**
   * FigCollection deleteMany
   */
  export type FigCollectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FigCollections to delete
     */
    where?: FigCollectionWhereInput
  }

  /**
   * FigCollection.fig_collection_file
   */
  export type FigCollection$fig_collection_fileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
    where?: FigCollectionFileWhereInput
  }

  /**
   * FigCollection without action
   */
  export type FigCollectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
  }


  /**
   * Model FigCollectionFile
   */

  export type AggregateFigCollectionFile = {
    _count: FigCollectionFileCountAggregateOutputType | null
    _min: FigCollectionFileMinAggregateOutputType | null
    _max: FigCollectionFileMaxAggregateOutputType | null
  }

  export type FigCollectionFileMinAggregateOutputType = {
    id: string | null
    title: string | null
    extracted_text: string | null
    created_at: Date | null
    fig_collection_id: string | null
  }

  export type FigCollectionFileMaxAggregateOutputType = {
    id: string | null
    title: string | null
    extracted_text: string | null
    created_at: Date | null
    fig_collection_id: string | null
  }

  export type FigCollectionFileCountAggregateOutputType = {
    id: number
    title: number
    extracted_text: number
    created_at: number
    fig_collection_id: number
    _all: number
  }


  export type FigCollectionFileMinAggregateInputType = {
    id?: true
    title?: true
    extracted_text?: true
    created_at?: true
    fig_collection_id?: true
  }

  export type FigCollectionFileMaxAggregateInputType = {
    id?: true
    title?: true
    extracted_text?: true
    created_at?: true
    fig_collection_id?: true
  }

  export type FigCollectionFileCountAggregateInputType = {
    id?: true
    title?: true
    extracted_text?: true
    created_at?: true
    fig_collection_id?: true
    _all?: true
  }

  export type FigCollectionFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FigCollectionFile to aggregate.
     */
    where?: FigCollectionFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FigCollectionFiles to fetch.
     */
    orderBy?: FigCollectionFileOrderByWithRelationInput | FigCollectionFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FigCollectionFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FigCollectionFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FigCollectionFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FigCollectionFiles
    **/
    _count?: true | FigCollectionFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FigCollectionFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FigCollectionFileMaxAggregateInputType
  }

  export type GetFigCollectionFileAggregateType<T extends FigCollectionFileAggregateArgs> = {
        [P in keyof T & keyof AggregateFigCollectionFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFigCollectionFile[P]>
      : GetScalarType<T[P], AggregateFigCollectionFile[P]>
  }




  export type FigCollectionFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FigCollectionFileWhereInput
    orderBy?: FigCollectionFileOrderByWithAggregationInput | FigCollectionFileOrderByWithAggregationInput[]
    by: FigCollectionFileScalarFieldEnum[] | FigCollectionFileScalarFieldEnum
    having?: FigCollectionFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FigCollectionFileCountAggregateInputType | true
    _min?: FigCollectionFileMinAggregateInputType
    _max?: FigCollectionFileMaxAggregateInputType
  }

  export type FigCollectionFileGroupByOutputType = {
    id: string
    title: string
    extracted_text: string
    created_at: Date
    fig_collection_id: string | null
    _count: FigCollectionFileCountAggregateOutputType | null
    _min: FigCollectionFileMinAggregateOutputType | null
    _max: FigCollectionFileMaxAggregateOutputType | null
  }

  type GetFigCollectionFileGroupByPayload<T extends FigCollectionFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FigCollectionFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FigCollectionFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FigCollectionFileGroupByOutputType[P]>
            : GetScalarType<T[P], FigCollectionFileGroupByOutputType[P]>
        }
      >
    >


  export type FigCollectionFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    extracted_text?: boolean
    created_at?: boolean
    fig_collection_id?: boolean
    fig_collection?: boolean | FigCollectionFile$fig_collectionArgs<ExtArgs>
  }, ExtArgs["result"]["figCollectionFile"]>

  export type FigCollectionFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    extracted_text?: boolean
    created_at?: boolean
    fig_collection_id?: boolean
    fig_collection?: boolean | FigCollectionFile$fig_collectionArgs<ExtArgs>
  }, ExtArgs["result"]["figCollectionFile"]>

  export type FigCollectionFileSelectScalar = {
    id?: boolean
    title?: boolean
    extracted_text?: boolean
    created_at?: boolean
    fig_collection_id?: boolean
  }

  export type FigCollectionFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fig_collection?: boolean | FigCollectionFile$fig_collectionArgs<ExtArgs>
  }
  export type FigCollectionFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fig_collection?: boolean | FigCollectionFile$fig_collectionArgs<ExtArgs>
  }

  export type $FigCollectionFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FigCollectionFile"
    objects: {
      fig_collection: Prisma.$FigCollectionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      extracted_text: string
      created_at: Date
      fig_collection_id: string | null
    }, ExtArgs["result"]["figCollectionFile"]>
    composites: {}
  }

  type FigCollectionFileGetPayload<S extends boolean | null | undefined | FigCollectionFileDefaultArgs> = $Result.GetResult<Prisma.$FigCollectionFilePayload, S>

  type FigCollectionFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FigCollectionFileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FigCollectionFileCountAggregateInputType | true
    }

  export interface FigCollectionFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FigCollectionFile'], meta: { name: 'FigCollectionFile' } }
    /**
     * Find zero or one FigCollectionFile that matches the filter.
     * @param {FigCollectionFileFindUniqueArgs} args - Arguments to find a FigCollectionFile
     * @example
     * // Get one FigCollectionFile
     * const figCollectionFile = await prisma.figCollectionFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FigCollectionFileFindUniqueArgs>(args: SelectSubset<T, FigCollectionFileFindUniqueArgs<ExtArgs>>): Prisma__FigCollectionFileClient<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FigCollectionFile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FigCollectionFileFindUniqueOrThrowArgs} args - Arguments to find a FigCollectionFile
     * @example
     * // Get one FigCollectionFile
     * const figCollectionFile = await prisma.figCollectionFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FigCollectionFileFindUniqueOrThrowArgs>(args: SelectSubset<T, FigCollectionFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FigCollectionFileClient<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FigCollectionFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionFileFindFirstArgs} args - Arguments to find a FigCollectionFile
     * @example
     * // Get one FigCollectionFile
     * const figCollectionFile = await prisma.figCollectionFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FigCollectionFileFindFirstArgs>(args?: SelectSubset<T, FigCollectionFileFindFirstArgs<ExtArgs>>): Prisma__FigCollectionFileClient<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FigCollectionFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionFileFindFirstOrThrowArgs} args - Arguments to find a FigCollectionFile
     * @example
     * // Get one FigCollectionFile
     * const figCollectionFile = await prisma.figCollectionFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FigCollectionFileFindFirstOrThrowArgs>(args?: SelectSubset<T, FigCollectionFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FigCollectionFileClient<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FigCollectionFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FigCollectionFiles
     * const figCollectionFiles = await prisma.figCollectionFile.findMany()
     * 
     * // Get first 10 FigCollectionFiles
     * const figCollectionFiles = await prisma.figCollectionFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const figCollectionFileWithIdOnly = await prisma.figCollectionFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FigCollectionFileFindManyArgs>(args?: SelectSubset<T, FigCollectionFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FigCollectionFile.
     * @param {FigCollectionFileCreateArgs} args - Arguments to create a FigCollectionFile.
     * @example
     * // Create one FigCollectionFile
     * const FigCollectionFile = await prisma.figCollectionFile.create({
     *   data: {
     *     // ... data to create a FigCollectionFile
     *   }
     * })
     * 
     */
    create<T extends FigCollectionFileCreateArgs>(args: SelectSubset<T, FigCollectionFileCreateArgs<ExtArgs>>): Prisma__FigCollectionFileClient<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FigCollectionFiles.
     * @param {FigCollectionFileCreateManyArgs} args - Arguments to create many FigCollectionFiles.
     * @example
     * // Create many FigCollectionFiles
     * const figCollectionFile = await prisma.figCollectionFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FigCollectionFileCreateManyArgs>(args?: SelectSubset<T, FigCollectionFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FigCollectionFiles and returns the data saved in the database.
     * @param {FigCollectionFileCreateManyAndReturnArgs} args - Arguments to create many FigCollectionFiles.
     * @example
     * // Create many FigCollectionFiles
     * const figCollectionFile = await prisma.figCollectionFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FigCollectionFiles and only return the `id`
     * const figCollectionFileWithIdOnly = await prisma.figCollectionFile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FigCollectionFileCreateManyAndReturnArgs>(args?: SelectSubset<T, FigCollectionFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FigCollectionFile.
     * @param {FigCollectionFileDeleteArgs} args - Arguments to delete one FigCollectionFile.
     * @example
     * // Delete one FigCollectionFile
     * const FigCollectionFile = await prisma.figCollectionFile.delete({
     *   where: {
     *     // ... filter to delete one FigCollectionFile
     *   }
     * })
     * 
     */
    delete<T extends FigCollectionFileDeleteArgs>(args: SelectSubset<T, FigCollectionFileDeleteArgs<ExtArgs>>): Prisma__FigCollectionFileClient<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FigCollectionFile.
     * @param {FigCollectionFileUpdateArgs} args - Arguments to update one FigCollectionFile.
     * @example
     * // Update one FigCollectionFile
     * const figCollectionFile = await prisma.figCollectionFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FigCollectionFileUpdateArgs>(args: SelectSubset<T, FigCollectionFileUpdateArgs<ExtArgs>>): Prisma__FigCollectionFileClient<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FigCollectionFiles.
     * @param {FigCollectionFileDeleteManyArgs} args - Arguments to filter FigCollectionFiles to delete.
     * @example
     * // Delete a few FigCollectionFiles
     * const { count } = await prisma.figCollectionFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FigCollectionFileDeleteManyArgs>(args?: SelectSubset<T, FigCollectionFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FigCollectionFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FigCollectionFiles
     * const figCollectionFile = await prisma.figCollectionFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FigCollectionFileUpdateManyArgs>(args: SelectSubset<T, FigCollectionFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FigCollectionFile.
     * @param {FigCollectionFileUpsertArgs} args - Arguments to update or create a FigCollectionFile.
     * @example
     * // Update or create a FigCollectionFile
     * const figCollectionFile = await prisma.figCollectionFile.upsert({
     *   create: {
     *     // ... data to create a FigCollectionFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FigCollectionFile we want to update
     *   }
     * })
     */
    upsert<T extends FigCollectionFileUpsertArgs>(args: SelectSubset<T, FigCollectionFileUpsertArgs<ExtArgs>>): Prisma__FigCollectionFileClient<$Result.GetResult<Prisma.$FigCollectionFilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FigCollectionFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionFileCountArgs} args - Arguments to filter FigCollectionFiles to count.
     * @example
     * // Count the number of FigCollectionFiles
     * const count = await prisma.figCollectionFile.count({
     *   where: {
     *     // ... the filter for the FigCollectionFiles we want to count
     *   }
     * })
    **/
    count<T extends FigCollectionFileCountArgs>(
      args?: Subset<T, FigCollectionFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FigCollectionFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FigCollectionFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FigCollectionFileAggregateArgs>(args: Subset<T, FigCollectionFileAggregateArgs>): Prisma.PrismaPromise<GetFigCollectionFileAggregateType<T>>

    /**
     * Group by FigCollectionFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FigCollectionFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FigCollectionFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FigCollectionFileGroupByArgs['orderBy'] }
        : { orderBy?: FigCollectionFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FigCollectionFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFigCollectionFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FigCollectionFile model
   */
  readonly fields: FigCollectionFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FigCollectionFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FigCollectionFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fig_collection<T extends FigCollectionFile$fig_collectionArgs<ExtArgs> = {}>(args?: Subset<T, FigCollectionFile$fig_collectionArgs<ExtArgs>>): Prisma__FigCollectionClient<$Result.GetResult<Prisma.$FigCollectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FigCollectionFile model
   */ 
  interface FigCollectionFileFieldRefs {
    readonly id: FieldRef<"FigCollectionFile", 'String'>
    readonly title: FieldRef<"FigCollectionFile", 'String'>
    readonly extracted_text: FieldRef<"FigCollectionFile", 'String'>
    readonly created_at: FieldRef<"FigCollectionFile", 'DateTime'>
    readonly fig_collection_id: FieldRef<"FigCollectionFile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FigCollectionFile findUnique
   */
  export type FigCollectionFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
    /**
     * Filter, which FigCollectionFile to fetch.
     */
    where: FigCollectionFileWhereUniqueInput
  }

  /**
   * FigCollectionFile findUniqueOrThrow
   */
  export type FigCollectionFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
    /**
     * Filter, which FigCollectionFile to fetch.
     */
    where: FigCollectionFileWhereUniqueInput
  }

  /**
   * FigCollectionFile findFirst
   */
  export type FigCollectionFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
    /**
     * Filter, which FigCollectionFile to fetch.
     */
    where?: FigCollectionFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FigCollectionFiles to fetch.
     */
    orderBy?: FigCollectionFileOrderByWithRelationInput | FigCollectionFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FigCollectionFiles.
     */
    cursor?: FigCollectionFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FigCollectionFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FigCollectionFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FigCollectionFiles.
     */
    distinct?: FigCollectionFileScalarFieldEnum | FigCollectionFileScalarFieldEnum[]
  }

  /**
   * FigCollectionFile findFirstOrThrow
   */
  export type FigCollectionFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
    /**
     * Filter, which FigCollectionFile to fetch.
     */
    where?: FigCollectionFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FigCollectionFiles to fetch.
     */
    orderBy?: FigCollectionFileOrderByWithRelationInput | FigCollectionFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FigCollectionFiles.
     */
    cursor?: FigCollectionFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FigCollectionFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FigCollectionFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FigCollectionFiles.
     */
    distinct?: FigCollectionFileScalarFieldEnum | FigCollectionFileScalarFieldEnum[]
  }

  /**
   * FigCollectionFile findMany
   */
  export type FigCollectionFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
    /**
     * Filter, which FigCollectionFiles to fetch.
     */
    where?: FigCollectionFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FigCollectionFiles to fetch.
     */
    orderBy?: FigCollectionFileOrderByWithRelationInput | FigCollectionFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FigCollectionFiles.
     */
    cursor?: FigCollectionFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FigCollectionFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FigCollectionFiles.
     */
    skip?: number
    distinct?: FigCollectionFileScalarFieldEnum | FigCollectionFileScalarFieldEnum[]
  }

  /**
   * FigCollectionFile create
   */
  export type FigCollectionFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
    /**
     * The data needed to create a FigCollectionFile.
     */
    data: XOR<FigCollectionFileCreateInput, FigCollectionFileUncheckedCreateInput>
  }

  /**
   * FigCollectionFile createMany
   */
  export type FigCollectionFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FigCollectionFiles.
     */
    data: FigCollectionFileCreateManyInput | FigCollectionFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FigCollectionFile createManyAndReturn
   */
  export type FigCollectionFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FigCollectionFiles.
     */
    data: FigCollectionFileCreateManyInput | FigCollectionFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FigCollectionFile update
   */
  export type FigCollectionFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
    /**
     * The data needed to update a FigCollectionFile.
     */
    data: XOR<FigCollectionFileUpdateInput, FigCollectionFileUncheckedUpdateInput>
    /**
     * Choose, which FigCollectionFile to update.
     */
    where: FigCollectionFileWhereUniqueInput
  }

  /**
   * FigCollectionFile updateMany
   */
  export type FigCollectionFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FigCollectionFiles.
     */
    data: XOR<FigCollectionFileUpdateManyMutationInput, FigCollectionFileUncheckedUpdateManyInput>
    /**
     * Filter which FigCollectionFiles to update
     */
    where?: FigCollectionFileWhereInput
  }

  /**
   * FigCollectionFile upsert
   */
  export type FigCollectionFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
    /**
     * The filter to search for the FigCollectionFile to update in case it exists.
     */
    where: FigCollectionFileWhereUniqueInput
    /**
     * In case the FigCollectionFile found by the `where` argument doesn't exist, create a new FigCollectionFile with this data.
     */
    create: XOR<FigCollectionFileCreateInput, FigCollectionFileUncheckedCreateInput>
    /**
     * In case the FigCollectionFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FigCollectionFileUpdateInput, FigCollectionFileUncheckedUpdateInput>
  }

  /**
   * FigCollectionFile delete
   */
  export type FigCollectionFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
    /**
     * Filter which FigCollectionFile to delete.
     */
    where: FigCollectionFileWhereUniqueInput
  }

  /**
   * FigCollectionFile deleteMany
   */
  export type FigCollectionFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FigCollectionFiles to delete
     */
    where?: FigCollectionFileWhereInput
  }

  /**
   * FigCollectionFile.fig_collection
   */
  export type FigCollectionFile$fig_collectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollection
     */
    select?: FigCollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionInclude<ExtArgs> | null
    where?: FigCollectionWhereInput
  }

  /**
   * FigCollectionFile without action
   */
  export type FigCollectionFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FigCollectionFile
     */
    select?: FigCollectionFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FigCollectionFileInclude<ExtArgs> | null
  }


  /**
   * Model APIKey
   */

  export type AggregateAPIKey = {
    _count: APIKeyCountAggregateOutputType | null
    _min: APIKeyMinAggregateOutputType | null
    _max: APIKeyMaxAggregateOutputType | null
  }

  export type APIKeyMinAggregateOutputType = {
    id: string | null
    key: string | null
    name: string | null
    user_id: string | null
    created_at: Date | null
    last_used: Date | null
    expires_at: Date | null
    is_active: boolean | null
  }

  export type APIKeyMaxAggregateOutputType = {
    id: string | null
    key: string | null
    name: string | null
    user_id: string | null
    created_at: Date | null
    last_used: Date | null
    expires_at: Date | null
    is_active: boolean | null
  }

  export type APIKeyCountAggregateOutputType = {
    id: number
    key: number
    name: number
    user_id: number
    created_at: number
    last_used: number
    expires_at: number
    is_active: number
    _all: number
  }


  export type APIKeyMinAggregateInputType = {
    id?: true
    key?: true
    name?: true
    user_id?: true
    created_at?: true
    last_used?: true
    expires_at?: true
    is_active?: true
  }

  export type APIKeyMaxAggregateInputType = {
    id?: true
    key?: true
    name?: true
    user_id?: true
    created_at?: true
    last_used?: true
    expires_at?: true
    is_active?: true
  }

  export type APIKeyCountAggregateInputType = {
    id?: true
    key?: true
    name?: true
    user_id?: true
    created_at?: true
    last_used?: true
    expires_at?: true
    is_active?: true
    _all?: true
  }

  export type APIKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which APIKey to aggregate.
     */
    where?: APIKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIKeys to fetch.
     */
    orderBy?: APIKeyOrderByWithRelationInput | APIKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: APIKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned APIKeys
    **/
    _count?: true | APIKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: APIKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: APIKeyMaxAggregateInputType
  }

  export type GetAPIKeyAggregateType<T extends APIKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateAPIKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAPIKey[P]>
      : GetScalarType<T[P], AggregateAPIKey[P]>
  }




  export type APIKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: APIKeyWhereInput
    orderBy?: APIKeyOrderByWithAggregationInput | APIKeyOrderByWithAggregationInput[]
    by: APIKeyScalarFieldEnum[] | APIKeyScalarFieldEnum
    having?: APIKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: APIKeyCountAggregateInputType | true
    _min?: APIKeyMinAggregateInputType
    _max?: APIKeyMaxAggregateInputType
  }

  export type APIKeyGroupByOutputType = {
    id: string
    key: string
    name: string
    user_id: string
    created_at: Date
    last_used: Date | null
    expires_at: Date | null
    is_active: boolean
    _count: APIKeyCountAggregateOutputType | null
    _min: APIKeyMinAggregateOutputType | null
    _max: APIKeyMaxAggregateOutputType | null
  }

  type GetAPIKeyGroupByPayload<T extends APIKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<APIKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof APIKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], APIKeyGroupByOutputType[P]>
            : GetScalarType<T[P], APIKeyGroupByOutputType[P]>
        }
      >
    >


  export type APIKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    user_id?: boolean
    created_at?: boolean
    last_used?: boolean
    expires_at?: boolean
    is_active?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aPIKey"]>

  export type APIKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    user_id?: boolean
    created_at?: boolean
    last_used?: boolean
    expires_at?: boolean
    is_active?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aPIKey"]>

  export type APIKeySelectScalar = {
    id?: boolean
    key?: boolean
    name?: boolean
    user_id?: boolean
    created_at?: boolean
    last_used?: boolean
    expires_at?: boolean
    is_active?: boolean
  }

  export type APIKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type APIKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $APIKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "APIKey"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      name: string
      user_id: string
      created_at: Date
      last_used: Date | null
      expires_at: Date | null
      is_active: boolean
    }, ExtArgs["result"]["aPIKey"]>
    composites: {}
  }

  type APIKeyGetPayload<S extends boolean | null | undefined | APIKeyDefaultArgs> = $Result.GetResult<Prisma.$APIKeyPayload, S>

  type APIKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<APIKeyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: APIKeyCountAggregateInputType | true
    }

  export interface APIKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['APIKey'], meta: { name: 'APIKey' } }
    /**
     * Find zero or one APIKey that matches the filter.
     * @param {APIKeyFindUniqueArgs} args - Arguments to find a APIKey
     * @example
     * // Get one APIKey
     * const aPIKey = await prisma.aPIKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends APIKeyFindUniqueArgs>(args: SelectSubset<T, APIKeyFindUniqueArgs<ExtArgs>>): Prisma__APIKeyClient<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one APIKey that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {APIKeyFindUniqueOrThrowArgs} args - Arguments to find a APIKey
     * @example
     * // Get one APIKey
     * const aPIKey = await prisma.aPIKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends APIKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, APIKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__APIKeyClient<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first APIKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIKeyFindFirstArgs} args - Arguments to find a APIKey
     * @example
     * // Get one APIKey
     * const aPIKey = await prisma.aPIKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends APIKeyFindFirstArgs>(args?: SelectSubset<T, APIKeyFindFirstArgs<ExtArgs>>): Prisma__APIKeyClient<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first APIKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIKeyFindFirstOrThrowArgs} args - Arguments to find a APIKey
     * @example
     * // Get one APIKey
     * const aPIKey = await prisma.aPIKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends APIKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, APIKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__APIKeyClient<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more APIKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all APIKeys
     * const aPIKeys = await prisma.aPIKey.findMany()
     * 
     * // Get first 10 APIKeys
     * const aPIKeys = await prisma.aPIKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aPIKeyWithIdOnly = await prisma.aPIKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends APIKeyFindManyArgs>(args?: SelectSubset<T, APIKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a APIKey.
     * @param {APIKeyCreateArgs} args - Arguments to create a APIKey.
     * @example
     * // Create one APIKey
     * const APIKey = await prisma.aPIKey.create({
     *   data: {
     *     // ... data to create a APIKey
     *   }
     * })
     * 
     */
    create<T extends APIKeyCreateArgs>(args: SelectSubset<T, APIKeyCreateArgs<ExtArgs>>): Prisma__APIKeyClient<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many APIKeys.
     * @param {APIKeyCreateManyArgs} args - Arguments to create many APIKeys.
     * @example
     * // Create many APIKeys
     * const aPIKey = await prisma.aPIKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends APIKeyCreateManyArgs>(args?: SelectSubset<T, APIKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many APIKeys and returns the data saved in the database.
     * @param {APIKeyCreateManyAndReturnArgs} args - Arguments to create many APIKeys.
     * @example
     * // Create many APIKeys
     * const aPIKey = await prisma.aPIKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many APIKeys and only return the `id`
     * const aPIKeyWithIdOnly = await prisma.aPIKey.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends APIKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, APIKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a APIKey.
     * @param {APIKeyDeleteArgs} args - Arguments to delete one APIKey.
     * @example
     * // Delete one APIKey
     * const APIKey = await prisma.aPIKey.delete({
     *   where: {
     *     // ... filter to delete one APIKey
     *   }
     * })
     * 
     */
    delete<T extends APIKeyDeleteArgs>(args: SelectSubset<T, APIKeyDeleteArgs<ExtArgs>>): Prisma__APIKeyClient<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one APIKey.
     * @param {APIKeyUpdateArgs} args - Arguments to update one APIKey.
     * @example
     * // Update one APIKey
     * const aPIKey = await prisma.aPIKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends APIKeyUpdateArgs>(args: SelectSubset<T, APIKeyUpdateArgs<ExtArgs>>): Prisma__APIKeyClient<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more APIKeys.
     * @param {APIKeyDeleteManyArgs} args - Arguments to filter APIKeys to delete.
     * @example
     * // Delete a few APIKeys
     * const { count } = await prisma.aPIKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends APIKeyDeleteManyArgs>(args?: SelectSubset<T, APIKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more APIKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many APIKeys
     * const aPIKey = await prisma.aPIKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends APIKeyUpdateManyArgs>(args: SelectSubset<T, APIKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one APIKey.
     * @param {APIKeyUpsertArgs} args - Arguments to update or create a APIKey.
     * @example
     * // Update or create a APIKey
     * const aPIKey = await prisma.aPIKey.upsert({
     *   create: {
     *     // ... data to create a APIKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the APIKey we want to update
     *   }
     * })
     */
    upsert<T extends APIKeyUpsertArgs>(args: SelectSubset<T, APIKeyUpsertArgs<ExtArgs>>): Prisma__APIKeyClient<$Result.GetResult<Prisma.$APIKeyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of APIKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIKeyCountArgs} args - Arguments to filter APIKeys to count.
     * @example
     * // Count the number of APIKeys
     * const count = await prisma.aPIKey.count({
     *   where: {
     *     // ... the filter for the APIKeys we want to count
     *   }
     * })
    **/
    count<T extends APIKeyCountArgs>(
      args?: Subset<T, APIKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], APIKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a APIKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends APIKeyAggregateArgs>(args: Subset<T, APIKeyAggregateArgs>): Prisma.PrismaPromise<GetAPIKeyAggregateType<T>>

    /**
     * Group by APIKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {APIKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends APIKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: APIKeyGroupByArgs['orderBy'] }
        : { orderBy?: APIKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, APIKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAPIKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the APIKey model
   */
  readonly fields: APIKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for APIKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__APIKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the APIKey model
   */ 
  interface APIKeyFieldRefs {
    readonly id: FieldRef<"APIKey", 'String'>
    readonly key: FieldRef<"APIKey", 'String'>
    readonly name: FieldRef<"APIKey", 'String'>
    readonly user_id: FieldRef<"APIKey", 'String'>
    readonly created_at: FieldRef<"APIKey", 'DateTime'>
    readonly last_used: FieldRef<"APIKey", 'DateTime'>
    readonly expires_at: FieldRef<"APIKey", 'DateTime'>
    readonly is_active: FieldRef<"APIKey", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * APIKey findUnique
   */
  export type APIKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
    /**
     * Filter, which APIKey to fetch.
     */
    where: APIKeyWhereUniqueInput
  }

  /**
   * APIKey findUniqueOrThrow
   */
  export type APIKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
    /**
     * Filter, which APIKey to fetch.
     */
    where: APIKeyWhereUniqueInput
  }

  /**
   * APIKey findFirst
   */
  export type APIKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
    /**
     * Filter, which APIKey to fetch.
     */
    where?: APIKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIKeys to fetch.
     */
    orderBy?: APIKeyOrderByWithRelationInput | APIKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for APIKeys.
     */
    cursor?: APIKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of APIKeys.
     */
    distinct?: APIKeyScalarFieldEnum | APIKeyScalarFieldEnum[]
  }

  /**
   * APIKey findFirstOrThrow
   */
  export type APIKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
    /**
     * Filter, which APIKey to fetch.
     */
    where?: APIKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIKeys to fetch.
     */
    orderBy?: APIKeyOrderByWithRelationInput | APIKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for APIKeys.
     */
    cursor?: APIKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of APIKeys.
     */
    distinct?: APIKeyScalarFieldEnum | APIKeyScalarFieldEnum[]
  }

  /**
   * APIKey findMany
   */
  export type APIKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
    /**
     * Filter, which APIKeys to fetch.
     */
    where?: APIKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of APIKeys to fetch.
     */
    orderBy?: APIKeyOrderByWithRelationInput | APIKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing APIKeys.
     */
    cursor?: APIKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` APIKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` APIKeys.
     */
    skip?: number
    distinct?: APIKeyScalarFieldEnum | APIKeyScalarFieldEnum[]
  }

  /**
   * APIKey create
   */
  export type APIKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a APIKey.
     */
    data: XOR<APIKeyCreateInput, APIKeyUncheckedCreateInput>
  }

  /**
   * APIKey createMany
   */
  export type APIKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many APIKeys.
     */
    data: APIKeyCreateManyInput | APIKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * APIKey createManyAndReturn
   */
  export type APIKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many APIKeys.
     */
    data: APIKeyCreateManyInput | APIKeyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * APIKey update
   */
  export type APIKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a APIKey.
     */
    data: XOR<APIKeyUpdateInput, APIKeyUncheckedUpdateInput>
    /**
     * Choose, which APIKey to update.
     */
    where: APIKeyWhereUniqueInput
  }

  /**
   * APIKey updateMany
   */
  export type APIKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update APIKeys.
     */
    data: XOR<APIKeyUpdateManyMutationInput, APIKeyUncheckedUpdateManyInput>
    /**
     * Filter which APIKeys to update
     */
    where?: APIKeyWhereInput
  }

  /**
   * APIKey upsert
   */
  export type APIKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the APIKey to update in case it exists.
     */
    where: APIKeyWhereUniqueInput
    /**
     * In case the APIKey found by the `where` argument doesn't exist, create a new APIKey with this data.
     */
    create: XOR<APIKeyCreateInput, APIKeyUncheckedCreateInput>
    /**
     * In case the APIKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<APIKeyUpdateInput, APIKeyUncheckedUpdateInput>
  }

  /**
   * APIKey delete
   */
  export type APIKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
    /**
     * Filter which APIKey to delete.
     */
    where: APIKeyWhereUniqueInput
  }

  /**
   * APIKey deleteMany
   */
  export type APIKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which APIKeys to delete
     */
    where?: APIKeyWhereInput
  }

  /**
   * APIKey without action
   */
  export type APIKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the APIKey
     */
    select?: APIKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: APIKeyInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    tier_id: 'tier_id',
    logo_url: 'logo_url',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FormScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    name: 'name',
    description: 'description',
    prompt: 'prompt',
    file: 'file',
    theme_color: 'theme_color',
    created_at: 'created_at',
    webhook_id: 'webhook_id'
  };

  export type FormScalarFieldEnum = (typeof FormScalarFieldEnum)[keyof typeof FormScalarFieldEnum]


  export const FieldScalarFieldEnum: {
    id: 'id',
    form_id: 'form_id',
    name: 'name',
    label: 'label',
    type: 'type',
    description: 'description',
    required: 'required',
    created_at: 'created_at',
    order: 'order'
  };

  export type FieldScalarFieldEnum = (typeof FieldScalarFieldEnum)[keyof typeof FieldScalarFieldEnum]


  export const FieldOptionScalarFieldEnum: {
    id: 'id',
    field_id: 'field_id',
    name: 'name',
    created_at: 'created_at'
  };

  export type FieldOptionScalarFieldEnum = (typeof FieldOptionScalarFieldEnum)[keyof typeof FieldOptionScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    id: 'id',
    form_id: 'form_id',
    text: 'text',
    created_at: 'created_at'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const PublishedFormScalarFieldEnum: {
    id: 'id',
    form_id: 'form_id',
    user_id: 'user_id',
    created_at: 'created_at',
    last_published_at: 'last_published_at',
    encoded_content: 'encoded_content'
  };

  export type PublishedFormScalarFieldEnum = (typeof PublishedFormScalarFieldEnum)[keyof typeof PublishedFormScalarFieldEnum]


  export const StripeUserScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    stripe_id: 'stripe_id',
    created_at: 'created_at',
    is_active: 'is_active'
  };

  export type StripeUserScalarFieldEnum = (typeof StripeUserScalarFieldEnum)[keyof typeof StripeUserScalarFieldEnum]


  export const PromptFileScalarFieldEnum: {
    id: 'id',
    form_id: 'form_id',
    created_at: 'created_at',
    title: 'title',
    extracted_text: 'extracted_text',
    base64_content: 'base64_content',
    url: 'url'
  };

  export type PromptFileScalarFieldEnum = (typeof PromptFileScalarFieldEnum)[keyof typeof PromptFileScalarFieldEnum]


  export const WebhookScalarFieldEnum: {
    id: 'id',
    form_id: 'form_id',
    url: 'url',
    method: 'method',
    api_key: 'api_key',
    api_key_header: 'api_key_header',
    created_at: 'created_at'
  };

  export type WebhookScalarFieldEnum = (typeof WebhookScalarFieldEnum)[keyof typeof WebhookScalarFieldEnum]


  export const FigCollectionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    prompt: 'prompt',
    created_at: 'created_at',
    user_id: 'user_id',
    fig_collection_file_id: 'fig_collection_file_id'
  };

  export type FigCollectionScalarFieldEnum = (typeof FigCollectionScalarFieldEnum)[keyof typeof FigCollectionScalarFieldEnum]


  export const FigCollectionFileScalarFieldEnum: {
    id: 'id',
    title: 'title',
    extracted_text: 'extracted_text',
    created_at: 'created_at',
    fig_collection_id: 'fig_collection_id'
  };

  export type FigCollectionFileScalarFieldEnum = (typeof FigCollectionFileScalarFieldEnum)[keyof typeof FigCollectionFileScalarFieldEnum]


  export const APIKeyScalarFieldEnum: {
    id: 'id',
    key: 'key',
    name: 'name',
    user_id: 'user_id',
    created_at: 'created_at',
    last_used: 'last_used',
    expires_at: 'expires_at',
    is_active: 'is_active'
  };

  export type APIKeyScalarFieldEnum = (typeof APIKeyScalarFieldEnum)[keyof typeof APIKeyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    tier_id?: StringFilter<"User"> | string
    logo_url?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    Form?: FormListRelationFilter
    PublishedForm?: PublishedFormListRelationFilter
    stripe_user?: XOR<StripeUserNullableRelationFilter, StripeUserWhereInput> | null
    APIKey?: APIKeyListRelationFilter
    FigCollection?: FigCollectionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tier_id?: SortOrder
    logo_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    Form?: FormOrderByRelationAggregateInput
    PublishedForm?: PublishedFormOrderByRelationAggregateInput
    stripe_user?: StripeUserOrderByWithRelationInput
    APIKey?: APIKeyOrderByRelationAggregateInput
    FigCollection?: FigCollectionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    tier_id?: StringFilter<"User"> | string
    logo_url?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    Form?: FormListRelationFilter
    PublishedForm?: PublishedFormListRelationFilter
    stripe_user?: XOR<StripeUserNullableRelationFilter, StripeUserWhereInput> | null
    APIKey?: APIKeyListRelationFilter
    FigCollection?: FigCollectionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tier_id?: SortOrder
    logo_url?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    tier_id?: StringWithAggregatesFilter<"User"> | string
    logo_url?: StringNullableWithAggregatesFilter<"User"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type FormWhereInput = {
    AND?: FormWhereInput | FormWhereInput[]
    OR?: FormWhereInput[]
    NOT?: FormWhereInput | FormWhereInput[]
    id?: StringFilter<"Form"> | string
    user_id?: StringFilter<"Form"> | string
    name?: StringFilter<"Form"> | string
    description?: StringNullableFilter<"Form"> | string | null
    prompt?: StringNullableFilter<"Form"> | string | null
    file?: StringNullableFilter<"Form"> | string | null
    theme_color?: StringNullableFilter<"Form"> | string | null
    created_at?: DateTimeFilter<"Form"> | Date | string
    webhook_id?: StringNullableFilter<"Form"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    Field?: FieldListRelationFilter
    Submission?: SubmissionListRelationFilter
    PublishedForm?: PublishedFormListRelationFilter
    PromptFile?: PromptFileListRelationFilter
    Webhook?: XOR<WebhookNullableRelationFilter, WebhookWhereInput> | null
  }

  export type FormOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    prompt?: SortOrderInput | SortOrder
    file?: SortOrderInput | SortOrder
    theme_color?: SortOrderInput | SortOrder
    created_at?: SortOrder
    webhook_id?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    Field?: FieldOrderByRelationAggregateInput
    Submission?: SubmissionOrderByRelationAggregateInput
    PublishedForm?: PublishedFormOrderByRelationAggregateInput
    PromptFile?: PromptFileOrderByRelationAggregateInput
    Webhook?: WebhookOrderByWithRelationInput
  }

  export type FormWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    webhook_id?: string
    AND?: FormWhereInput | FormWhereInput[]
    OR?: FormWhereInput[]
    NOT?: FormWhereInput | FormWhereInput[]
    user_id?: StringFilter<"Form"> | string
    name?: StringFilter<"Form"> | string
    description?: StringNullableFilter<"Form"> | string | null
    prompt?: StringNullableFilter<"Form"> | string | null
    file?: StringNullableFilter<"Form"> | string | null
    theme_color?: StringNullableFilter<"Form"> | string | null
    created_at?: DateTimeFilter<"Form"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    Field?: FieldListRelationFilter
    Submission?: SubmissionListRelationFilter
    PublishedForm?: PublishedFormListRelationFilter
    PromptFile?: PromptFileListRelationFilter
    Webhook?: XOR<WebhookNullableRelationFilter, WebhookWhereInput> | null
  }, "id" | "webhook_id">

  export type FormOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    prompt?: SortOrderInput | SortOrder
    file?: SortOrderInput | SortOrder
    theme_color?: SortOrderInput | SortOrder
    created_at?: SortOrder
    webhook_id?: SortOrderInput | SortOrder
    _count?: FormCountOrderByAggregateInput
    _max?: FormMaxOrderByAggregateInput
    _min?: FormMinOrderByAggregateInput
  }

  export type FormScalarWhereWithAggregatesInput = {
    AND?: FormScalarWhereWithAggregatesInput | FormScalarWhereWithAggregatesInput[]
    OR?: FormScalarWhereWithAggregatesInput[]
    NOT?: FormScalarWhereWithAggregatesInput | FormScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Form"> | string
    user_id?: StringWithAggregatesFilter<"Form"> | string
    name?: StringWithAggregatesFilter<"Form"> | string
    description?: StringNullableWithAggregatesFilter<"Form"> | string | null
    prompt?: StringNullableWithAggregatesFilter<"Form"> | string | null
    file?: StringNullableWithAggregatesFilter<"Form"> | string | null
    theme_color?: StringNullableWithAggregatesFilter<"Form"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Form"> | Date | string
    webhook_id?: StringNullableWithAggregatesFilter<"Form"> | string | null
  }

  export type FieldWhereInput = {
    AND?: FieldWhereInput | FieldWhereInput[]
    OR?: FieldWhereInput[]
    NOT?: FieldWhereInput | FieldWhereInput[]
    id?: StringFilter<"Field"> | string
    form_id?: StringFilter<"Field"> | string
    name?: StringFilter<"Field"> | string
    label?: StringFilter<"Field"> | string
    type?: StringFilter<"Field"> | string
    description?: StringNullableFilter<"Field"> | string | null
    required?: BoolFilter<"Field"> | boolean
    created_at?: DateTimeFilter<"Field"> | Date | string
    order?: IntNullableFilter<"Field"> | number | null
    form?: XOR<FormRelationFilter, FormWhereInput>
    FieldOption?: FieldOptionListRelationFilter
  }

  export type FieldOrderByWithRelationInput = {
    id?: SortOrder
    form_id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    required?: SortOrder
    created_at?: SortOrder
    order?: SortOrderInput | SortOrder
    form?: FormOrderByWithRelationInput
    FieldOption?: FieldOptionOrderByRelationAggregateInput
  }

  export type FieldWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FieldWhereInput | FieldWhereInput[]
    OR?: FieldWhereInput[]
    NOT?: FieldWhereInput | FieldWhereInput[]
    form_id?: StringFilter<"Field"> | string
    name?: StringFilter<"Field"> | string
    label?: StringFilter<"Field"> | string
    type?: StringFilter<"Field"> | string
    description?: StringNullableFilter<"Field"> | string | null
    required?: BoolFilter<"Field"> | boolean
    created_at?: DateTimeFilter<"Field"> | Date | string
    order?: IntNullableFilter<"Field"> | number | null
    form?: XOR<FormRelationFilter, FormWhereInput>
    FieldOption?: FieldOptionListRelationFilter
  }, "id">

  export type FieldOrderByWithAggregationInput = {
    id?: SortOrder
    form_id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    required?: SortOrder
    created_at?: SortOrder
    order?: SortOrderInput | SortOrder
    _count?: FieldCountOrderByAggregateInput
    _avg?: FieldAvgOrderByAggregateInput
    _max?: FieldMaxOrderByAggregateInput
    _min?: FieldMinOrderByAggregateInput
    _sum?: FieldSumOrderByAggregateInput
  }

  export type FieldScalarWhereWithAggregatesInput = {
    AND?: FieldScalarWhereWithAggregatesInput | FieldScalarWhereWithAggregatesInput[]
    OR?: FieldScalarWhereWithAggregatesInput[]
    NOT?: FieldScalarWhereWithAggregatesInput | FieldScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Field"> | string
    form_id?: StringWithAggregatesFilter<"Field"> | string
    name?: StringWithAggregatesFilter<"Field"> | string
    label?: StringWithAggregatesFilter<"Field"> | string
    type?: StringWithAggregatesFilter<"Field"> | string
    description?: StringNullableWithAggregatesFilter<"Field"> | string | null
    required?: BoolWithAggregatesFilter<"Field"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Field"> | Date | string
    order?: IntNullableWithAggregatesFilter<"Field"> | number | null
  }

  export type FieldOptionWhereInput = {
    AND?: FieldOptionWhereInput | FieldOptionWhereInput[]
    OR?: FieldOptionWhereInput[]
    NOT?: FieldOptionWhereInput | FieldOptionWhereInput[]
    id?: StringFilter<"FieldOption"> | string
    field_id?: StringFilter<"FieldOption"> | string
    name?: StringFilter<"FieldOption"> | string
    created_at?: DateTimeFilter<"FieldOption"> | Date | string
    field?: XOR<FieldRelationFilter, FieldWhereInput>
  }

  export type FieldOptionOrderByWithRelationInput = {
    id?: SortOrder
    field_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    field?: FieldOrderByWithRelationInput
  }

  export type FieldOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FieldOptionWhereInput | FieldOptionWhereInput[]
    OR?: FieldOptionWhereInput[]
    NOT?: FieldOptionWhereInput | FieldOptionWhereInput[]
    field_id?: StringFilter<"FieldOption"> | string
    name?: StringFilter<"FieldOption"> | string
    created_at?: DateTimeFilter<"FieldOption"> | Date | string
    field?: XOR<FieldRelationFilter, FieldWhereInput>
  }, "id">

  export type FieldOptionOrderByWithAggregationInput = {
    id?: SortOrder
    field_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    _count?: FieldOptionCountOrderByAggregateInput
    _max?: FieldOptionMaxOrderByAggregateInput
    _min?: FieldOptionMinOrderByAggregateInput
  }

  export type FieldOptionScalarWhereWithAggregatesInput = {
    AND?: FieldOptionScalarWhereWithAggregatesInput | FieldOptionScalarWhereWithAggregatesInput[]
    OR?: FieldOptionScalarWhereWithAggregatesInput[]
    NOT?: FieldOptionScalarWhereWithAggregatesInput | FieldOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FieldOption"> | string
    field_id?: StringWithAggregatesFilter<"FieldOption"> | string
    name?: StringWithAggregatesFilter<"FieldOption"> | string
    created_at?: DateTimeWithAggregatesFilter<"FieldOption"> | Date | string
  }

  export type SubmissionWhereInput = {
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    id?: StringFilter<"Submission"> | string
    form_id?: StringFilter<"Submission"> | string
    text?: StringNullableFilter<"Submission"> | string | null
    created_at?: DateTimeFilter<"Submission"> | Date | string
    form?: XOR<FormRelationFilter, FormWhereInput>
  }

  export type SubmissionOrderByWithRelationInput = {
    id?: SortOrder
    form_id?: SortOrder
    text?: SortOrderInput | SortOrder
    created_at?: SortOrder
    form?: FormOrderByWithRelationInput
  }

  export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    form_id?: StringFilter<"Submission"> | string
    text?: StringNullableFilter<"Submission"> | string | null
    created_at?: DateTimeFilter<"Submission"> | Date | string
    form?: XOR<FormRelationFilter, FormWhereInput>
  }, "id">

  export type SubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    form_id?: SortOrder
    text?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: SubmissionCountOrderByAggregateInput
    _max?: SubmissionMaxOrderByAggregateInput
    _min?: SubmissionMinOrderByAggregateInput
  }

  export type SubmissionScalarWhereWithAggregatesInput = {
    AND?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    OR?: SubmissionScalarWhereWithAggregatesInput[]
    NOT?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Submission"> | string
    form_id?: StringWithAggregatesFilter<"Submission"> | string
    text?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
  }

  export type PublishedFormWhereInput = {
    AND?: PublishedFormWhereInput | PublishedFormWhereInput[]
    OR?: PublishedFormWhereInput[]
    NOT?: PublishedFormWhereInput | PublishedFormWhereInput[]
    id?: StringFilter<"PublishedForm"> | string
    form_id?: StringFilter<"PublishedForm"> | string
    user_id?: StringFilter<"PublishedForm"> | string
    created_at?: DateTimeFilter<"PublishedForm"> | Date | string
    last_published_at?: DateTimeNullableFilter<"PublishedForm"> | Date | string | null
    encoded_content?: StringFilter<"PublishedForm"> | string
    form?: XOR<FormRelationFilter, FormWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PublishedFormOrderByWithRelationInput = {
    id?: SortOrder
    form_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    last_published_at?: SortOrderInput | SortOrder
    encoded_content?: SortOrder
    form?: FormOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type PublishedFormWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PublishedFormWhereInput | PublishedFormWhereInput[]
    OR?: PublishedFormWhereInput[]
    NOT?: PublishedFormWhereInput | PublishedFormWhereInput[]
    form_id?: StringFilter<"PublishedForm"> | string
    user_id?: StringFilter<"PublishedForm"> | string
    created_at?: DateTimeFilter<"PublishedForm"> | Date | string
    last_published_at?: DateTimeNullableFilter<"PublishedForm"> | Date | string | null
    encoded_content?: StringFilter<"PublishedForm"> | string
    form?: XOR<FormRelationFilter, FormWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PublishedFormOrderByWithAggregationInput = {
    id?: SortOrder
    form_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    last_published_at?: SortOrderInput | SortOrder
    encoded_content?: SortOrder
    _count?: PublishedFormCountOrderByAggregateInput
    _max?: PublishedFormMaxOrderByAggregateInput
    _min?: PublishedFormMinOrderByAggregateInput
  }

  export type PublishedFormScalarWhereWithAggregatesInput = {
    AND?: PublishedFormScalarWhereWithAggregatesInput | PublishedFormScalarWhereWithAggregatesInput[]
    OR?: PublishedFormScalarWhereWithAggregatesInput[]
    NOT?: PublishedFormScalarWhereWithAggregatesInput | PublishedFormScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PublishedForm"> | string
    form_id?: StringWithAggregatesFilter<"PublishedForm"> | string
    user_id?: StringWithAggregatesFilter<"PublishedForm"> | string
    created_at?: DateTimeWithAggregatesFilter<"PublishedForm"> | Date | string
    last_published_at?: DateTimeNullableWithAggregatesFilter<"PublishedForm"> | Date | string | null
    encoded_content?: StringWithAggregatesFilter<"PublishedForm"> | string
  }

  export type StripeUserWhereInput = {
    AND?: StripeUserWhereInput | StripeUserWhereInput[]
    OR?: StripeUserWhereInput[]
    NOT?: StripeUserWhereInput | StripeUserWhereInput[]
    id?: StringFilter<"StripeUser"> | string
    user_id?: StringFilter<"StripeUser"> | string
    stripe_id?: StringFilter<"StripeUser"> | string
    created_at?: DateTimeFilter<"StripeUser"> | Date | string
    is_active?: BoolFilter<"StripeUser"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StripeUserOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    stripe_id?: SortOrder
    created_at?: SortOrder
    is_active?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type StripeUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id?: string
    AND?: StripeUserWhereInput | StripeUserWhereInput[]
    OR?: StripeUserWhereInput[]
    NOT?: StripeUserWhereInput | StripeUserWhereInput[]
    stripe_id?: StringFilter<"StripeUser"> | string
    created_at?: DateTimeFilter<"StripeUser"> | Date | string
    is_active?: BoolFilter<"StripeUser"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id">

  export type StripeUserOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    stripe_id?: SortOrder
    created_at?: SortOrder
    is_active?: SortOrder
    _count?: StripeUserCountOrderByAggregateInput
    _max?: StripeUserMaxOrderByAggregateInput
    _min?: StripeUserMinOrderByAggregateInput
  }

  export type StripeUserScalarWhereWithAggregatesInput = {
    AND?: StripeUserScalarWhereWithAggregatesInput | StripeUserScalarWhereWithAggregatesInput[]
    OR?: StripeUserScalarWhereWithAggregatesInput[]
    NOT?: StripeUserScalarWhereWithAggregatesInput | StripeUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StripeUser"> | string
    user_id?: StringWithAggregatesFilter<"StripeUser"> | string
    stripe_id?: StringWithAggregatesFilter<"StripeUser"> | string
    created_at?: DateTimeWithAggregatesFilter<"StripeUser"> | Date | string
    is_active?: BoolWithAggregatesFilter<"StripeUser"> | boolean
  }

  export type PromptFileWhereInput = {
    AND?: PromptFileWhereInput | PromptFileWhereInput[]
    OR?: PromptFileWhereInput[]
    NOT?: PromptFileWhereInput | PromptFileWhereInput[]
    id?: StringFilter<"PromptFile"> | string
    form_id?: StringFilter<"PromptFile"> | string
    created_at?: DateTimeFilter<"PromptFile"> | Date | string
    title?: StringFilter<"PromptFile"> | string
    extracted_text?: StringFilter<"PromptFile"> | string
    base64_content?: StringNullableFilter<"PromptFile"> | string | null
    url?: StringNullableFilter<"PromptFile"> | string | null
    form?: XOR<FormRelationFilter, FormWhereInput>
  }

  export type PromptFileOrderByWithRelationInput = {
    id?: SortOrder
    form_id?: SortOrder
    created_at?: SortOrder
    title?: SortOrder
    extracted_text?: SortOrder
    base64_content?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    form?: FormOrderByWithRelationInput
  }

  export type PromptFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    form_id?: string
    AND?: PromptFileWhereInput | PromptFileWhereInput[]
    OR?: PromptFileWhereInput[]
    NOT?: PromptFileWhereInput | PromptFileWhereInput[]
    created_at?: DateTimeFilter<"PromptFile"> | Date | string
    title?: StringFilter<"PromptFile"> | string
    extracted_text?: StringFilter<"PromptFile"> | string
    base64_content?: StringNullableFilter<"PromptFile"> | string | null
    url?: StringNullableFilter<"PromptFile"> | string | null
    form?: XOR<FormRelationFilter, FormWhereInput>
  }, "id" | "form_id">

  export type PromptFileOrderByWithAggregationInput = {
    id?: SortOrder
    form_id?: SortOrder
    created_at?: SortOrder
    title?: SortOrder
    extracted_text?: SortOrder
    base64_content?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    _count?: PromptFileCountOrderByAggregateInput
    _max?: PromptFileMaxOrderByAggregateInput
    _min?: PromptFileMinOrderByAggregateInput
  }

  export type PromptFileScalarWhereWithAggregatesInput = {
    AND?: PromptFileScalarWhereWithAggregatesInput | PromptFileScalarWhereWithAggregatesInput[]
    OR?: PromptFileScalarWhereWithAggregatesInput[]
    NOT?: PromptFileScalarWhereWithAggregatesInput | PromptFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PromptFile"> | string
    form_id?: StringWithAggregatesFilter<"PromptFile"> | string
    created_at?: DateTimeWithAggregatesFilter<"PromptFile"> | Date | string
    title?: StringWithAggregatesFilter<"PromptFile"> | string
    extracted_text?: StringWithAggregatesFilter<"PromptFile"> | string
    base64_content?: StringNullableWithAggregatesFilter<"PromptFile"> | string | null
    url?: StringNullableWithAggregatesFilter<"PromptFile"> | string | null
  }

  export type WebhookWhereInput = {
    AND?: WebhookWhereInput | WebhookWhereInput[]
    OR?: WebhookWhereInput[]
    NOT?: WebhookWhereInput | WebhookWhereInput[]
    id?: StringFilter<"Webhook"> | string
    form_id?: StringFilter<"Webhook"> | string
    url?: StringFilter<"Webhook"> | string
    method?: StringNullableFilter<"Webhook"> | string | null
    api_key?: StringNullableFilter<"Webhook"> | string | null
    api_key_header?: StringNullableFilter<"Webhook"> | string | null
    created_at?: DateTimeFilter<"Webhook"> | Date | string
    form?: XOR<FormRelationFilter, FormWhereInput>
  }

  export type WebhookOrderByWithRelationInput = {
    id?: SortOrder
    form_id?: SortOrder
    url?: SortOrder
    method?: SortOrderInput | SortOrder
    api_key?: SortOrderInput | SortOrder
    api_key_header?: SortOrderInput | SortOrder
    created_at?: SortOrder
    form?: FormOrderByWithRelationInput
  }

  export type WebhookWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    form_id?: string
    AND?: WebhookWhereInput | WebhookWhereInput[]
    OR?: WebhookWhereInput[]
    NOT?: WebhookWhereInput | WebhookWhereInput[]
    url?: StringFilter<"Webhook"> | string
    method?: StringNullableFilter<"Webhook"> | string | null
    api_key?: StringNullableFilter<"Webhook"> | string | null
    api_key_header?: StringNullableFilter<"Webhook"> | string | null
    created_at?: DateTimeFilter<"Webhook"> | Date | string
    form?: XOR<FormRelationFilter, FormWhereInput>
  }, "id" | "form_id">

  export type WebhookOrderByWithAggregationInput = {
    id?: SortOrder
    form_id?: SortOrder
    url?: SortOrder
    method?: SortOrderInput | SortOrder
    api_key?: SortOrderInput | SortOrder
    api_key_header?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: WebhookCountOrderByAggregateInput
    _max?: WebhookMaxOrderByAggregateInput
    _min?: WebhookMinOrderByAggregateInput
  }

  export type WebhookScalarWhereWithAggregatesInput = {
    AND?: WebhookScalarWhereWithAggregatesInput | WebhookScalarWhereWithAggregatesInput[]
    OR?: WebhookScalarWhereWithAggregatesInput[]
    NOT?: WebhookScalarWhereWithAggregatesInput | WebhookScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Webhook"> | string
    form_id?: StringWithAggregatesFilter<"Webhook"> | string
    url?: StringWithAggregatesFilter<"Webhook"> | string
    method?: StringNullableWithAggregatesFilter<"Webhook"> | string | null
    api_key?: StringNullableWithAggregatesFilter<"Webhook"> | string | null
    api_key_header?: StringNullableWithAggregatesFilter<"Webhook"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Webhook"> | Date | string
  }

  export type FigCollectionWhereInput = {
    AND?: FigCollectionWhereInput | FigCollectionWhereInput[]
    OR?: FigCollectionWhereInput[]
    NOT?: FigCollectionWhereInput | FigCollectionWhereInput[]
    id?: StringFilter<"FigCollection"> | string
    name?: StringFilter<"FigCollection"> | string
    prompt?: StringNullableFilter<"FigCollection"> | string | null
    created_at?: DateTimeFilter<"FigCollection"> | Date | string
    user_id?: StringFilter<"FigCollection"> | string
    fig_collection_file_id?: StringNullableFilter<"FigCollection"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    fig_collection_file?: XOR<FigCollectionFileNullableRelationFilter, FigCollectionFileWhereInput> | null
  }

  export type FigCollectionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    prompt?: SortOrderInput | SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    fig_collection_file_id?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    fig_collection_file?: FigCollectionFileOrderByWithRelationInput
  }

  export type FigCollectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    fig_collection_file_id?: string
    AND?: FigCollectionWhereInput | FigCollectionWhereInput[]
    OR?: FigCollectionWhereInput[]
    NOT?: FigCollectionWhereInput | FigCollectionWhereInput[]
    name?: StringFilter<"FigCollection"> | string
    prompt?: StringNullableFilter<"FigCollection"> | string | null
    created_at?: DateTimeFilter<"FigCollection"> | Date | string
    user_id?: StringFilter<"FigCollection"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    fig_collection_file?: XOR<FigCollectionFileNullableRelationFilter, FigCollectionFileWhereInput> | null
  }, "id" | "fig_collection_file_id">

  export type FigCollectionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    prompt?: SortOrderInput | SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    fig_collection_file_id?: SortOrderInput | SortOrder
    _count?: FigCollectionCountOrderByAggregateInput
    _max?: FigCollectionMaxOrderByAggregateInput
    _min?: FigCollectionMinOrderByAggregateInput
  }

  export type FigCollectionScalarWhereWithAggregatesInput = {
    AND?: FigCollectionScalarWhereWithAggregatesInput | FigCollectionScalarWhereWithAggregatesInput[]
    OR?: FigCollectionScalarWhereWithAggregatesInput[]
    NOT?: FigCollectionScalarWhereWithAggregatesInput | FigCollectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FigCollection"> | string
    name?: StringWithAggregatesFilter<"FigCollection"> | string
    prompt?: StringNullableWithAggregatesFilter<"FigCollection"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"FigCollection"> | Date | string
    user_id?: StringWithAggregatesFilter<"FigCollection"> | string
    fig_collection_file_id?: StringNullableWithAggregatesFilter<"FigCollection"> | string | null
  }

  export type FigCollectionFileWhereInput = {
    AND?: FigCollectionFileWhereInput | FigCollectionFileWhereInput[]
    OR?: FigCollectionFileWhereInput[]
    NOT?: FigCollectionFileWhereInput | FigCollectionFileWhereInput[]
    id?: StringFilter<"FigCollectionFile"> | string
    title?: StringFilter<"FigCollectionFile"> | string
    extracted_text?: StringFilter<"FigCollectionFile"> | string
    created_at?: DateTimeFilter<"FigCollectionFile"> | Date | string
    fig_collection_id?: StringNullableFilter<"FigCollectionFile"> | string | null
    fig_collection?: XOR<FigCollectionNullableRelationFilter, FigCollectionWhereInput> | null
  }

  export type FigCollectionFileOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    extracted_text?: SortOrder
    created_at?: SortOrder
    fig_collection_id?: SortOrderInput | SortOrder
    fig_collection?: FigCollectionOrderByWithRelationInput
  }

  export type FigCollectionFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    fig_collection_id?: string
    AND?: FigCollectionFileWhereInput | FigCollectionFileWhereInput[]
    OR?: FigCollectionFileWhereInput[]
    NOT?: FigCollectionFileWhereInput | FigCollectionFileWhereInput[]
    title?: StringFilter<"FigCollectionFile"> | string
    extracted_text?: StringFilter<"FigCollectionFile"> | string
    created_at?: DateTimeFilter<"FigCollectionFile"> | Date | string
    fig_collection?: XOR<FigCollectionNullableRelationFilter, FigCollectionWhereInput> | null
  }, "id" | "fig_collection_id">

  export type FigCollectionFileOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    extracted_text?: SortOrder
    created_at?: SortOrder
    fig_collection_id?: SortOrderInput | SortOrder
    _count?: FigCollectionFileCountOrderByAggregateInput
    _max?: FigCollectionFileMaxOrderByAggregateInput
    _min?: FigCollectionFileMinOrderByAggregateInput
  }

  export type FigCollectionFileScalarWhereWithAggregatesInput = {
    AND?: FigCollectionFileScalarWhereWithAggregatesInput | FigCollectionFileScalarWhereWithAggregatesInput[]
    OR?: FigCollectionFileScalarWhereWithAggregatesInput[]
    NOT?: FigCollectionFileScalarWhereWithAggregatesInput | FigCollectionFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FigCollectionFile"> | string
    title?: StringWithAggregatesFilter<"FigCollectionFile"> | string
    extracted_text?: StringWithAggregatesFilter<"FigCollectionFile"> | string
    created_at?: DateTimeWithAggregatesFilter<"FigCollectionFile"> | Date | string
    fig_collection_id?: StringNullableWithAggregatesFilter<"FigCollectionFile"> | string | null
  }

  export type APIKeyWhereInput = {
    AND?: APIKeyWhereInput | APIKeyWhereInput[]
    OR?: APIKeyWhereInput[]
    NOT?: APIKeyWhereInput | APIKeyWhereInput[]
    id?: StringFilter<"APIKey"> | string
    key?: StringFilter<"APIKey"> | string
    name?: StringFilter<"APIKey"> | string
    user_id?: StringFilter<"APIKey"> | string
    created_at?: DateTimeFilter<"APIKey"> | Date | string
    last_used?: DateTimeNullableFilter<"APIKey"> | Date | string | null
    expires_at?: DateTimeNullableFilter<"APIKey"> | Date | string | null
    is_active?: BoolFilter<"APIKey"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type APIKeyOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    last_used?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    is_active?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type APIKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: APIKeyWhereInput | APIKeyWhereInput[]
    OR?: APIKeyWhereInput[]
    NOT?: APIKeyWhereInput | APIKeyWhereInput[]
    name?: StringFilter<"APIKey"> | string
    user_id?: StringFilter<"APIKey"> | string
    created_at?: DateTimeFilter<"APIKey"> | Date | string
    last_used?: DateTimeNullableFilter<"APIKey"> | Date | string | null
    expires_at?: DateTimeNullableFilter<"APIKey"> | Date | string | null
    is_active?: BoolFilter<"APIKey"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "key">

  export type APIKeyOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    last_used?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    is_active?: SortOrder
    _count?: APIKeyCountOrderByAggregateInput
    _max?: APIKeyMaxOrderByAggregateInput
    _min?: APIKeyMinOrderByAggregateInput
  }

  export type APIKeyScalarWhereWithAggregatesInput = {
    AND?: APIKeyScalarWhereWithAggregatesInput | APIKeyScalarWhereWithAggregatesInput[]
    OR?: APIKeyScalarWhereWithAggregatesInput[]
    NOT?: APIKeyScalarWhereWithAggregatesInput | APIKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"APIKey"> | string
    key?: StringWithAggregatesFilter<"APIKey"> | string
    name?: StringWithAggregatesFilter<"APIKey"> | string
    user_id?: StringWithAggregatesFilter<"APIKey"> | string
    created_at?: DateTimeWithAggregatesFilter<"APIKey"> | Date | string
    last_used?: DateTimeNullableWithAggregatesFilter<"APIKey"> | Date | string | null
    expires_at?: DateTimeNullableWithAggregatesFilter<"APIKey"> | Date | string | null
    is_active?: BoolWithAggregatesFilter<"APIKey"> | boolean
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    Form?: FormCreateNestedManyWithoutUserInput
    PublishedForm?: PublishedFormCreateNestedManyWithoutUserInput
    stripe_user?: StripeUserCreateNestedOneWithoutUserInput
    APIKey?: APIKeyCreateNestedManyWithoutUserInput
    FigCollection?: FigCollectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    Form?: FormUncheckedCreateNestedManyWithoutUserInput
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutUserInput
    stripe_user?: StripeUserUncheckedCreateNestedOneWithoutUserInput
    APIKey?: APIKeyUncheckedCreateNestedManyWithoutUserInput
    FigCollection?: FigCollectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Form?: FormUpdateManyWithoutUserNestedInput
    PublishedForm?: PublishedFormUpdateManyWithoutUserNestedInput
    stripe_user?: StripeUserUpdateOneWithoutUserNestedInput
    APIKey?: APIKeyUpdateManyWithoutUserNestedInput
    FigCollection?: FigCollectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Form?: FormUncheckedUpdateManyWithoutUserNestedInput
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutUserNestedInput
    stripe_user?: StripeUserUncheckedUpdateOneWithoutUserNestedInput
    APIKey?: APIKeyUncheckedUpdateManyWithoutUserNestedInput
    FigCollection?: FigCollectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FormCreateInput = {
    id?: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    user: UserCreateNestedOneWithoutFormInput
    Field?: FieldCreateNestedManyWithoutFormInput
    Submission?: SubmissionCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileCreateNestedManyWithoutFormInput
    Webhook?: WebhookCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateInput = {
    id?: string
    user_id: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    Field?: FieldUncheckedCreateNestedManyWithoutFormInput
    Submission?: SubmissionUncheckedCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileUncheckedCreateNestedManyWithoutFormInput
    Webhook?: WebhookUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutFormNestedInput
    Field?: FieldUpdateManyWithoutFormNestedInput
    Submission?: SubmissionUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    Field?: FieldUncheckedUpdateManyWithoutFormNestedInput
    Submission?: SubmissionUncheckedUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUncheckedUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUncheckedUpdateOneWithoutFormNestedInput
  }

  export type FormCreateManyInput = {
    id?: string
    user_id: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
  }

  export type FormUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FieldCreateInput = {
    id?: string
    name: string
    label: string
    type: string
    description?: string | null
    required: boolean
    created_at?: Date | string
    order?: number | null
    form: FormCreateNestedOneWithoutFieldInput
    FieldOption?: FieldOptionCreateNestedManyWithoutFieldInput
  }

  export type FieldUncheckedCreateInput = {
    id?: string
    form_id: string
    name: string
    label: string
    type: string
    description?: string | null
    required: boolean
    created_at?: Date | string
    order?: number | null
    FieldOption?: FieldOptionUncheckedCreateNestedManyWithoutFieldInput
  }

  export type FieldUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    form?: FormUpdateOneRequiredWithoutFieldNestedInput
    FieldOption?: FieldOptionUpdateManyWithoutFieldNestedInput
  }

  export type FieldUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    FieldOption?: FieldOptionUncheckedUpdateManyWithoutFieldNestedInput
  }

  export type FieldCreateManyInput = {
    id?: string
    form_id: string
    name: string
    label: string
    type: string
    description?: string | null
    required: boolean
    created_at?: Date | string
    order?: number | null
  }

  export type FieldUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FieldUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FieldOptionCreateInput = {
    id?: string
    name: string
    created_at?: Date | string
    field: FieldCreateNestedOneWithoutFieldOptionInput
  }

  export type FieldOptionUncheckedCreateInput = {
    id?: string
    field_id: string
    name: string
    created_at?: Date | string
  }

  export type FieldOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    field?: FieldUpdateOneRequiredWithoutFieldOptionNestedInput
  }

  export type FieldOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    field_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldOptionCreateManyInput = {
    id?: string
    field_id: string
    name: string
    created_at?: Date | string
  }

  export type FieldOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    field_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateInput = {
    id?: string
    text?: string | null
    created_at?: Date | string
    form: FormCreateNestedOneWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateInput = {
    id?: string
    form_id: string
    text?: string | null
    created_at?: Date | string
  }

  export type SubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    form?: FormUpdateOneRequiredWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateManyInput = {
    id?: string
    form_id: string
    text?: string | null
    created_at?: Date | string
  }

  export type SubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedFormCreateInput = {
    id?: string
    created_at?: Date | string
    last_published_at?: Date | string | null
    encoded_content: string
    form: FormCreateNestedOneWithoutPublishedFormInput
    user: UserCreateNestedOneWithoutPublishedFormInput
  }

  export type PublishedFormUncheckedCreateInput = {
    id?: string
    form_id: string
    user_id: string
    created_at?: Date | string
    last_published_at?: Date | string | null
    encoded_content: string
  }

  export type PublishedFormUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    encoded_content?: StringFieldUpdateOperationsInput | string
    form?: FormUpdateOneRequiredWithoutPublishedFormNestedInput
    user?: UserUpdateOneRequiredWithoutPublishedFormNestedInput
  }

  export type PublishedFormUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    encoded_content?: StringFieldUpdateOperationsInput | string
  }

  export type PublishedFormCreateManyInput = {
    id?: string
    form_id: string
    user_id: string
    created_at?: Date | string
    last_published_at?: Date | string | null
    encoded_content: string
  }

  export type PublishedFormUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    encoded_content?: StringFieldUpdateOperationsInput | string
  }

  export type PublishedFormUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    encoded_content?: StringFieldUpdateOperationsInput | string
  }

  export type StripeUserCreateInput = {
    id?: string
    stripe_id: string
    created_at?: Date | string
    is_active?: boolean
    user: UserCreateNestedOneWithoutStripe_userInput
  }

  export type StripeUserUncheckedCreateInput = {
    id?: string
    user_id: string
    stripe_id: string
    created_at?: Date | string
    is_active?: boolean
  }

  export type StripeUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripe_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutStripe_userNestedInput
  }

  export type StripeUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    stripe_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StripeUserCreateManyInput = {
    id?: string
    user_id: string
    stripe_id: string
    created_at?: Date | string
    is_active?: boolean
  }

  export type StripeUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripe_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StripeUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    stripe_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PromptFileCreateInput = {
    id?: string
    created_at?: Date | string
    title: string
    extracted_text: string
    base64_content?: string | null
    url?: string | null
    form: FormCreateNestedOneWithoutPromptFileInput
  }

  export type PromptFileUncheckedCreateInput = {
    id?: string
    form_id: string
    created_at?: Date | string
    title: string
    extracted_text: string
    base64_content?: string | null
    url?: string | null
  }

  export type PromptFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    base64_content?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    form?: FormUpdateOneRequiredWithoutPromptFileNestedInput
  }

  export type PromptFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    base64_content?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromptFileCreateManyInput = {
    id?: string
    form_id: string
    created_at?: Date | string
    title: string
    extracted_text: string
    base64_content?: string | null
    url?: string | null
  }

  export type PromptFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    base64_content?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromptFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    base64_content?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookCreateInput = {
    id?: string
    url: string
    method?: string | null
    api_key?: string | null
    api_key_header?: string | null
    created_at?: Date | string
    form: FormCreateNestedOneWithoutWebhookInput
  }

  export type WebhookUncheckedCreateInput = {
    id?: string
    form_id: string
    url: string
    method?: string | null
    api_key?: string | null
    api_key_header?: string | null
    created_at?: Date | string
  }

  export type WebhookUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: NullableStringFieldUpdateOperationsInput | string | null
    api_key_header?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    form?: FormUpdateOneRequiredWithoutWebhookNestedInput
  }

  export type WebhookUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: NullableStringFieldUpdateOperationsInput | string | null
    api_key_header?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookCreateManyInput = {
    id?: string
    form_id: string
    url: string
    method?: string | null
    api_key?: string | null
    api_key_header?: string | null
    created_at?: Date | string
  }

  export type WebhookUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: NullableStringFieldUpdateOperationsInput | string | null
    api_key_header?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: NullableStringFieldUpdateOperationsInput | string | null
    api_key_header?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FigCollectionCreateInput = {
    id?: string
    name: string
    prompt?: string | null
    created_at?: Date | string
    fig_collection_file_id?: string | null
    user: UserCreateNestedOneWithoutFigCollectionInput
    fig_collection_file?: FigCollectionFileCreateNestedOneWithoutFig_collectionInput
  }

  export type FigCollectionUncheckedCreateInput = {
    id?: string
    name: string
    prompt?: string | null
    created_at?: Date | string
    user_id: string
    fig_collection_file_id?: string | null
    fig_collection_file?: FigCollectionFileUncheckedCreateNestedOneWithoutFig_collectionInput
  }

  export type FigCollectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fig_collection_file_id?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutFigCollectionNestedInput
    fig_collection_file?: FigCollectionFileUpdateOneWithoutFig_collectionNestedInput
  }

  export type FigCollectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    fig_collection_file_id?: NullableStringFieldUpdateOperationsInput | string | null
    fig_collection_file?: FigCollectionFileUncheckedUpdateOneWithoutFig_collectionNestedInput
  }

  export type FigCollectionCreateManyInput = {
    id?: string
    name: string
    prompt?: string | null
    created_at?: Date | string
    user_id: string
    fig_collection_file_id?: string | null
  }

  export type FigCollectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fig_collection_file_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FigCollectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    fig_collection_file_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FigCollectionFileCreateInput = {
    id?: string
    title: string
    extracted_text: string
    created_at?: Date | string
    fig_collection?: FigCollectionCreateNestedOneWithoutFig_collection_fileInput
  }

  export type FigCollectionFileUncheckedCreateInput = {
    id?: string
    title: string
    extracted_text: string
    created_at?: Date | string
    fig_collection_id?: string | null
  }

  export type FigCollectionFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fig_collection?: FigCollectionUpdateOneWithoutFig_collection_fileNestedInput
  }

  export type FigCollectionFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fig_collection_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FigCollectionFileCreateManyInput = {
    id?: string
    title: string
    extracted_text: string
    created_at?: Date | string
    fig_collection_id?: string | null
  }

  export type FigCollectionFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FigCollectionFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fig_collection_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type APIKeyCreateInput = {
    id?: string
    key?: string
    name: string
    created_at?: Date | string
    last_used?: Date | string | null
    expires_at?: Date | string | null
    is_active?: boolean
    user: UserCreateNestedOneWithoutAPIKeyInput
  }

  export type APIKeyUncheckedCreateInput = {
    id?: string
    key?: string
    name: string
    user_id: string
    created_at?: Date | string
    last_used?: Date | string | null
    expires_at?: Date | string | null
    is_active?: boolean
  }

  export type APIKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutAPIKeyNestedInput
  }

  export type APIKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type APIKeyCreateManyInput = {
    id?: string
    key?: string
    name: string
    user_id: string
    created_at?: Date | string
    last_used?: Date | string | null
    expires_at?: Date | string | null
    is_active?: boolean
  }

  export type APIKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type APIKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FormListRelationFilter = {
    every?: FormWhereInput
    some?: FormWhereInput
    none?: FormWhereInput
  }

  export type PublishedFormListRelationFilter = {
    every?: PublishedFormWhereInput
    some?: PublishedFormWhereInput
    none?: PublishedFormWhereInput
  }

  export type StripeUserNullableRelationFilter = {
    is?: StripeUserWhereInput | null
    isNot?: StripeUserWhereInput | null
  }

  export type APIKeyListRelationFilter = {
    every?: APIKeyWhereInput
    some?: APIKeyWhereInput
    none?: APIKeyWhereInput
  }

  export type FigCollectionListRelationFilter = {
    every?: FigCollectionWhereInput
    some?: FigCollectionWhereInput
    none?: FigCollectionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FormOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PublishedFormOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type APIKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FigCollectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tier_id?: SortOrder
    logo_url?: SortOrder
    created_at?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tier_id?: SortOrder
    logo_url?: SortOrder
    created_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tier_id?: SortOrder
    logo_url?: SortOrder
    created_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FieldListRelationFilter = {
    every?: FieldWhereInput
    some?: FieldWhereInput
    none?: FieldWhereInput
  }

  export type SubmissionListRelationFilter = {
    every?: SubmissionWhereInput
    some?: SubmissionWhereInput
    none?: SubmissionWhereInput
  }

  export type PromptFileListRelationFilter = {
    every?: PromptFileWhereInput
    some?: PromptFileWhereInput
    none?: PromptFileWhereInput
  }

  export type WebhookNullableRelationFilter = {
    is?: WebhookWhereInput | null
    isNot?: WebhookWhereInput | null
  }

  export type FieldOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PromptFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FormCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    prompt?: SortOrder
    file?: SortOrder
    theme_color?: SortOrder
    created_at?: SortOrder
    webhook_id?: SortOrder
  }

  export type FormMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    prompt?: SortOrder
    file?: SortOrder
    theme_color?: SortOrder
    created_at?: SortOrder
    webhook_id?: SortOrder
  }

  export type FormMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    prompt?: SortOrder
    file?: SortOrder
    theme_color?: SortOrder
    created_at?: SortOrder
    webhook_id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FormRelationFilter = {
    is?: FormWhereInput
    isNot?: FormWhereInput
  }

  export type FieldOptionListRelationFilter = {
    every?: FieldOptionWhereInput
    some?: FieldOptionWhereInput
    none?: FieldOptionWhereInput
  }

  export type FieldOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FieldCountOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    type?: SortOrder
    description?: SortOrder
    required?: SortOrder
    created_at?: SortOrder
    order?: SortOrder
  }

  export type FieldAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type FieldMaxOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    type?: SortOrder
    description?: SortOrder
    required?: SortOrder
    created_at?: SortOrder
    order?: SortOrder
  }

  export type FieldMinOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    type?: SortOrder
    description?: SortOrder
    required?: SortOrder
    created_at?: SortOrder
    order?: SortOrder
  }

  export type FieldSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FieldRelationFilter = {
    is?: FieldWhereInput
    isNot?: FieldWhereInput
  }

  export type FieldOptionCountOrderByAggregateInput = {
    id?: SortOrder
    field_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type FieldOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    field_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type FieldOptionMinOrderByAggregateInput = {
    id?: SortOrder
    field_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type SubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    text?: SortOrder
    created_at?: SortOrder
  }

  export type SubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    text?: SortOrder
    created_at?: SortOrder
  }

  export type SubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    text?: SortOrder
    created_at?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PublishedFormCountOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    last_published_at?: SortOrder
    encoded_content?: SortOrder
  }

  export type PublishedFormMaxOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    last_published_at?: SortOrder
    encoded_content?: SortOrder
  }

  export type PublishedFormMinOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    last_published_at?: SortOrder
    encoded_content?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StripeUserCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    stripe_id?: SortOrder
    created_at?: SortOrder
    is_active?: SortOrder
  }

  export type StripeUserMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    stripe_id?: SortOrder
    created_at?: SortOrder
    is_active?: SortOrder
  }

  export type StripeUserMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    stripe_id?: SortOrder
    created_at?: SortOrder
    is_active?: SortOrder
  }

  export type PromptFileCountOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    created_at?: SortOrder
    title?: SortOrder
    extracted_text?: SortOrder
    base64_content?: SortOrder
    url?: SortOrder
  }

  export type PromptFileMaxOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    created_at?: SortOrder
    title?: SortOrder
    extracted_text?: SortOrder
    base64_content?: SortOrder
    url?: SortOrder
  }

  export type PromptFileMinOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    created_at?: SortOrder
    title?: SortOrder
    extracted_text?: SortOrder
    base64_content?: SortOrder
    url?: SortOrder
  }

  export type WebhookCountOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    url?: SortOrder
    method?: SortOrder
    api_key?: SortOrder
    api_key_header?: SortOrder
    created_at?: SortOrder
  }

  export type WebhookMaxOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    url?: SortOrder
    method?: SortOrder
    api_key?: SortOrder
    api_key_header?: SortOrder
    created_at?: SortOrder
  }

  export type WebhookMinOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    url?: SortOrder
    method?: SortOrder
    api_key?: SortOrder
    api_key_header?: SortOrder
    created_at?: SortOrder
  }

  export type FigCollectionFileNullableRelationFilter = {
    is?: FigCollectionFileWhereInput | null
    isNot?: FigCollectionFileWhereInput | null
  }

  export type FigCollectionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    prompt?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    fig_collection_file_id?: SortOrder
  }

  export type FigCollectionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    prompt?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    fig_collection_file_id?: SortOrder
  }

  export type FigCollectionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    prompt?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    fig_collection_file_id?: SortOrder
  }

  export type FigCollectionNullableRelationFilter = {
    is?: FigCollectionWhereInput | null
    isNot?: FigCollectionWhereInput | null
  }

  export type FigCollectionFileCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    extracted_text?: SortOrder
    created_at?: SortOrder
    fig_collection_id?: SortOrder
  }

  export type FigCollectionFileMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    extracted_text?: SortOrder
    created_at?: SortOrder
    fig_collection_id?: SortOrder
  }

  export type FigCollectionFileMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    extracted_text?: SortOrder
    created_at?: SortOrder
    fig_collection_id?: SortOrder
  }

  export type APIKeyCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    last_used?: SortOrder
    expires_at?: SortOrder
    is_active?: SortOrder
  }

  export type APIKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    last_used?: SortOrder
    expires_at?: SortOrder
    is_active?: SortOrder
  }

  export type APIKeyMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    last_used?: SortOrder
    expires_at?: SortOrder
    is_active?: SortOrder
  }

  export type FormCreateNestedManyWithoutUserInput = {
    create?: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput> | FormCreateWithoutUserInput[] | FormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FormCreateOrConnectWithoutUserInput | FormCreateOrConnectWithoutUserInput[]
    createMany?: FormCreateManyUserInputEnvelope
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
  }

  export type PublishedFormCreateNestedManyWithoutUserInput = {
    create?: XOR<PublishedFormCreateWithoutUserInput, PublishedFormUncheckedCreateWithoutUserInput> | PublishedFormCreateWithoutUserInput[] | PublishedFormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PublishedFormCreateOrConnectWithoutUserInput | PublishedFormCreateOrConnectWithoutUserInput[]
    createMany?: PublishedFormCreateManyUserInputEnvelope
    connect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
  }

  export type StripeUserCreateNestedOneWithoutUserInput = {
    create?: XOR<StripeUserCreateWithoutUserInput, StripeUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: StripeUserCreateOrConnectWithoutUserInput
    connect?: StripeUserWhereUniqueInput
  }

  export type APIKeyCreateNestedManyWithoutUserInput = {
    create?: XOR<APIKeyCreateWithoutUserInput, APIKeyUncheckedCreateWithoutUserInput> | APIKeyCreateWithoutUserInput[] | APIKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: APIKeyCreateOrConnectWithoutUserInput | APIKeyCreateOrConnectWithoutUserInput[]
    createMany?: APIKeyCreateManyUserInputEnvelope
    connect?: APIKeyWhereUniqueInput | APIKeyWhereUniqueInput[]
  }

  export type FigCollectionCreateNestedManyWithoutUserInput = {
    create?: XOR<FigCollectionCreateWithoutUserInput, FigCollectionUncheckedCreateWithoutUserInput> | FigCollectionCreateWithoutUserInput[] | FigCollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FigCollectionCreateOrConnectWithoutUserInput | FigCollectionCreateOrConnectWithoutUserInput[]
    createMany?: FigCollectionCreateManyUserInputEnvelope
    connect?: FigCollectionWhereUniqueInput | FigCollectionWhereUniqueInput[]
  }

  export type FormUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput> | FormCreateWithoutUserInput[] | FormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FormCreateOrConnectWithoutUserInput | FormCreateOrConnectWithoutUserInput[]
    createMany?: FormCreateManyUserInputEnvelope
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
  }

  export type PublishedFormUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PublishedFormCreateWithoutUserInput, PublishedFormUncheckedCreateWithoutUserInput> | PublishedFormCreateWithoutUserInput[] | PublishedFormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PublishedFormCreateOrConnectWithoutUserInput | PublishedFormCreateOrConnectWithoutUserInput[]
    createMany?: PublishedFormCreateManyUserInputEnvelope
    connect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
  }

  export type StripeUserUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StripeUserCreateWithoutUserInput, StripeUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: StripeUserCreateOrConnectWithoutUserInput
    connect?: StripeUserWhereUniqueInput
  }

  export type APIKeyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<APIKeyCreateWithoutUserInput, APIKeyUncheckedCreateWithoutUserInput> | APIKeyCreateWithoutUserInput[] | APIKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: APIKeyCreateOrConnectWithoutUserInput | APIKeyCreateOrConnectWithoutUserInput[]
    createMany?: APIKeyCreateManyUserInputEnvelope
    connect?: APIKeyWhereUniqueInput | APIKeyWhereUniqueInput[]
  }

  export type FigCollectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FigCollectionCreateWithoutUserInput, FigCollectionUncheckedCreateWithoutUserInput> | FigCollectionCreateWithoutUserInput[] | FigCollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FigCollectionCreateOrConnectWithoutUserInput | FigCollectionCreateOrConnectWithoutUserInput[]
    createMany?: FigCollectionCreateManyUserInputEnvelope
    connect?: FigCollectionWhereUniqueInput | FigCollectionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FormUpdateManyWithoutUserNestedInput = {
    create?: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput> | FormCreateWithoutUserInput[] | FormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FormCreateOrConnectWithoutUserInput | FormCreateOrConnectWithoutUserInput[]
    upsert?: FormUpsertWithWhereUniqueWithoutUserInput | FormUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FormCreateManyUserInputEnvelope
    set?: FormWhereUniqueInput | FormWhereUniqueInput[]
    disconnect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    delete?: FormWhereUniqueInput | FormWhereUniqueInput[]
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    update?: FormUpdateWithWhereUniqueWithoutUserInput | FormUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FormUpdateManyWithWhereWithoutUserInput | FormUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FormScalarWhereInput | FormScalarWhereInput[]
  }

  export type PublishedFormUpdateManyWithoutUserNestedInput = {
    create?: XOR<PublishedFormCreateWithoutUserInput, PublishedFormUncheckedCreateWithoutUserInput> | PublishedFormCreateWithoutUserInput[] | PublishedFormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PublishedFormCreateOrConnectWithoutUserInput | PublishedFormCreateOrConnectWithoutUserInput[]
    upsert?: PublishedFormUpsertWithWhereUniqueWithoutUserInput | PublishedFormUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PublishedFormCreateManyUserInputEnvelope
    set?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    disconnect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    delete?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    connect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    update?: PublishedFormUpdateWithWhereUniqueWithoutUserInput | PublishedFormUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PublishedFormUpdateManyWithWhereWithoutUserInput | PublishedFormUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PublishedFormScalarWhereInput | PublishedFormScalarWhereInput[]
  }

  export type StripeUserUpdateOneWithoutUserNestedInput = {
    create?: XOR<StripeUserCreateWithoutUserInput, StripeUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: StripeUserCreateOrConnectWithoutUserInput
    upsert?: StripeUserUpsertWithoutUserInput
    disconnect?: StripeUserWhereInput | boolean
    delete?: StripeUserWhereInput | boolean
    connect?: StripeUserWhereUniqueInput
    update?: XOR<XOR<StripeUserUpdateToOneWithWhereWithoutUserInput, StripeUserUpdateWithoutUserInput>, StripeUserUncheckedUpdateWithoutUserInput>
  }

  export type APIKeyUpdateManyWithoutUserNestedInput = {
    create?: XOR<APIKeyCreateWithoutUserInput, APIKeyUncheckedCreateWithoutUserInput> | APIKeyCreateWithoutUserInput[] | APIKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: APIKeyCreateOrConnectWithoutUserInput | APIKeyCreateOrConnectWithoutUserInput[]
    upsert?: APIKeyUpsertWithWhereUniqueWithoutUserInput | APIKeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: APIKeyCreateManyUserInputEnvelope
    set?: APIKeyWhereUniqueInput | APIKeyWhereUniqueInput[]
    disconnect?: APIKeyWhereUniqueInput | APIKeyWhereUniqueInput[]
    delete?: APIKeyWhereUniqueInput | APIKeyWhereUniqueInput[]
    connect?: APIKeyWhereUniqueInput | APIKeyWhereUniqueInput[]
    update?: APIKeyUpdateWithWhereUniqueWithoutUserInput | APIKeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: APIKeyUpdateManyWithWhereWithoutUserInput | APIKeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: APIKeyScalarWhereInput | APIKeyScalarWhereInput[]
  }

  export type FigCollectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<FigCollectionCreateWithoutUserInput, FigCollectionUncheckedCreateWithoutUserInput> | FigCollectionCreateWithoutUserInput[] | FigCollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FigCollectionCreateOrConnectWithoutUserInput | FigCollectionCreateOrConnectWithoutUserInput[]
    upsert?: FigCollectionUpsertWithWhereUniqueWithoutUserInput | FigCollectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FigCollectionCreateManyUserInputEnvelope
    set?: FigCollectionWhereUniqueInput | FigCollectionWhereUniqueInput[]
    disconnect?: FigCollectionWhereUniqueInput | FigCollectionWhereUniqueInput[]
    delete?: FigCollectionWhereUniqueInput | FigCollectionWhereUniqueInput[]
    connect?: FigCollectionWhereUniqueInput | FigCollectionWhereUniqueInput[]
    update?: FigCollectionUpdateWithWhereUniqueWithoutUserInput | FigCollectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FigCollectionUpdateManyWithWhereWithoutUserInput | FigCollectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FigCollectionScalarWhereInput | FigCollectionScalarWhereInput[]
  }

  export type FormUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput> | FormCreateWithoutUserInput[] | FormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FormCreateOrConnectWithoutUserInput | FormCreateOrConnectWithoutUserInput[]
    upsert?: FormUpsertWithWhereUniqueWithoutUserInput | FormUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FormCreateManyUserInputEnvelope
    set?: FormWhereUniqueInput | FormWhereUniqueInput[]
    disconnect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    delete?: FormWhereUniqueInput | FormWhereUniqueInput[]
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    update?: FormUpdateWithWhereUniqueWithoutUserInput | FormUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FormUpdateManyWithWhereWithoutUserInput | FormUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FormScalarWhereInput | FormScalarWhereInput[]
  }

  export type PublishedFormUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PublishedFormCreateWithoutUserInput, PublishedFormUncheckedCreateWithoutUserInput> | PublishedFormCreateWithoutUserInput[] | PublishedFormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PublishedFormCreateOrConnectWithoutUserInput | PublishedFormCreateOrConnectWithoutUserInput[]
    upsert?: PublishedFormUpsertWithWhereUniqueWithoutUserInput | PublishedFormUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PublishedFormCreateManyUserInputEnvelope
    set?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    disconnect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    delete?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    connect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    update?: PublishedFormUpdateWithWhereUniqueWithoutUserInput | PublishedFormUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PublishedFormUpdateManyWithWhereWithoutUserInput | PublishedFormUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PublishedFormScalarWhereInput | PublishedFormScalarWhereInput[]
  }

  export type StripeUserUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StripeUserCreateWithoutUserInput, StripeUserUncheckedCreateWithoutUserInput>
    connectOrCreate?: StripeUserCreateOrConnectWithoutUserInput
    upsert?: StripeUserUpsertWithoutUserInput
    disconnect?: StripeUserWhereInput | boolean
    delete?: StripeUserWhereInput | boolean
    connect?: StripeUserWhereUniqueInput
    update?: XOR<XOR<StripeUserUpdateToOneWithWhereWithoutUserInput, StripeUserUpdateWithoutUserInput>, StripeUserUncheckedUpdateWithoutUserInput>
  }

  export type APIKeyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<APIKeyCreateWithoutUserInput, APIKeyUncheckedCreateWithoutUserInput> | APIKeyCreateWithoutUserInput[] | APIKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: APIKeyCreateOrConnectWithoutUserInput | APIKeyCreateOrConnectWithoutUserInput[]
    upsert?: APIKeyUpsertWithWhereUniqueWithoutUserInput | APIKeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: APIKeyCreateManyUserInputEnvelope
    set?: APIKeyWhereUniqueInput | APIKeyWhereUniqueInput[]
    disconnect?: APIKeyWhereUniqueInput | APIKeyWhereUniqueInput[]
    delete?: APIKeyWhereUniqueInput | APIKeyWhereUniqueInput[]
    connect?: APIKeyWhereUniqueInput | APIKeyWhereUniqueInput[]
    update?: APIKeyUpdateWithWhereUniqueWithoutUserInput | APIKeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: APIKeyUpdateManyWithWhereWithoutUserInput | APIKeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: APIKeyScalarWhereInput | APIKeyScalarWhereInput[]
  }

  export type FigCollectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FigCollectionCreateWithoutUserInput, FigCollectionUncheckedCreateWithoutUserInput> | FigCollectionCreateWithoutUserInput[] | FigCollectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FigCollectionCreateOrConnectWithoutUserInput | FigCollectionCreateOrConnectWithoutUserInput[]
    upsert?: FigCollectionUpsertWithWhereUniqueWithoutUserInput | FigCollectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FigCollectionCreateManyUserInputEnvelope
    set?: FigCollectionWhereUniqueInput | FigCollectionWhereUniqueInput[]
    disconnect?: FigCollectionWhereUniqueInput | FigCollectionWhereUniqueInput[]
    delete?: FigCollectionWhereUniqueInput | FigCollectionWhereUniqueInput[]
    connect?: FigCollectionWhereUniqueInput | FigCollectionWhereUniqueInput[]
    update?: FigCollectionUpdateWithWhereUniqueWithoutUserInput | FigCollectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FigCollectionUpdateManyWithWhereWithoutUserInput | FigCollectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FigCollectionScalarWhereInput | FigCollectionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFormInput = {
    create?: XOR<UserCreateWithoutFormInput, UserUncheckedCreateWithoutFormInput>
    connectOrCreate?: UserCreateOrConnectWithoutFormInput
    connect?: UserWhereUniqueInput
  }

  export type FieldCreateNestedManyWithoutFormInput = {
    create?: XOR<FieldCreateWithoutFormInput, FieldUncheckedCreateWithoutFormInput> | FieldCreateWithoutFormInput[] | FieldUncheckedCreateWithoutFormInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutFormInput | FieldCreateOrConnectWithoutFormInput[]
    createMany?: FieldCreateManyFormInputEnvelope
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutFormInput = {
    create?: XOR<SubmissionCreateWithoutFormInput, SubmissionUncheckedCreateWithoutFormInput> | SubmissionCreateWithoutFormInput[] | SubmissionUncheckedCreateWithoutFormInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutFormInput | SubmissionCreateOrConnectWithoutFormInput[]
    createMany?: SubmissionCreateManyFormInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type PublishedFormCreateNestedManyWithoutFormInput = {
    create?: XOR<PublishedFormCreateWithoutFormInput, PublishedFormUncheckedCreateWithoutFormInput> | PublishedFormCreateWithoutFormInput[] | PublishedFormUncheckedCreateWithoutFormInput[]
    connectOrCreate?: PublishedFormCreateOrConnectWithoutFormInput | PublishedFormCreateOrConnectWithoutFormInput[]
    createMany?: PublishedFormCreateManyFormInputEnvelope
    connect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
  }

  export type PromptFileCreateNestedManyWithoutFormInput = {
    create?: XOR<PromptFileCreateWithoutFormInput, PromptFileUncheckedCreateWithoutFormInput> | PromptFileCreateWithoutFormInput[] | PromptFileUncheckedCreateWithoutFormInput[]
    connectOrCreate?: PromptFileCreateOrConnectWithoutFormInput | PromptFileCreateOrConnectWithoutFormInput[]
    createMany?: PromptFileCreateManyFormInputEnvelope
    connect?: PromptFileWhereUniqueInput | PromptFileWhereUniqueInput[]
  }

  export type WebhookCreateNestedOneWithoutFormInput = {
    create?: XOR<WebhookCreateWithoutFormInput, WebhookUncheckedCreateWithoutFormInput>
    connectOrCreate?: WebhookCreateOrConnectWithoutFormInput
    connect?: WebhookWhereUniqueInput
  }

  export type FieldUncheckedCreateNestedManyWithoutFormInput = {
    create?: XOR<FieldCreateWithoutFormInput, FieldUncheckedCreateWithoutFormInput> | FieldCreateWithoutFormInput[] | FieldUncheckedCreateWithoutFormInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutFormInput | FieldCreateOrConnectWithoutFormInput[]
    createMany?: FieldCreateManyFormInputEnvelope
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutFormInput = {
    create?: XOR<SubmissionCreateWithoutFormInput, SubmissionUncheckedCreateWithoutFormInput> | SubmissionCreateWithoutFormInput[] | SubmissionUncheckedCreateWithoutFormInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutFormInput | SubmissionCreateOrConnectWithoutFormInput[]
    createMany?: SubmissionCreateManyFormInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type PublishedFormUncheckedCreateNestedManyWithoutFormInput = {
    create?: XOR<PublishedFormCreateWithoutFormInput, PublishedFormUncheckedCreateWithoutFormInput> | PublishedFormCreateWithoutFormInput[] | PublishedFormUncheckedCreateWithoutFormInput[]
    connectOrCreate?: PublishedFormCreateOrConnectWithoutFormInput | PublishedFormCreateOrConnectWithoutFormInput[]
    createMany?: PublishedFormCreateManyFormInputEnvelope
    connect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
  }

  export type PromptFileUncheckedCreateNestedManyWithoutFormInput = {
    create?: XOR<PromptFileCreateWithoutFormInput, PromptFileUncheckedCreateWithoutFormInput> | PromptFileCreateWithoutFormInput[] | PromptFileUncheckedCreateWithoutFormInput[]
    connectOrCreate?: PromptFileCreateOrConnectWithoutFormInput | PromptFileCreateOrConnectWithoutFormInput[]
    createMany?: PromptFileCreateManyFormInputEnvelope
    connect?: PromptFileWhereUniqueInput | PromptFileWhereUniqueInput[]
  }

  export type WebhookUncheckedCreateNestedOneWithoutFormInput = {
    create?: XOR<WebhookCreateWithoutFormInput, WebhookUncheckedCreateWithoutFormInput>
    connectOrCreate?: WebhookCreateOrConnectWithoutFormInput
    connect?: WebhookWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFormNestedInput = {
    create?: XOR<UserCreateWithoutFormInput, UserUncheckedCreateWithoutFormInput>
    connectOrCreate?: UserCreateOrConnectWithoutFormInput
    upsert?: UserUpsertWithoutFormInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFormInput, UserUpdateWithoutFormInput>, UserUncheckedUpdateWithoutFormInput>
  }

  export type FieldUpdateManyWithoutFormNestedInput = {
    create?: XOR<FieldCreateWithoutFormInput, FieldUncheckedCreateWithoutFormInput> | FieldCreateWithoutFormInput[] | FieldUncheckedCreateWithoutFormInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutFormInput | FieldCreateOrConnectWithoutFormInput[]
    upsert?: FieldUpsertWithWhereUniqueWithoutFormInput | FieldUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: FieldCreateManyFormInputEnvelope
    set?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    disconnect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    delete?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    update?: FieldUpdateWithWhereUniqueWithoutFormInput | FieldUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: FieldUpdateManyWithWhereWithoutFormInput | FieldUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: FieldScalarWhereInput | FieldScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutFormNestedInput = {
    create?: XOR<SubmissionCreateWithoutFormInput, SubmissionUncheckedCreateWithoutFormInput> | SubmissionCreateWithoutFormInput[] | SubmissionUncheckedCreateWithoutFormInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutFormInput | SubmissionCreateOrConnectWithoutFormInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutFormInput | SubmissionUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: SubmissionCreateManyFormInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutFormInput | SubmissionUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutFormInput | SubmissionUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type PublishedFormUpdateManyWithoutFormNestedInput = {
    create?: XOR<PublishedFormCreateWithoutFormInput, PublishedFormUncheckedCreateWithoutFormInput> | PublishedFormCreateWithoutFormInput[] | PublishedFormUncheckedCreateWithoutFormInput[]
    connectOrCreate?: PublishedFormCreateOrConnectWithoutFormInput | PublishedFormCreateOrConnectWithoutFormInput[]
    upsert?: PublishedFormUpsertWithWhereUniqueWithoutFormInput | PublishedFormUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: PublishedFormCreateManyFormInputEnvelope
    set?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    disconnect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    delete?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    connect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    update?: PublishedFormUpdateWithWhereUniqueWithoutFormInput | PublishedFormUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: PublishedFormUpdateManyWithWhereWithoutFormInput | PublishedFormUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: PublishedFormScalarWhereInput | PublishedFormScalarWhereInput[]
  }

  export type PromptFileUpdateManyWithoutFormNestedInput = {
    create?: XOR<PromptFileCreateWithoutFormInput, PromptFileUncheckedCreateWithoutFormInput> | PromptFileCreateWithoutFormInput[] | PromptFileUncheckedCreateWithoutFormInput[]
    connectOrCreate?: PromptFileCreateOrConnectWithoutFormInput | PromptFileCreateOrConnectWithoutFormInput[]
    upsert?: PromptFileUpsertWithWhereUniqueWithoutFormInput | PromptFileUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: PromptFileCreateManyFormInputEnvelope
    set?: PromptFileWhereUniqueInput | PromptFileWhereUniqueInput[]
    disconnect?: PromptFileWhereUniqueInput | PromptFileWhereUniqueInput[]
    delete?: PromptFileWhereUniqueInput | PromptFileWhereUniqueInput[]
    connect?: PromptFileWhereUniqueInput | PromptFileWhereUniqueInput[]
    update?: PromptFileUpdateWithWhereUniqueWithoutFormInput | PromptFileUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: PromptFileUpdateManyWithWhereWithoutFormInput | PromptFileUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: PromptFileScalarWhereInput | PromptFileScalarWhereInput[]
  }

  export type WebhookUpdateOneWithoutFormNestedInput = {
    create?: XOR<WebhookCreateWithoutFormInput, WebhookUncheckedCreateWithoutFormInput>
    connectOrCreate?: WebhookCreateOrConnectWithoutFormInput
    upsert?: WebhookUpsertWithoutFormInput
    disconnect?: WebhookWhereInput | boolean
    delete?: WebhookWhereInput | boolean
    connect?: WebhookWhereUniqueInput
    update?: XOR<XOR<WebhookUpdateToOneWithWhereWithoutFormInput, WebhookUpdateWithoutFormInput>, WebhookUncheckedUpdateWithoutFormInput>
  }

  export type FieldUncheckedUpdateManyWithoutFormNestedInput = {
    create?: XOR<FieldCreateWithoutFormInput, FieldUncheckedCreateWithoutFormInput> | FieldCreateWithoutFormInput[] | FieldUncheckedCreateWithoutFormInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutFormInput | FieldCreateOrConnectWithoutFormInput[]
    upsert?: FieldUpsertWithWhereUniqueWithoutFormInput | FieldUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: FieldCreateManyFormInputEnvelope
    set?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    disconnect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    delete?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    update?: FieldUpdateWithWhereUniqueWithoutFormInput | FieldUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: FieldUpdateManyWithWhereWithoutFormInput | FieldUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: FieldScalarWhereInput | FieldScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutFormNestedInput = {
    create?: XOR<SubmissionCreateWithoutFormInput, SubmissionUncheckedCreateWithoutFormInput> | SubmissionCreateWithoutFormInput[] | SubmissionUncheckedCreateWithoutFormInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutFormInput | SubmissionCreateOrConnectWithoutFormInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutFormInput | SubmissionUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: SubmissionCreateManyFormInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutFormInput | SubmissionUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutFormInput | SubmissionUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type PublishedFormUncheckedUpdateManyWithoutFormNestedInput = {
    create?: XOR<PublishedFormCreateWithoutFormInput, PublishedFormUncheckedCreateWithoutFormInput> | PublishedFormCreateWithoutFormInput[] | PublishedFormUncheckedCreateWithoutFormInput[]
    connectOrCreate?: PublishedFormCreateOrConnectWithoutFormInput | PublishedFormCreateOrConnectWithoutFormInput[]
    upsert?: PublishedFormUpsertWithWhereUniqueWithoutFormInput | PublishedFormUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: PublishedFormCreateManyFormInputEnvelope
    set?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    disconnect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    delete?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    connect?: PublishedFormWhereUniqueInput | PublishedFormWhereUniqueInput[]
    update?: PublishedFormUpdateWithWhereUniqueWithoutFormInput | PublishedFormUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: PublishedFormUpdateManyWithWhereWithoutFormInput | PublishedFormUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: PublishedFormScalarWhereInput | PublishedFormScalarWhereInput[]
  }

  export type PromptFileUncheckedUpdateManyWithoutFormNestedInput = {
    create?: XOR<PromptFileCreateWithoutFormInput, PromptFileUncheckedCreateWithoutFormInput> | PromptFileCreateWithoutFormInput[] | PromptFileUncheckedCreateWithoutFormInput[]
    connectOrCreate?: PromptFileCreateOrConnectWithoutFormInput | PromptFileCreateOrConnectWithoutFormInput[]
    upsert?: PromptFileUpsertWithWhereUniqueWithoutFormInput | PromptFileUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: PromptFileCreateManyFormInputEnvelope
    set?: PromptFileWhereUniqueInput | PromptFileWhereUniqueInput[]
    disconnect?: PromptFileWhereUniqueInput | PromptFileWhereUniqueInput[]
    delete?: PromptFileWhereUniqueInput | PromptFileWhereUniqueInput[]
    connect?: PromptFileWhereUniqueInput | PromptFileWhereUniqueInput[]
    update?: PromptFileUpdateWithWhereUniqueWithoutFormInput | PromptFileUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: PromptFileUpdateManyWithWhereWithoutFormInput | PromptFileUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: PromptFileScalarWhereInput | PromptFileScalarWhereInput[]
  }

  export type WebhookUncheckedUpdateOneWithoutFormNestedInput = {
    create?: XOR<WebhookCreateWithoutFormInput, WebhookUncheckedCreateWithoutFormInput>
    connectOrCreate?: WebhookCreateOrConnectWithoutFormInput
    upsert?: WebhookUpsertWithoutFormInput
    disconnect?: WebhookWhereInput | boolean
    delete?: WebhookWhereInput | boolean
    connect?: WebhookWhereUniqueInput
    update?: XOR<XOR<WebhookUpdateToOneWithWhereWithoutFormInput, WebhookUpdateWithoutFormInput>, WebhookUncheckedUpdateWithoutFormInput>
  }

  export type FormCreateNestedOneWithoutFieldInput = {
    create?: XOR<FormCreateWithoutFieldInput, FormUncheckedCreateWithoutFieldInput>
    connectOrCreate?: FormCreateOrConnectWithoutFieldInput
    connect?: FormWhereUniqueInput
  }

  export type FieldOptionCreateNestedManyWithoutFieldInput = {
    create?: XOR<FieldOptionCreateWithoutFieldInput, FieldOptionUncheckedCreateWithoutFieldInput> | FieldOptionCreateWithoutFieldInput[] | FieldOptionUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: FieldOptionCreateOrConnectWithoutFieldInput | FieldOptionCreateOrConnectWithoutFieldInput[]
    createMany?: FieldOptionCreateManyFieldInputEnvelope
    connect?: FieldOptionWhereUniqueInput | FieldOptionWhereUniqueInput[]
  }

  export type FieldOptionUncheckedCreateNestedManyWithoutFieldInput = {
    create?: XOR<FieldOptionCreateWithoutFieldInput, FieldOptionUncheckedCreateWithoutFieldInput> | FieldOptionCreateWithoutFieldInput[] | FieldOptionUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: FieldOptionCreateOrConnectWithoutFieldInput | FieldOptionCreateOrConnectWithoutFieldInput[]
    createMany?: FieldOptionCreateManyFieldInputEnvelope
    connect?: FieldOptionWhereUniqueInput | FieldOptionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FormUpdateOneRequiredWithoutFieldNestedInput = {
    create?: XOR<FormCreateWithoutFieldInput, FormUncheckedCreateWithoutFieldInput>
    connectOrCreate?: FormCreateOrConnectWithoutFieldInput
    upsert?: FormUpsertWithoutFieldInput
    connect?: FormWhereUniqueInput
    update?: XOR<XOR<FormUpdateToOneWithWhereWithoutFieldInput, FormUpdateWithoutFieldInput>, FormUncheckedUpdateWithoutFieldInput>
  }

  export type FieldOptionUpdateManyWithoutFieldNestedInput = {
    create?: XOR<FieldOptionCreateWithoutFieldInput, FieldOptionUncheckedCreateWithoutFieldInput> | FieldOptionCreateWithoutFieldInput[] | FieldOptionUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: FieldOptionCreateOrConnectWithoutFieldInput | FieldOptionCreateOrConnectWithoutFieldInput[]
    upsert?: FieldOptionUpsertWithWhereUniqueWithoutFieldInput | FieldOptionUpsertWithWhereUniqueWithoutFieldInput[]
    createMany?: FieldOptionCreateManyFieldInputEnvelope
    set?: FieldOptionWhereUniqueInput | FieldOptionWhereUniqueInput[]
    disconnect?: FieldOptionWhereUniqueInput | FieldOptionWhereUniqueInput[]
    delete?: FieldOptionWhereUniqueInput | FieldOptionWhereUniqueInput[]
    connect?: FieldOptionWhereUniqueInput | FieldOptionWhereUniqueInput[]
    update?: FieldOptionUpdateWithWhereUniqueWithoutFieldInput | FieldOptionUpdateWithWhereUniqueWithoutFieldInput[]
    updateMany?: FieldOptionUpdateManyWithWhereWithoutFieldInput | FieldOptionUpdateManyWithWhereWithoutFieldInput[]
    deleteMany?: FieldOptionScalarWhereInput | FieldOptionScalarWhereInput[]
  }

  export type FieldOptionUncheckedUpdateManyWithoutFieldNestedInput = {
    create?: XOR<FieldOptionCreateWithoutFieldInput, FieldOptionUncheckedCreateWithoutFieldInput> | FieldOptionCreateWithoutFieldInput[] | FieldOptionUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: FieldOptionCreateOrConnectWithoutFieldInput | FieldOptionCreateOrConnectWithoutFieldInput[]
    upsert?: FieldOptionUpsertWithWhereUniqueWithoutFieldInput | FieldOptionUpsertWithWhereUniqueWithoutFieldInput[]
    createMany?: FieldOptionCreateManyFieldInputEnvelope
    set?: FieldOptionWhereUniqueInput | FieldOptionWhereUniqueInput[]
    disconnect?: FieldOptionWhereUniqueInput | FieldOptionWhereUniqueInput[]
    delete?: FieldOptionWhereUniqueInput | FieldOptionWhereUniqueInput[]
    connect?: FieldOptionWhereUniqueInput | FieldOptionWhereUniqueInput[]
    update?: FieldOptionUpdateWithWhereUniqueWithoutFieldInput | FieldOptionUpdateWithWhereUniqueWithoutFieldInput[]
    updateMany?: FieldOptionUpdateManyWithWhereWithoutFieldInput | FieldOptionUpdateManyWithWhereWithoutFieldInput[]
    deleteMany?: FieldOptionScalarWhereInput | FieldOptionScalarWhereInput[]
  }

  export type FieldCreateNestedOneWithoutFieldOptionInput = {
    create?: XOR<FieldCreateWithoutFieldOptionInput, FieldUncheckedCreateWithoutFieldOptionInput>
    connectOrCreate?: FieldCreateOrConnectWithoutFieldOptionInput
    connect?: FieldWhereUniqueInput
  }

  export type FieldUpdateOneRequiredWithoutFieldOptionNestedInput = {
    create?: XOR<FieldCreateWithoutFieldOptionInput, FieldUncheckedCreateWithoutFieldOptionInput>
    connectOrCreate?: FieldCreateOrConnectWithoutFieldOptionInput
    upsert?: FieldUpsertWithoutFieldOptionInput
    connect?: FieldWhereUniqueInput
    update?: XOR<XOR<FieldUpdateToOneWithWhereWithoutFieldOptionInput, FieldUpdateWithoutFieldOptionInput>, FieldUncheckedUpdateWithoutFieldOptionInput>
  }

  export type FormCreateNestedOneWithoutSubmissionInput = {
    create?: XOR<FormCreateWithoutSubmissionInput, FormUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: FormCreateOrConnectWithoutSubmissionInput
    connect?: FormWhereUniqueInput
  }

  export type FormUpdateOneRequiredWithoutSubmissionNestedInput = {
    create?: XOR<FormCreateWithoutSubmissionInput, FormUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: FormCreateOrConnectWithoutSubmissionInput
    upsert?: FormUpsertWithoutSubmissionInput
    connect?: FormWhereUniqueInput
    update?: XOR<XOR<FormUpdateToOneWithWhereWithoutSubmissionInput, FormUpdateWithoutSubmissionInput>, FormUncheckedUpdateWithoutSubmissionInput>
  }

  export type FormCreateNestedOneWithoutPublishedFormInput = {
    create?: XOR<FormCreateWithoutPublishedFormInput, FormUncheckedCreateWithoutPublishedFormInput>
    connectOrCreate?: FormCreateOrConnectWithoutPublishedFormInput
    connect?: FormWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPublishedFormInput = {
    create?: XOR<UserCreateWithoutPublishedFormInput, UserUncheckedCreateWithoutPublishedFormInput>
    connectOrCreate?: UserCreateOrConnectWithoutPublishedFormInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FormUpdateOneRequiredWithoutPublishedFormNestedInput = {
    create?: XOR<FormCreateWithoutPublishedFormInput, FormUncheckedCreateWithoutPublishedFormInput>
    connectOrCreate?: FormCreateOrConnectWithoutPublishedFormInput
    upsert?: FormUpsertWithoutPublishedFormInput
    connect?: FormWhereUniqueInput
    update?: XOR<XOR<FormUpdateToOneWithWhereWithoutPublishedFormInput, FormUpdateWithoutPublishedFormInput>, FormUncheckedUpdateWithoutPublishedFormInput>
  }

  export type UserUpdateOneRequiredWithoutPublishedFormNestedInput = {
    create?: XOR<UserCreateWithoutPublishedFormInput, UserUncheckedCreateWithoutPublishedFormInput>
    connectOrCreate?: UserCreateOrConnectWithoutPublishedFormInput
    upsert?: UserUpsertWithoutPublishedFormInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPublishedFormInput, UserUpdateWithoutPublishedFormInput>, UserUncheckedUpdateWithoutPublishedFormInput>
  }

  export type UserCreateNestedOneWithoutStripe_userInput = {
    create?: XOR<UserCreateWithoutStripe_userInput, UserUncheckedCreateWithoutStripe_userInput>
    connectOrCreate?: UserCreateOrConnectWithoutStripe_userInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStripe_userNestedInput = {
    create?: XOR<UserCreateWithoutStripe_userInput, UserUncheckedCreateWithoutStripe_userInput>
    connectOrCreate?: UserCreateOrConnectWithoutStripe_userInput
    upsert?: UserUpsertWithoutStripe_userInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStripe_userInput, UserUpdateWithoutStripe_userInput>, UserUncheckedUpdateWithoutStripe_userInput>
  }

  export type FormCreateNestedOneWithoutPromptFileInput = {
    create?: XOR<FormCreateWithoutPromptFileInput, FormUncheckedCreateWithoutPromptFileInput>
    connectOrCreate?: FormCreateOrConnectWithoutPromptFileInput
    connect?: FormWhereUniqueInput
  }

  export type FormUpdateOneRequiredWithoutPromptFileNestedInput = {
    create?: XOR<FormCreateWithoutPromptFileInput, FormUncheckedCreateWithoutPromptFileInput>
    connectOrCreate?: FormCreateOrConnectWithoutPromptFileInput
    upsert?: FormUpsertWithoutPromptFileInput
    connect?: FormWhereUniqueInput
    update?: XOR<XOR<FormUpdateToOneWithWhereWithoutPromptFileInput, FormUpdateWithoutPromptFileInput>, FormUncheckedUpdateWithoutPromptFileInput>
  }

  export type FormCreateNestedOneWithoutWebhookInput = {
    create?: XOR<FormCreateWithoutWebhookInput, FormUncheckedCreateWithoutWebhookInput>
    connectOrCreate?: FormCreateOrConnectWithoutWebhookInput
    connect?: FormWhereUniqueInput
  }

  export type FormUpdateOneRequiredWithoutWebhookNestedInput = {
    create?: XOR<FormCreateWithoutWebhookInput, FormUncheckedCreateWithoutWebhookInput>
    connectOrCreate?: FormCreateOrConnectWithoutWebhookInput
    upsert?: FormUpsertWithoutWebhookInput
    connect?: FormWhereUniqueInput
    update?: XOR<XOR<FormUpdateToOneWithWhereWithoutWebhookInput, FormUpdateWithoutWebhookInput>, FormUncheckedUpdateWithoutWebhookInput>
  }

  export type UserCreateNestedOneWithoutFigCollectionInput = {
    create?: XOR<UserCreateWithoutFigCollectionInput, UserUncheckedCreateWithoutFigCollectionInput>
    connectOrCreate?: UserCreateOrConnectWithoutFigCollectionInput
    connect?: UserWhereUniqueInput
  }

  export type FigCollectionFileCreateNestedOneWithoutFig_collectionInput = {
    create?: XOR<FigCollectionFileCreateWithoutFig_collectionInput, FigCollectionFileUncheckedCreateWithoutFig_collectionInput>
    connectOrCreate?: FigCollectionFileCreateOrConnectWithoutFig_collectionInput
    connect?: FigCollectionFileWhereUniqueInput
  }

  export type FigCollectionFileUncheckedCreateNestedOneWithoutFig_collectionInput = {
    create?: XOR<FigCollectionFileCreateWithoutFig_collectionInput, FigCollectionFileUncheckedCreateWithoutFig_collectionInput>
    connectOrCreate?: FigCollectionFileCreateOrConnectWithoutFig_collectionInput
    connect?: FigCollectionFileWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFigCollectionNestedInput = {
    create?: XOR<UserCreateWithoutFigCollectionInput, UserUncheckedCreateWithoutFigCollectionInput>
    connectOrCreate?: UserCreateOrConnectWithoutFigCollectionInput
    upsert?: UserUpsertWithoutFigCollectionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFigCollectionInput, UserUpdateWithoutFigCollectionInput>, UserUncheckedUpdateWithoutFigCollectionInput>
  }

  export type FigCollectionFileUpdateOneWithoutFig_collectionNestedInput = {
    create?: XOR<FigCollectionFileCreateWithoutFig_collectionInput, FigCollectionFileUncheckedCreateWithoutFig_collectionInput>
    connectOrCreate?: FigCollectionFileCreateOrConnectWithoutFig_collectionInput
    upsert?: FigCollectionFileUpsertWithoutFig_collectionInput
    disconnect?: FigCollectionFileWhereInput | boolean
    delete?: FigCollectionFileWhereInput | boolean
    connect?: FigCollectionFileWhereUniqueInput
    update?: XOR<XOR<FigCollectionFileUpdateToOneWithWhereWithoutFig_collectionInput, FigCollectionFileUpdateWithoutFig_collectionInput>, FigCollectionFileUncheckedUpdateWithoutFig_collectionInput>
  }

  export type FigCollectionFileUncheckedUpdateOneWithoutFig_collectionNestedInput = {
    create?: XOR<FigCollectionFileCreateWithoutFig_collectionInput, FigCollectionFileUncheckedCreateWithoutFig_collectionInput>
    connectOrCreate?: FigCollectionFileCreateOrConnectWithoutFig_collectionInput
    upsert?: FigCollectionFileUpsertWithoutFig_collectionInput
    disconnect?: FigCollectionFileWhereInput | boolean
    delete?: FigCollectionFileWhereInput | boolean
    connect?: FigCollectionFileWhereUniqueInput
    update?: XOR<XOR<FigCollectionFileUpdateToOneWithWhereWithoutFig_collectionInput, FigCollectionFileUpdateWithoutFig_collectionInput>, FigCollectionFileUncheckedUpdateWithoutFig_collectionInput>
  }

  export type FigCollectionCreateNestedOneWithoutFig_collection_fileInput = {
    create?: XOR<FigCollectionCreateWithoutFig_collection_fileInput, FigCollectionUncheckedCreateWithoutFig_collection_fileInput>
    connectOrCreate?: FigCollectionCreateOrConnectWithoutFig_collection_fileInput
    connect?: FigCollectionWhereUniqueInput
  }

  export type FigCollectionUpdateOneWithoutFig_collection_fileNestedInput = {
    create?: XOR<FigCollectionCreateWithoutFig_collection_fileInput, FigCollectionUncheckedCreateWithoutFig_collection_fileInput>
    connectOrCreate?: FigCollectionCreateOrConnectWithoutFig_collection_fileInput
    upsert?: FigCollectionUpsertWithoutFig_collection_fileInput
    disconnect?: FigCollectionWhereInput | boolean
    delete?: FigCollectionWhereInput | boolean
    connect?: FigCollectionWhereUniqueInput
    update?: XOR<XOR<FigCollectionUpdateToOneWithWhereWithoutFig_collection_fileInput, FigCollectionUpdateWithoutFig_collection_fileInput>, FigCollectionUncheckedUpdateWithoutFig_collection_fileInput>
  }

  export type UserCreateNestedOneWithoutAPIKeyInput = {
    create?: XOR<UserCreateWithoutAPIKeyInput, UserUncheckedCreateWithoutAPIKeyInput>
    connectOrCreate?: UserCreateOrConnectWithoutAPIKeyInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAPIKeyNestedInput = {
    create?: XOR<UserCreateWithoutAPIKeyInput, UserUncheckedCreateWithoutAPIKeyInput>
    connectOrCreate?: UserCreateOrConnectWithoutAPIKeyInput
    upsert?: UserUpsertWithoutAPIKeyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAPIKeyInput, UserUpdateWithoutAPIKeyInput>, UserUncheckedUpdateWithoutAPIKeyInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FormCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    Field?: FieldCreateNestedManyWithoutFormInput
    Submission?: SubmissionCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileCreateNestedManyWithoutFormInput
    Webhook?: WebhookCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    Field?: FieldUncheckedCreateNestedManyWithoutFormInput
    Submission?: SubmissionUncheckedCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileUncheckedCreateNestedManyWithoutFormInput
    Webhook?: WebhookUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutUserInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput>
  }

  export type FormCreateManyUserInputEnvelope = {
    data: FormCreateManyUserInput | FormCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PublishedFormCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    last_published_at?: Date | string | null
    encoded_content: string
    form: FormCreateNestedOneWithoutPublishedFormInput
  }

  export type PublishedFormUncheckedCreateWithoutUserInput = {
    id?: string
    form_id: string
    created_at?: Date | string
    last_published_at?: Date | string | null
    encoded_content: string
  }

  export type PublishedFormCreateOrConnectWithoutUserInput = {
    where: PublishedFormWhereUniqueInput
    create: XOR<PublishedFormCreateWithoutUserInput, PublishedFormUncheckedCreateWithoutUserInput>
  }

  export type PublishedFormCreateManyUserInputEnvelope = {
    data: PublishedFormCreateManyUserInput | PublishedFormCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StripeUserCreateWithoutUserInput = {
    id?: string
    stripe_id: string
    created_at?: Date | string
    is_active?: boolean
  }

  export type StripeUserUncheckedCreateWithoutUserInput = {
    id?: string
    stripe_id: string
    created_at?: Date | string
    is_active?: boolean
  }

  export type StripeUserCreateOrConnectWithoutUserInput = {
    where: StripeUserWhereUniqueInput
    create: XOR<StripeUserCreateWithoutUserInput, StripeUserUncheckedCreateWithoutUserInput>
  }

  export type APIKeyCreateWithoutUserInput = {
    id?: string
    key?: string
    name: string
    created_at?: Date | string
    last_used?: Date | string | null
    expires_at?: Date | string | null
    is_active?: boolean
  }

  export type APIKeyUncheckedCreateWithoutUserInput = {
    id?: string
    key?: string
    name: string
    created_at?: Date | string
    last_used?: Date | string | null
    expires_at?: Date | string | null
    is_active?: boolean
  }

  export type APIKeyCreateOrConnectWithoutUserInput = {
    where: APIKeyWhereUniqueInput
    create: XOR<APIKeyCreateWithoutUserInput, APIKeyUncheckedCreateWithoutUserInput>
  }

  export type APIKeyCreateManyUserInputEnvelope = {
    data: APIKeyCreateManyUserInput | APIKeyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FigCollectionCreateWithoutUserInput = {
    id?: string
    name: string
    prompt?: string | null
    created_at?: Date | string
    fig_collection_file_id?: string | null
    fig_collection_file?: FigCollectionFileCreateNestedOneWithoutFig_collectionInput
  }

  export type FigCollectionUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    prompt?: string | null
    created_at?: Date | string
    fig_collection_file_id?: string | null
    fig_collection_file?: FigCollectionFileUncheckedCreateNestedOneWithoutFig_collectionInput
  }

  export type FigCollectionCreateOrConnectWithoutUserInput = {
    where: FigCollectionWhereUniqueInput
    create: XOR<FigCollectionCreateWithoutUserInput, FigCollectionUncheckedCreateWithoutUserInput>
  }

  export type FigCollectionCreateManyUserInputEnvelope = {
    data: FigCollectionCreateManyUserInput | FigCollectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FormUpsertWithWhereUniqueWithoutUserInput = {
    where: FormWhereUniqueInput
    update: XOR<FormUpdateWithoutUserInput, FormUncheckedUpdateWithoutUserInput>
    create: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput>
  }

  export type FormUpdateWithWhereUniqueWithoutUserInput = {
    where: FormWhereUniqueInput
    data: XOR<FormUpdateWithoutUserInput, FormUncheckedUpdateWithoutUserInput>
  }

  export type FormUpdateManyWithWhereWithoutUserInput = {
    where: FormScalarWhereInput
    data: XOR<FormUpdateManyMutationInput, FormUncheckedUpdateManyWithoutUserInput>
  }

  export type FormScalarWhereInput = {
    AND?: FormScalarWhereInput | FormScalarWhereInput[]
    OR?: FormScalarWhereInput[]
    NOT?: FormScalarWhereInput | FormScalarWhereInput[]
    id?: StringFilter<"Form"> | string
    user_id?: StringFilter<"Form"> | string
    name?: StringFilter<"Form"> | string
    description?: StringNullableFilter<"Form"> | string | null
    prompt?: StringNullableFilter<"Form"> | string | null
    file?: StringNullableFilter<"Form"> | string | null
    theme_color?: StringNullableFilter<"Form"> | string | null
    created_at?: DateTimeFilter<"Form"> | Date | string
    webhook_id?: StringNullableFilter<"Form"> | string | null
  }

  export type PublishedFormUpsertWithWhereUniqueWithoutUserInput = {
    where: PublishedFormWhereUniqueInput
    update: XOR<PublishedFormUpdateWithoutUserInput, PublishedFormUncheckedUpdateWithoutUserInput>
    create: XOR<PublishedFormCreateWithoutUserInput, PublishedFormUncheckedCreateWithoutUserInput>
  }

  export type PublishedFormUpdateWithWhereUniqueWithoutUserInput = {
    where: PublishedFormWhereUniqueInput
    data: XOR<PublishedFormUpdateWithoutUserInput, PublishedFormUncheckedUpdateWithoutUserInput>
  }

  export type PublishedFormUpdateManyWithWhereWithoutUserInput = {
    where: PublishedFormScalarWhereInput
    data: XOR<PublishedFormUpdateManyMutationInput, PublishedFormUncheckedUpdateManyWithoutUserInput>
  }

  export type PublishedFormScalarWhereInput = {
    AND?: PublishedFormScalarWhereInput | PublishedFormScalarWhereInput[]
    OR?: PublishedFormScalarWhereInput[]
    NOT?: PublishedFormScalarWhereInput | PublishedFormScalarWhereInput[]
    id?: StringFilter<"PublishedForm"> | string
    form_id?: StringFilter<"PublishedForm"> | string
    user_id?: StringFilter<"PublishedForm"> | string
    created_at?: DateTimeFilter<"PublishedForm"> | Date | string
    last_published_at?: DateTimeNullableFilter<"PublishedForm"> | Date | string | null
    encoded_content?: StringFilter<"PublishedForm"> | string
  }

  export type StripeUserUpsertWithoutUserInput = {
    update: XOR<StripeUserUpdateWithoutUserInput, StripeUserUncheckedUpdateWithoutUserInput>
    create: XOR<StripeUserCreateWithoutUserInput, StripeUserUncheckedCreateWithoutUserInput>
    where?: StripeUserWhereInput
  }

  export type StripeUserUpdateToOneWithWhereWithoutUserInput = {
    where?: StripeUserWhereInput
    data: XOR<StripeUserUpdateWithoutUserInput, StripeUserUncheckedUpdateWithoutUserInput>
  }

  export type StripeUserUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripe_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StripeUserUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripe_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type APIKeyUpsertWithWhereUniqueWithoutUserInput = {
    where: APIKeyWhereUniqueInput
    update: XOR<APIKeyUpdateWithoutUserInput, APIKeyUncheckedUpdateWithoutUserInput>
    create: XOR<APIKeyCreateWithoutUserInput, APIKeyUncheckedCreateWithoutUserInput>
  }

  export type APIKeyUpdateWithWhereUniqueWithoutUserInput = {
    where: APIKeyWhereUniqueInput
    data: XOR<APIKeyUpdateWithoutUserInput, APIKeyUncheckedUpdateWithoutUserInput>
  }

  export type APIKeyUpdateManyWithWhereWithoutUserInput = {
    where: APIKeyScalarWhereInput
    data: XOR<APIKeyUpdateManyMutationInput, APIKeyUncheckedUpdateManyWithoutUserInput>
  }

  export type APIKeyScalarWhereInput = {
    AND?: APIKeyScalarWhereInput | APIKeyScalarWhereInput[]
    OR?: APIKeyScalarWhereInput[]
    NOT?: APIKeyScalarWhereInput | APIKeyScalarWhereInput[]
    id?: StringFilter<"APIKey"> | string
    key?: StringFilter<"APIKey"> | string
    name?: StringFilter<"APIKey"> | string
    user_id?: StringFilter<"APIKey"> | string
    created_at?: DateTimeFilter<"APIKey"> | Date | string
    last_used?: DateTimeNullableFilter<"APIKey"> | Date | string | null
    expires_at?: DateTimeNullableFilter<"APIKey"> | Date | string | null
    is_active?: BoolFilter<"APIKey"> | boolean
  }

  export type FigCollectionUpsertWithWhereUniqueWithoutUserInput = {
    where: FigCollectionWhereUniqueInput
    update: XOR<FigCollectionUpdateWithoutUserInput, FigCollectionUncheckedUpdateWithoutUserInput>
    create: XOR<FigCollectionCreateWithoutUserInput, FigCollectionUncheckedCreateWithoutUserInput>
  }

  export type FigCollectionUpdateWithWhereUniqueWithoutUserInput = {
    where: FigCollectionWhereUniqueInput
    data: XOR<FigCollectionUpdateWithoutUserInput, FigCollectionUncheckedUpdateWithoutUserInput>
  }

  export type FigCollectionUpdateManyWithWhereWithoutUserInput = {
    where: FigCollectionScalarWhereInput
    data: XOR<FigCollectionUpdateManyMutationInput, FigCollectionUncheckedUpdateManyWithoutUserInput>
  }

  export type FigCollectionScalarWhereInput = {
    AND?: FigCollectionScalarWhereInput | FigCollectionScalarWhereInput[]
    OR?: FigCollectionScalarWhereInput[]
    NOT?: FigCollectionScalarWhereInput | FigCollectionScalarWhereInput[]
    id?: StringFilter<"FigCollection"> | string
    name?: StringFilter<"FigCollection"> | string
    prompt?: StringNullableFilter<"FigCollection"> | string | null
    created_at?: DateTimeFilter<"FigCollection"> | Date | string
    user_id?: StringFilter<"FigCollection"> | string
    fig_collection_file_id?: StringNullableFilter<"FigCollection"> | string | null
  }

  export type UserCreateWithoutFormInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    PublishedForm?: PublishedFormCreateNestedManyWithoutUserInput
    stripe_user?: StripeUserCreateNestedOneWithoutUserInput
    APIKey?: APIKeyCreateNestedManyWithoutUserInput
    FigCollection?: FigCollectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFormInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutUserInput
    stripe_user?: StripeUserUncheckedCreateNestedOneWithoutUserInput
    APIKey?: APIKeyUncheckedCreateNestedManyWithoutUserInput
    FigCollection?: FigCollectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFormInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFormInput, UserUncheckedCreateWithoutFormInput>
  }

  export type FieldCreateWithoutFormInput = {
    id?: string
    name: string
    label: string
    type: string
    description?: string | null
    required: boolean
    created_at?: Date | string
    order?: number | null
    FieldOption?: FieldOptionCreateNestedManyWithoutFieldInput
  }

  export type FieldUncheckedCreateWithoutFormInput = {
    id?: string
    name: string
    label: string
    type: string
    description?: string | null
    required: boolean
    created_at?: Date | string
    order?: number | null
    FieldOption?: FieldOptionUncheckedCreateNestedManyWithoutFieldInput
  }

  export type FieldCreateOrConnectWithoutFormInput = {
    where: FieldWhereUniqueInput
    create: XOR<FieldCreateWithoutFormInput, FieldUncheckedCreateWithoutFormInput>
  }

  export type FieldCreateManyFormInputEnvelope = {
    data: FieldCreateManyFormInput | FieldCreateManyFormInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionCreateWithoutFormInput = {
    id?: string
    text?: string | null
    created_at?: Date | string
  }

  export type SubmissionUncheckedCreateWithoutFormInput = {
    id?: string
    text?: string | null
    created_at?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutFormInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutFormInput, SubmissionUncheckedCreateWithoutFormInput>
  }

  export type SubmissionCreateManyFormInputEnvelope = {
    data: SubmissionCreateManyFormInput | SubmissionCreateManyFormInput[]
    skipDuplicates?: boolean
  }

  export type PublishedFormCreateWithoutFormInput = {
    id?: string
    created_at?: Date | string
    last_published_at?: Date | string | null
    encoded_content: string
    user: UserCreateNestedOneWithoutPublishedFormInput
  }

  export type PublishedFormUncheckedCreateWithoutFormInput = {
    id?: string
    user_id: string
    created_at?: Date | string
    last_published_at?: Date | string | null
    encoded_content: string
  }

  export type PublishedFormCreateOrConnectWithoutFormInput = {
    where: PublishedFormWhereUniqueInput
    create: XOR<PublishedFormCreateWithoutFormInput, PublishedFormUncheckedCreateWithoutFormInput>
  }

  export type PublishedFormCreateManyFormInputEnvelope = {
    data: PublishedFormCreateManyFormInput | PublishedFormCreateManyFormInput[]
    skipDuplicates?: boolean
  }

  export type PromptFileCreateWithoutFormInput = {
    id?: string
    created_at?: Date | string
    title: string
    extracted_text: string
    base64_content?: string | null
    url?: string | null
  }

  export type PromptFileUncheckedCreateWithoutFormInput = {
    id?: string
    created_at?: Date | string
    title: string
    extracted_text: string
    base64_content?: string | null
    url?: string | null
  }

  export type PromptFileCreateOrConnectWithoutFormInput = {
    where: PromptFileWhereUniqueInput
    create: XOR<PromptFileCreateWithoutFormInput, PromptFileUncheckedCreateWithoutFormInput>
  }

  export type PromptFileCreateManyFormInputEnvelope = {
    data: PromptFileCreateManyFormInput | PromptFileCreateManyFormInput[]
    skipDuplicates?: boolean
  }

  export type WebhookCreateWithoutFormInput = {
    id?: string
    url: string
    method?: string | null
    api_key?: string | null
    api_key_header?: string | null
    created_at?: Date | string
  }

  export type WebhookUncheckedCreateWithoutFormInput = {
    id?: string
    url: string
    method?: string | null
    api_key?: string | null
    api_key_header?: string | null
    created_at?: Date | string
  }

  export type WebhookCreateOrConnectWithoutFormInput = {
    where: WebhookWhereUniqueInput
    create: XOR<WebhookCreateWithoutFormInput, WebhookUncheckedCreateWithoutFormInput>
  }

  export type UserUpsertWithoutFormInput = {
    update: XOR<UserUpdateWithoutFormInput, UserUncheckedUpdateWithoutFormInput>
    create: XOR<UserCreateWithoutFormInput, UserUncheckedCreateWithoutFormInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFormInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFormInput, UserUncheckedUpdateWithoutFormInput>
  }

  export type UserUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    PublishedForm?: PublishedFormUpdateManyWithoutUserNestedInput
    stripe_user?: StripeUserUpdateOneWithoutUserNestedInput
    APIKey?: APIKeyUpdateManyWithoutUserNestedInput
    FigCollection?: FigCollectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutUserNestedInput
    stripe_user?: StripeUserUncheckedUpdateOneWithoutUserNestedInput
    APIKey?: APIKeyUncheckedUpdateManyWithoutUserNestedInput
    FigCollection?: FigCollectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FieldUpsertWithWhereUniqueWithoutFormInput = {
    where: FieldWhereUniqueInput
    update: XOR<FieldUpdateWithoutFormInput, FieldUncheckedUpdateWithoutFormInput>
    create: XOR<FieldCreateWithoutFormInput, FieldUncheckedCreateWithoutFormInput>
  }

  export type FieldUpdateWithWhereUniqueWithoutFormInput = {
    where: FieldWhereUniqueInput
    data: XOR<FieldUpdateWithoutFormInput, FieldUncheckedUpdateWithoutFormInput>
  }

  export type FieldUpdateManyWithWhereWithoutFormInput = {
    where: FieldScalarWhereInput
    data: XOR<FieldUpdateManyMutationInput, FieldUncheckedUpdateManyWithoutFormInput>
  }

  export type FieldScalarWhereInput = {
    AND?: FieldScalarWhereInput | FieldScalarWhereInput[]
    OR?: FieldScalarWhereInput[]
    NOT?: FieldScalarWhereInput | FieldScalarWhereInput[]
    id?: StringFilter<"Field"> | string
    form_id?: StringFilter<"Field"> | string
    name?: StringFilter<"Field"> | string
    label?: StringFilter<"Field"> | string
    type?: StringFilter<"Field"> | string
    description?: StringNullableFilter<"Field"> | string | null
    required?: BoolFilter<"Field"> | boolean
    created_at?: DateTimeFilter<"Field"> | Date | string
    order?: IntNullableFilter<"Field"> | number | null
  }

  export type SubmissionUpsertWithWhereUniqueWithoutFormInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutFormInput, SubmissionUncheckedUpdateWithoutFormInput>
    create: XOR<SubmissionCreateWithoutFormInput, SubmissionUncheckedCreateWithoutFormInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutFormInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutFormInput, SubmissionUncheckedUpdateWithoutFormInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutFormInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutFormInput>
  }

  export type SubmissionScalarWhereInput = {
    AND?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    OR?: SubmissionScalarWhereInput[]
    NOT?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    id?: StringFilter<"Submission"> | string
    form_id?: StringFilter<"Submission"> | string
    text?: StringNullableFilter<"Submission"> | string | null
    created_at?: DateTimeFilter<"Submission"> | Date | string
  }

  export type PublishedFormUpsertWithWhereUniqueWithoutFormInput = {
    where: PublishedFormWhereUniqueInput
    update: XOR<PublishedFormUpdateWithoutFormInput, PublishedFormUncheckedUpdateWithoutFormInput>
    create: XOR<PublishedFormCreateWithoutFormInput, PublishedFormUncheckedCreateWithoutFormInput>
  }

  export type PublishedFormUpdateWithWhereUniqueWithoutFormInput = {
    where: PublishedFormWhereUniqueInput
    data: XOR<PublishedFormUpdateWithoutFormInput, PublishedFormUncheckedUpdateWithoutFormInput>
  }

  export type PublishedFormUpdateManyWithWhereWithoutFormInput = {
    where: PublishedFormScalarWhereInput
    data: XOR<PublishedFormUpdateManyMutationInput, PublishedFormUncheckedUpdateManyWithoutFormInput>
  }

  export type PromptFileUpsertWithWhereUniqueWithoutFormInput = {
    where: PromptFileWhereUniqueInput
    update: XOR<PromptFileUpdateWithoutFormInput, PromptFileUncheckedUpdateWithoutFormInput>
    create: XOR<PromptFileCreateWithoutFormInput, PromptFileUncheckedCreateWithoutFormInput>
  }

  export type PromptFileUpdateWithWhereUniqueWithoutFormInput = {
    where: PromptFileWhereUniqueInput
    data: XOR<PromptFileUpdateWithoutFormInput, PromptFileUncheckedUpdateWithoutFormInput>
  }

  export type PromptFileUpdateManyWithWhereWithoutFormInput = {
    where: PromptFileScalarWhereInput
    data: XOR<PromptFileUpdateManyMutationInput, PromptFileUncheckedUpdateManyWithoutFormInput>
  }

  export type PromptFileScalarWhereInput = {
    AND?: PromptFileScalarWhereInput | PromptFileScalarWhereInput[]
    OR?: PromptFileScalarWhereInput[]
    NOT?: PromptFileScalarWhereInput | PromptFileScalarWhereInput[]
    id?: StringFilter<"PromptFile"> | string
    form_id?: StringFilter<"PromptFile"> | string
    created_at?: DateTimeFilter<"PromptFile"> | Date | string
    title?: StringFilter<"PromptFile"> | string
    extracted_text?: StringFilter<"PromptFile"> | string
    base64_content?: StringNullableFilter<"PromptFile"> | string | null
    url?: StringNullableFilter<"PromptFile"> | string | null
  }

  export type WebhookUpsertWithoutFormInput = {
    update: XOR<WebhookUpdateWithoutFormInput, WebhookUncheckedUpdateWithoutFormInput>
    create: XOR<WebhookCreateWithoutFormInput, WebhookUncheckedCreateWithoutFormInput>
    where?: WebhookWhereInput
  }

  export type WebhookUpdateToOneWithWhereWithoutFormInput = {
    where?: WebhookWhereInput
    data: XOR<WebhookUpdateWithoutFormInput, WebhookUncheckedUpdateWithoutFormInput>
  }

  export type WebhookUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: NullableStringFieldUpdateOperationsInput | string | null
    api_key_header?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    method?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: NullableStringFieldUpdateOperationsInput | string | null
    api_key_header?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FormCreateWithoutFieldInput = {
    id?: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    user: UserCreateNestedOneWithoutFormInput
    Submission?: SubmissionCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileCreateNestedManyWithoutFormInput
    Webhook?: WebhookCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutFieldInput = {
    id?: string
    user_id: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    Submission?: SubmissionUncheckedCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileUncheckedCreateNestedManyWithoutFormInput
    Webhook?: WebhookUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutFieldInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutFieldInput, FormUncheckedCreateWithoutFieldInput>
  }

  export type FieldOptionCreateWithoutFieldInput = {
    id?: string
    name: string
    created_at?: Date | string
  }

  export type FieldOptionUncheckedCreateWithoutFieldInput = {
    id?: string
    name: string
    created_at?: Date | string
  }

  export type FieldOptionCreateOrConnectWithoutFieldInput = {
    where: FieldOptionWhereUniqueInput
    create: XOR<FieldOptionCreateWithoutFieldInput, FieldOptionUncheckedCreateWithoutFieldInput>
  }

  export type FieldOptionCreateManyFieldInputEnvelope = {
    data: FieldOptionCreateManyFieldInput | FieldOptionCreateManyFieldInput[]
    skipDuplicates?: boolean
  }

  export type FormUpsertWithoutFieldInput = {
    update: XOR<FormUpdateWithoutFieldInput, FormUncheckedUpdateWithoutFieldInput>
    create: XOR<FormCreateWithoutFieldInput, FormUncheckedCreateWithoutFieldInput>
    where?: FormWhereInput
  }

  export type FormUpdateToOneWithWhereWithoutFieldInput = {
    where?: FormWhereInput
    data: XOR<FormUpdateWithoutFieldInput, FormUncheckedUpdateWithoutFieldInput>
  }

  export type FormUpdateWithoutFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutFormNestedInput
    Submission?: SubmissionUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    Submission?: SubmissionUncheckedUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUncheckedUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUncheckedUpdateOneWithoutFormNestedInput
  }

  export type FieldOptionUpsertWithWhereUniqueWithoutFieldInput = {
    where: FieldOptionWhereUniqueInput
    update: XOR<FieldOptionUpdateWithoutFieldInput, FieldOptionUncheckedUpdateWithoutFieldInput>
    create: XOR<FieldOptionCreateWithoutFieldInput, FieldOptionUncheckedCreateWithoutFieldInput>
  }

  export type FieldOptionUpdateWithWhereUniqueWithoutFieldInput = {
    where: FieldOptionWhereUniqueInput
    data: XOR<FieldOptionUpdateWithoutFieldInput, FieldOptionUncheckedUpdateWithoutFieldInput>
  }

  export type FieldOptionUpdateManyWithWhereWithoutFieldInput = {
    where: FieldOptionScalarWhereInput
    data: XOR<FieldOptionUpdateManyMutationInput, FieldOptionUncheckedUpdateManyWithoutFieldInput>
  }

  export type FieldOptionScalarWhereInput = {
    AND?: FieldOptionScalarWhereInput | FieldOptionScalarWhereInput[]
    OR?: FieldOptionScalarWhereInput[]
    NOT?: FieldOptionScalarWhereInput | FieldOptionScalarWhereInput[]
    id?: StringFilter<"FieldOption"> | string
    field_id?: StringFilter<"FieldOption"> | string
    name?: StringFilter<"FieldOption"> | string
    created_at?: DateTimeFilter<"FieldOption"> | Date | string
  }

  export type FieldCreateWithoutFieldOptionInput = {
    id?: string
    name: string
    label: string
    type: string
    description?: string | null
    required: boolean
    created_at?: Date | string
    order?: number | null
    form: FormCreateNestedOneWithoutFieldInput
  }

  export type FieldUncheckedCreateWithoutFieldOptionInput = {
    id?: string
    form_id: string
    name: string
    label: string
    type: string
    description?: string | null
    required: boolean
    created_at?: Date | string
    order?: number | null
  }

  export type FieldCreateOrConnectWithoutFieldOptionInput = {
    where: FieldWhereUniqueInput
    create: XOR<FieldCreateWithoutFieldOptionInput, FieldUncheckedCreateWithoutFieldOptionInput>
  }

  export type FieldUpsertWithoutFieldOptionInput = {
    update: XOR<FieldUpdateWithoutFieldOptionInput, FieldUncheckedUpdateWithoutFieldOptionInput>
    create: XOR<FieldCreateWithoutFieldOptionInput, FieldUncheckedCreateWithoutFieldOptionInput>
    where?: FieldWhereInput
  }

  export type FieldUpdateToOneWithWhereWithoutFieldOptionInput = {
    where?: FieldWhereInput
    data: XOR<FieldUpdateWithoutFieldOptionInput, FieldUncheckedUpdateWithoutFieldOptionInput>
  }

  export type FieldUpdateWithoutFieldOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    form?: FormUpdateOneRequiredWithoutFieldNestedInput
  }

  export type FieldUncheckedUpdateWithoutFieldOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FormCreateWithoutSubmissionInput = {
    id?: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    user: UserCreateNestedOneWithoutFormInput
    Field?: FieldCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileCreateNestedManyWithoutFormInput
    Webhook?: WebhookCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutSubmissionInput = {
    id?: string
    user_id: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    Field?: FieldUncheckedCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileUncheckedCreateNestedManyWithoutFormInput
    Webhook?: WebhookUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutSubmissionInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutSubmissionInput, FormUncheckedCreateWithoutSubmissionInput>
  }

  export type FormUpsertWithoutSubmissionInput = {
    update: XOR<FormUpdateWithoutSubmissionInput, FormUncheckedUpdateWithoutSubmissionInput>
    create: XOR<FormCreateWithoutSubmissionInput, FormUncheckedCreateWithoutSubmissionInput>
    where?: FormWhereInput
  }

  export type FormUpdateToOneWithWhereWithoutSubmissionInput = {
    where?: FormWhereInput
    data: XOR<FormUpdateWithoutSubmissionInput, FormUncheckedUpdateWithoutSubmissionInput>
  }

  export type FormUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutFormNestedInput
    Field?: FieldUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    Field?: FieldUncheckedUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUncheckedUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUncheckedUpdateOneWithoutFormNestedInput
  }

  export type FormCreateWithoutPublishedFormInput = {
    id?: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    user: UserCreateNestedOneWithoutFormInput
    Field?: FieldCreateNestedManyWithoutFormInput
    Submission?: SubmissionCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileCreateNestedManyWithoutFormInput
    Webhook?: WebhookCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutPublishedFormInput = {
    id?: string
    user_id: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    Field?: FieldUncheckedCreateNestedManyWithoutFormInput
    Submission?: SubmissionUncheckedCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileUncheckedCreateNestedManyWithoutFormInput
    Webhook?: WebhookUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutPublishedFormInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutPublishedFormInput, FormUncheckedCreateWithoutPublishedFormInput>
  }

  export type UserCreateWithoutPublishedFormInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    Form?: FormCreateNestedManyWithoutUserInput
    stripe_user?: StripeUserCreateNestedOneWithoutUserInput
    APIKey?: APIKeyCreateNestedManyWithoutUserInput
    FigCollection?: FigCollectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPublishedFormInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    Form?: FormUncheckedCreateNestedManyWithoutUserInput
    stripe_user?: StripeUserUncheckedCreateNestedOneWithoutUserInput
    APIKey?: APIKeyUncheckedCreateNestedManyWithoutUserInput
    FigCollection?: FigCollectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPublishedFormInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPublishedFormInput, UserUncheckedCreateWithoutPublishedFormInput>
  }

  export type FormUpsertWithoutPublishedFormInput = {
    update: XOR<FormUpdateWithoutPublishedFormInput, FormUncheckedUpdateWithoutPublishedFormInput>
    create: XOR<FormCreateWithoutPublishedFormInput, FormUncheckedCreateWithoutPublishedFormInput>
    where?: FormWhereInput
  }

  export type FormUpdateToOneWithWhereWithoutPublishedFormInput = {
    where?: FormWhereInput
    data: XOR<FormUpdateWithoutPublishedFormInput, FormUncheckedUpdateWithoutPublishedFormInput>
  }

  export type FormUpdateWithoutPublishedFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutFormNestedInput
    Field?: FieldUpdateManyWithoutFormNestedInput
    Submission?: SubmissionUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutPublishedFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    Field?: FieldUncheckedUpdateManyWithoutFormNestedInput
    Submission?: SubmissionUncheckedUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUncheckedUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUncheckedUpdateOneWithoutFormNestedInput
  }

  export type UserUpsertWithoutPublishedFormInput = {
    update: XOR<UserUpdateWithoutPublishedFormInput, UserUncheckedUpdateWithoutPublishedFormInput>
    create: XOR<UserCreateWithoutPublishedFormInput, UserUncheckedCreateWithoutPublishedFormInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPublishedFormInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPublishedFormInput, UserUncheckedUpdateWithoutPublishedFormInput>
  }

  export type UserUpdateWithoutPublishedFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Form?: FormUpdateManyWithoutUserNestedInput
    stripe_user?: StripeUserUpdateOneWithoutUserNestedInput
    APIKey?: APIKeyUpdateManyWithoutUserNestedInput
    FigCollection?: FigCollectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPublishedFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Form?: FormUncheckedUpdateManyWithoutUserNestedInput
    stripe_user?: StripeUserUncheckedUpdateOneWithoutUserNestedInput
    APIKey?: APIKeyUncheckedUpdateManyWithoutUserNestedInput
    FigCollection?: FigCollectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutStripe_userInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    Form?: FormCreateNestedManyWithoutUserInput
    PublishedForm?: PublishedFormCreateNestedManyWithoutUserInput
    APIKey?: APIKeyCreateNestedManyWithoutUserInput
    FigCollection?: FigCollectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStripe_userInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    Form?: FormUncheckedCreateNestedManyWithoutUserInput
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutUserInput
    APIKey?: APIKeyUncheckedCreateNestedManyWithoutUserInput
    FigCollection?: FigCollectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStripe_userInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStripe_userInput, UserUncheckedCreateWithoutStripe_userInput>
  }

  export type UserUpsertWithoutStripe_userInput = {
    update: XOR<UserUpdateWithoutStripe_userInput, UserUncheckedUpdateWithoutStripe_userInput>
    create: XOR<UserCreateWithoutStripe_userInput, UserUncheckedCreateWithoutStripe_userInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStripe_userInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStripe_userInput, UserUncheckedUpdateWithoutStripe_userInput>
  }

  export type UserUpdateWithoutStripe_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Form?: FormUpdateManyWithoutUserNestedInput
    PublishedForm?: PublishedFormUpdateManyWithoutUserNestedInput
    APIKey?: APIKeyUpdateManyWithoutUserNestedInput
    FigCollection?: FigCollectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStripe_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Form?: FormUncheckedUpdateManyWithoutUserNestedInput
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutUserNestedInput
    APIKey?: APIKeyUncheckedUpdateManyWithoutUserNestedInput
    FigCollection?: FigCollectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FormCreateWithoutPromptFileInput = {
    id?: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    user: UserCreateNestedOneWithoutFormInput
    Field?: FieldCreateNestedManyWithoutFormInput
    Submission?: SubmissionCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormCreateNestedManyWithoutFormInput
    Webhook?: WebhookCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutPromptFileInput = {
    id?: string
    user_id: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    Field?: FieldUncheckedCreateNestedManyWithoutFormInput
    Submission?: SubmissionUncheckedCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutFormInput
    Webhook?: WebhookUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutPromptFileInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutPromptFileInput, FormUncheckedCreateWithoutPromptFileInput>
  }

  export type FormUpsertWithoutPromptFileInput = {
    update: XOR<FormUpdateWithoutPromptFileInput, FormUncheckedUpdateWithoutPromptFileInput>
    create: XOR<FormCreateWithoutPromptFileInput, FormUncheckedCreateWithoutPromptFileInput>
    where?: FormWhereInput
  }

  export type FormUpdateToOneWithWhereWithoutPromptFileInput = {
    where?: FormWhereInput
    data: XOR<FormUpdateWithoutPromptFileInput, FormUncheckedUpdateWithoutPromptFileInput>
  }

  export type FormUpdateWithoutPromptFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutFormNestedInput
    Field?: FieldUpdateManyWithoutFormNestedInput
    Submission?: SubmissionUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutPromptFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    Field?: FieldUncheckedUpdateManyWithoutFormNestedInput
    Submission?: SubmissionUncheckedUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUncheckedUpdateOneWithoutFormNestedInput
  }

  export type FormCreateWithoutWebhookInput = {
    id?: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    user: UserCreateNestedOneWithoutFormInput
    Field?: FieldCreateNestedManyWithoutFormInput
    Submission?: SubmissionCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileCreateNestedManyWithoutFormInput
  }

  export type FormUncheckedCreateWithoutWebhookInput = {
    id?: string
    user_id: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
    Field?: FieldUncheckedCreateNestedManyWithoutFormInput
    Submission?: SubmissionUncheckedCreateNestedManyWithoutFormInput
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutFormInput
    PromptFile?: PromptFileUncheckedCreateNestedManyWithoutFormInput
  }

  export type FormCreateOrConnectWithoutWebhookInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutWebhookInput, FormUncheckedCreateWithoutWebhookInput>
  }

  export type FormUpsertWithoutWebhookInput = {
    update: XOR<FormUpdateWithoutWebhookInput, FormUncheckedUpdateWithoutWebhookInput>
    create: XOR<FormCreateWithoutWebhookInput, FormUncheckedCreateWithoutWebhookInput>
    where?: FormWhereInput
  }

  export type FormUpdateToOneWithWhereWithoutWebhookInput = {
    where?: FormWhereInput
    data: XOR<FormUpdateWithoutWebhookInput, FormUncheckedUpdateWithoutWebhookInput>
  }

  export type FormUpdateWithoutWebhookInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutFormNestedInput
    Field?: FieldUpdateManyWithoutFormNestedInput
    Submission?: SubmissionUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUpdateManyWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutWebhookInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    Field?: FieldUncheckedUpdateManyWithoutFormNestedInput
    Submission?: SubmissionUncheckedUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUncheckedUpdateManyWithoutFormNestedInput
  }

  export type UserCreateWithoutFigCollectionInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    Form?: FormCreateNestedManyWithoutUserInput
    PublishedForm?: PublishedFormCreateNestedManyWithoutUserInput
    stripe_user?: StripeUserCreateNestedOneWithoutUserInput
    APIKey?: APIKeyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFigCollectionInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    Form?: FormUncheckedCreateNestedManyWithoutUserInput
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutUserInput
    stripe_user?: StripeUserUncheckedCreateNestedOneWithoutUserInput
    APIKey?: APIKeyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFigCollectionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFigCollectionInput, UserUncheckedCreateWithoutFigCollectionInput>
  }

  export type FigCollectionFileCreateWithoutFig_collectionInput = {
    id?: string
    title: string
    extracted_text: string
    created_at?: Date | string
  }

  export type FigCollectionFileUncheckedCreateWithoutFig_collectionInput = {
    id?: string
    title: string
    extracted_text: string
    created_at?: Date | string
  }

  export type FigCollectionFileCreateOrConnectWithoutFig_collectionInput = {
    where: FigCollectionFileWhereUniqueInput
    create: XOR<FigCollectionFileCreateWithoutFig_collectionInput, FigCollectionFileUncheckedCreateWithoutFig_collectionInput>
  }

  export type UserUpsertWithoutFigCollectionInput = {
    update: XOR<UserUpdateWithoutFigCollectionInput, UserUncheckedUpdateWithoutFigCollectionInput>
    create: XOR<UserCreateWithoutFigCollectionInput, UserUncheckedCreateWithoutFigCollectionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFigCollectionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFigCollectionInput, UserUncheckedUpdateWithoutFigCollectionInput>
  }

  export type UserUpdateWithoutFigCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Form?: FormUpdateManyWithoutUserNestedInput
    PublishedForm?: PublishedFormUpdateManyWithoutUserNestedInput
    stripe_user?: StripeUserUpdateOneWithoutUserNestedInput
    APIKey?: APIKeyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFigCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Form?: FormUncheckedUpdateManyWithoutUserNestedInput
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutUserNestedInput
    stripe_user?: StripeUserUncheckedUpdateOneWithoutUserNestedInput
    APIKey?: APIKeyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FigCollectionFileUpsertWithoutFig_collectionInput = {
    update: XOR<FigCollectionFileUpdateWithoutFig_collectionInput, FigCollectionFileUncheckedUpdateWithoutFig_collectionInput>
    create: XOR<FigCollectionFileCreateWithoutFig_collectionInput, FigCollectionFileUncheckedCreateWithoutFig_collectionInput>
    where?: FigCollectionFileWhereInput
  }

  export type FigCollectionFileUpdateToOneWithWhereWithoutFig_collectionInput = {
    where?: FigCollectionFileWhereInput
    data: XOR<FigCollectionFileUpdateWithoutFig_collectionInput, FigCollectionFileUncheckedUpdateWithoutFig_collectionInput>
  }

  export type FigCollectionFileUpdateWithoutFig_collectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FigCollectionFileUncheckedUpdateWithoutFig_collectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FigCollectionCreateWithoutFig_collection_fileInput = {
    id?: string
    name: string
    prompt?: string | null
    created_at?: Date | string
    fig_collection_file_id?: string | null
    user: UserCreateNestedOneWithoutFigCollectionInput
  }

  export type FigCollectionUncheckedCreateWithoutFig_collection_fileInput = {
    id?: string
    name: string
    prompt?: string | null
    created_at?: Date | string
    user_id: string
    fig_collection_file_id?: string | null
  }

  export type FigCollectionCreateOrConnectWithoutFig_collection_fileInput = {
    where: FigCollectionWhereUniqueInput
    create: XOR<FigCollectionCreateWithoutFig_collection_fileInput, FigCollectionUncheckedCreateWithoutFig_collection_fileInput>
  }

  export type FigCollectionUpsertWithoutFig_collection_fileInput = {
    update: XOR<FigCollectionUpdateWithoutFig_collection_fileInput, FigCollectionUncheckedUpdateWithoutFig_collection_fileInput>
    create: XOR<FigCollectionCreateWithoutFig_collection_fileInput, FigCollectionUncheckedCreateWithoutFig_collection_fileInput>
    where?: FigCollectionWhereInput
  }

  export type FigCollectionUpdateToOneWithWhereWithoutFig_collection_fileInput = {
    where?: FigCollectionWhereInput
    data: XOR<FigCollectionUpdateWithoutFig_collection_fileInput, FigCollectionUncheckedUpdateWithoutFig_collection_fileInput>
  }

  export type FigCollectionUpdateWithoutFig_collection_fileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fig_collection_file_id?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutFigCollectionNestedInput
  }

  export type FigCollectionUncheckedUpdateWithoutFig_collection_fileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    fig_collection_file_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutAPIKeyInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    Form?: FormCreateNestedManyWithoutUserInput
    PublishedForm?: PublishedFormCreateNestedManyWithoutUserInput
    stripe_user?: StripeUserCreateNestedOneWithoutUserInput
    FigCollection?: FigCollectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAPIKeyInput = {
    id?: string
    email: string
    password: string
    tier_id: string
    logo_url?: string | null
    created_at?: Date | string
    Form?: FormUncheckedCreateNestedManyWithoutUserInput
    PublishedForm?: PublishedFormUncheckedCreateNestedManyWithoutUserInput
    stripe_user?: StripeUserUncheckedCreateNestedOneWithoutUserInput
    FigCollection?: FigCollectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAPIKeyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAPIKeyInput, UserUncheckedCreateWithoutAPIKeyInput>
  }

  export type UserUpsertWithoutAPIKeyInput = {
    update: XOR<UserUpdateWithoutAPIKeyInput, UserUncheckedUpdateWithoutAPIKeyInput>
    create: XOR<UserCreateWithoutAPIKeyInput, UserUncheckedCreateWithoutAPIKeyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAPIKeyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAPIKeyInput, UserUncheckedUpdateWithoutAPIKeyInput>
  }

  export type UserUpdateWithoutAPIKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Form?: FormUpdateManyWithoutUserNestedInput
    PublishedForm?: PublishedFormUpdateManyWithoutUserNestedInput
    stripe_user?: StripeUserUpdateOneWithoutUserNestedInput
    FigCollection?: FigCollectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAPIKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tier_id?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Form?: FormUncheckedUpdateManyWithoutUserNestedInput
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutUserNestedInput
    stripe_user?: StripeUserUncheckedUpdateOneWithoutUserNestedInput
    FigCollection?: FigCollectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FormCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    prompt?: string | null
    file?: string | null
    theme_color?: string | null
    created_at?: Date | string
    webhook_id?: string | null
  }

  export type PublishedFormCreateManyUserInput = {
    id?: string
    form_id: string
    created_at?: Date | string
    last_published_at?: Date | string | null
    encoded_content: string
  }

  export type APIKeyCreateManyUserInput = {
    id?: string
    key?: string
    name: string
    created_at?: Date | string
    last_used?: Date | string | null
    expires_at?: Date | string | null
    is_active?: boolean
  }

  export type FigCollectionCreateManyUserInput = {
    id?: string
    name: string
    prompt?: string | null
    created_at?: Date | string
    fig_collection_file_id?: string | null
  }

  export type FormUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    Field?: FieldUpdateManyWithoutFormNestedInput
    Submission?: SubmissionUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
    Field?: FieldUncheckedUpdateManyWithoutFormNestedInput
    Submission?: SubmissionUncheckedUpdateManyWithoutFormNestedInput
    PublishedForm?: PublishedFormUncheckedUpdateManyWithoutFormNestedInput
    PromptFile?: PromptFileUncheckedUpdateManyWithoutFormNestedInput
    Webhook?: WebhookUncheckedUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    file?: NullableStringFieldUpdateOperationsInput | string | null
    theme_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    webhook_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublishedFormUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    encoded_content?: StringFieldUpdateOperationsInput | string
    form?: FormUpdateOneRequiredWithoutPublishedFormNestedInput
  }

  export type PublishedFormUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    encoded_content?: StringFieldUpdateOperationsInput | string
  }

  export type PublishedFormUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    form_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    encoded_content?: StringFieldUpdateOperationsInput | string
  }

  export type APIKeyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type APIKeyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type APIKeyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FigCollectionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fig_collection_file_id?: NullableStringFieldUpdateOperationsInput | string | null
    fig_collection_file?: FigCollectionFileUpdateOneWithoutFig_collectionNestedInput
  }

  export type FigCollectionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fig_collection_file_id?: NullableStringFieldUpdateOperationsInput | string | null
    fig_collection_file?: FigCollectionFileUncheckedUpdateOneWithoutFig_collectionNestedInput
  }

  export type FigCollectionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    prompt?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fig_collection_file_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FieldCreateManyFormInput = {
    id?: string
    name: string
    label: string
    type: string
    description?: string | null
    required: boolean
    created_at?: Date | string
    order?: number | null
  }

  export type SubmissionCreateManyFormInput = {
    id?: string
    text?: string | null
    created_at?: Date | string
  }

  export type PublishedFormCreateManyFormInput = {
    id?: string
    user_id: string
    created_at?: Date | string
    last_published_at?: Date | string | null
    encoded_content: string
  }

  export type PromptFileCreateManyFormInput = {
    id?: string
    created_at?: Date | string
    title: string
    extracted_text: string
    base64_content?: string | null
    url?: string | null
  }

  export type FieldUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    FieldOption?: FieldOptionUpdateManyWithoutFieldNestedInput
  }

  export type FieldUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    FieldOption?: FieldOptionUncheckedUpdateManyWithoutFieldNestedInput
  }

  export type FieldUncheckedUpdateManyWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    required?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubmissionUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedFormUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    encoded_content?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPublishedFormNestedInput
  }

  export type PublishedFormUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    encoded_content?: StringFieldUpdateOperationsInput | string
  }

  export type PublishedFormUncheckedUpdateManyWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_published_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    encoded_content?: StringFieldUpdateOperationsInput | string
  }

  export type PromptFileUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    base64_content?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromptFileUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    base64_content?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromptFileUncheckedUpdateManyWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    extracted_text?: StringFieldUpdateOperationsInput | string
    base64_content?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FieldOptionCreateManyFieldInput = {
    id?: string
    name: string
    created_at?: Date | string
  }

  export type FieldOptionUpdateWithoutFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldOptionUncheckedUpdateWithoutFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldOptionUncheckedUpdateManyWithoutFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormCountOutputTypeDefaultArgs instead
     */
    export type FormCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FieldCountOutputTypeDefaultArgs instead
     */
    export type FieldCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FieldCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormDefaultArgs instead
     */
    export type FormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FieldDefaultArgs instead
     */
    export type FieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FieldDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FieldOptionDefaultArgs instead
     */
    export type FieldOptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FieldOptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubmissionDefaultArgs instead
     */
    export type SubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubmissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PublishedFormDefaultArgs instead
     */
    export type PublishedFormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PublishedFormDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StripeUserDefaultArgs instead
     */
    export type StripeUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StripeUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PromptFileDefaultArgs instead
     */
    export type PromptFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PromptFileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WebhookDefaultArgs instead
     */
    export type WebhookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WebhookDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FigCollectionDefaultArgs instead
     */
    export type FigCollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FigCollectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FigCollectionFileDefaultArgs instead
     */
    export type FigCollectionFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FigCollectionFileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use APIKeyDefaultArgs instead
     */
    export type APIKeyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = APIKeyDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}