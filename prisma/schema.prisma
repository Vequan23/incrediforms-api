// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  tier_id       String
  logo_url      String?
  created_at    DateTime        @default(now())
  Form          Form[]
  PublishedForm PublishedForm[]
  StripeUser    StripeUser[]
  APIKey        APIKey[]
  FigCollection FigCollection[]
}

model Form {
  id            String          @id @default(uuid())
  user          User            @relation(fields: [user_id], references: [id])
  user_id       String
  name          String
  description   String?
  prompt        String?
  file          String?
  theme_color   String?
  created_at    DateTime        @default(now())
  Field         Field[]
  Submission    Submission[]
  PublishedForm PublishedForm[]
  PromptFile    PromptFile[]
  Webhook       Webhook?        
  webhook_id    String?         @unique
}

model Field {
  id          String        @id @default(uuid())
  form        Form          @relation(fields: [form_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  form_id     String
  name        String
  label       String
  type        String
  description String?
  required    Boolean
  created_at  DateTime      @default(now())
  order       Int?
  FieldOption FieldOption[]
}

model FieldOption {
  id         String   @id @default(uuid())
  field      Field    @relation(fields: [field_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  field_id   String
  name       String
  created_at DateTime @default(now())
}

model Submission {
  id         String   @id @default(uuid())
  form       Form     @relation(fields: [form_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  form_id    String
  text       String?
  created_at DateTime @default(now())
}

model PublishedForm {
  id                String    @id @default(uuid())
  form              Form      @relation(fields: [form_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  form_id           String
  user              User      @relation(fields: [user_id], references: [id])
  user_id           String
  created_at        DateTime  @default(now())
  last_published_at DateTime?
  encoded_content   String
}

model StripeUser {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  stripe_id  String
  created_at DateTime @default(now())
}

model PromptFile {
  id         String   @id @default(uuid())
  form       Form     @relation(fields: [form_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  form_id    String   @unique
  created_at DateTime @default(now())
  title      String
  extracted_text String
  base64_content String?
  url String?
}

model Webhook {
  id         String   @id @default(uuid())
  form       Form     @relation(fields: [form_id], references: [id])
  form_id    String   @unique
  url        String
  method     String? @default("POST")
  api_key    String?
  api_key_header String?
  created_at DateTime @default(now())
}

model FigCollection {
  id         String   @id @default(uuid())
  name       String
  prompt     String?
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  fig_collection_file   FigCollectionFile?
  fig_collection_file_id     String? @unique
}

model FigCollectionFile {
  id         String   @id @default(uuid())
  title       String
  extracted_text String
  created_at DateTime @default(now())
  fig_collection FigCollection? @relation(fields: [fig_collection_id], references: [id])
  fig_collection_id String? @unique
}

model APIKey {
  id          String    @id @default(uuid())
  key         String    @unique @default(uuid())
  name        String    
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  created_at  DateTime  @default(now())
  last_used   DateTime?
  expires_at  DateTime?
  is_active   Boolean   @default(true)
}
  